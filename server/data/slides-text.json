{
  "ArchitectureIntro-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES INTRODUCTION FROM THE ZX GENERATION TO THE MACBOOK GENERATION DUNDEE.AC.UK PAGE 1",
  "ArchitectureIntro-02": "IN THIS SESSION REVISION OF KEY POINTS FROM AC21009 SUMMARY OF WHAT HAS CHANGED IN COMPUTER ARCHITECTURE FROM THE 1980S TO TODAY DUNDEE.AC.UK PAGE 2",
  "ArchitectureIntro-03": "SYLLABUS ADVANCED ARCHITECTURES MEMORY INTRODUCTION, MULTI-LEVEL MEMORY, CACHING, VIRTUAL MEMORY, MEMORY MANAGEMENT PROCESSOR ARCHITECTURE, INSTRUCTION PIPELINES, INSTRUCTION SETS, GREEN ISSUES INPUT OUTPUT I O TECHNIQUES, WORKSTATION ARCHITECTURE DUNDEE.AC.UK PAGE 3",
  "ArchitectureIntro-04": "INTRODUCTION IN THE BEGINNING DUNDEE.AC.UK PAGE 4",
  "ArchitectureIntro-05": "OVERVIEW MECHANICAL CALCULATING DEVICES EARLY ELECTRONIC CALCULATING DEVICES BASIC MICROCOMPUTERS MODERN MICROCOMPUTERS WE COVERED THESE IN AC21009 DUNDEE.AC.UK AC22005 PAGE 5",
  "ArchitectureIntro-06": "THE PHILOSOPHY - PART 1 WE CAN MAKE SIMPLE BINARY LOGIC GATE STRUCTURES THAT CAN DO ALL OF THE FUNCTIONS NEEDED FOR COMPUTATION WE CAN COMBINE ALL OF THESE INTO A SMALL NUMBER OF ELECTRONIC DEVICES CHIPS WE DESIGN THE ELECTRONICS TO READ A PRE PROGRAMMED SERIES OF INSTRUCTIONS STORED AS BINARY NUMBERS , SO THAT WE CAN CREATE A FREE RUNNING SEQUENCE THE FETCH-EXECUTE CYCLE DUNDEE.AC.UK PAGE 6",
  "ArchitectureIntro-07": "THE PHILOSOPHY - PART 2 OVER TIME, THESE DEVICES HAVE BECOME SO COMPLEX AND FAST THAT WE CAN T HOPE TO UNDERSTAND THEM AT THE BINARY LEVEL WE WRITE PROGRAMS TO TRANSLATE HIGHER-LEVEL LANGUAGE SCRIPTS INTO BINARY, SO THE LOW-LEVEL ELECTRONICS CAN STILL FUNCTION WE ARE NOW SO GOOD AT THIS, THAT EVEN PROGRAMMERS DON T NEED TO THINK IN BINARY THE MAIN SUPPORTING FUNCTIONALITY HAS BEEN MOVED OUT OF APPLICATION PROGRAMS INTO THE OPERATING SYSTEM ALSO ACTS A MANAGER DUNDEE.AC.UK PAGE 7",
  "ArchitectureIntro-08": "A SIMPLE COMPUTER WE HAVE SEEN IN AC21009 THAT A BASIC MICROCOMPUTER CONSISTS OF A CPU MICROPROCESSOR MEMORY BOTH ROM AND RAM INPUT OUTPUT THESE ARE ALL CONNECTED VIA AN ADDRESS BUS AND A DATA BUS PLUS CONTROL SIGNALS . THESE ARE EMBODIED IN OUR SIMPLE MICROCOMPUTER . DUNDEE.AC.UK PAGE 8",
  "ArchitectureIntro-09": "ANY ELECTRONIC A SIMPLE COMPUTER DATA BUS CPU CLOCK DUNDEE.AC.UK MEMORY INPUT OUTPUT TO FROM THE REAL WORLD ADDRESS BUS CONTROL BUS IS NOT SHOWN PAGE 9",
  "ArchitectureIntro-10": "DUNDEE.AC.UK PAGE 10",
  "ArchitectureIntro-11": "IF COMPUTERS WERE CARS ... THE ZX80 IN CAR TERMS IS A IN LAYOUT, SIMILAR TO THE WAY THEY ARE TODAY TRANSITIONING FROM SPECIALIST GADGET TO MASS-PRODUCED MASS-MARKET APPEAL FEW FEATURES WE WANT DELUXE SLOW WE WANT SPEED PRONE TO BREAKDOWN WE WANT RELIABILITY DUNDEE.AC.UK PAGE 11",
  "ArchitectureIntro-12": "THE MISSION OF AC22005 DUNDEE.AC.UK PAGE 12",
  "ArchitectureIntro-13": "INCREASE THE POWER THE PROCESSOR CONSTANTLY OPERATES A FETCH-EXECUTE CYCLE, FETCHING INSTRUCTIONS AND DATA FROM MEMORY AND EXECUTING THEM IN AN ENDLESS STREAM. THE POWER OF A COMPUTER IS RELATED TO HOW QUICKLY IT CAN PROCESS INSTRUCTIONS AND DATA. IT S ALL ABOUT SPEED DUNDEE.AC.UK PAGE 13",
  "ArchitectureIntro-14": "A WORD ABOUT SPEED WE WILL REFER TO SPEED THROUGHOUT THIS MODULE, AND IN PARTICULAR INCREASING THE SPEED OF OUR COMPUTER. NOTE THAT WE ARE TALKING ABOUT HOW ARCHITECTURAL DEVELOPMENTS HAVE INCREASED THE SPEED OF COMPUTER SYSTEMS OVER TIME THE SPEED OF ANY GIVEN COMPUTER, PROCESSOR OR MEMORY IS GENERALLY FIXED AND IT CANNOT BE MADE TO GO FASTER DUNDEE.AC.UK PAGE 14",
  "ArchitectureIntro-15": "FETCH-EXECUTE CONCEPT INSTRUCTION BINARY NUMBER OPERAND BINARY NUMBER OUTPUT BINARY NUMBER U P C IN A M O Y T R CK MO A B ME THE CPU FETCHES A CONSTANT STREAM OF INSTRUCTIONS AND OPERANDS, AND OCCASIONALLY SAVES SOME DATA BACK TO MEMORY DUNDEE.AC.UK PAGE 15",
  "ArchitectureIntro-16": "SPEEDING THINGS UP TO MAKE OUR COMPUTER GO FASTER, CONCEPTUALLY WE CAN DO SEVERAL THINGS MAKE THE CLOCK TICK FASTER IMPROVE THE STRUCTURE OF THE PROCESSOR IDENTIFY THE SLOW PARTS OF THE PROCESS AND DO LESS OF THEM ADD PARALLELISM - ATTEMPT TO DO SEVERAL THINGS ALL AT THE SAME TIME AND WE ALSO GET SOME IMPLICIT SAVINGS - UNEXPECTED EXTRA BENEFITS WE DIDN T PLAN FOR DUNDEE.AC.UK PAGE 16",
  "ArchitectureIntro-17": "AT THE SAME TIME AS WELL AS MAKING THE COMPUTER FASTER, THERE ARE SOME OTHER BACKGROUND FACTORS WE WANT TO BE ABLE TO RUN MULTIPLE PROGRAMS AT THE SAME TIME WE WANT GRAPHICAL OUTPUT TO BE MORE SOPHISTICATED HARD DISKS ARE BECOMING AVAILABLE NETWORKS ARE BECOMING AVAILABLE ALL OF THESE MEAN A LOT MORE I O WILL BE REQUIRED DUNDEE.AC.UK PAGE 17",
  "ArchitectureIntro-18": "SPEEDING THINGS UP IN 1965, INTEL COFOUNDER GORDON MOORE SAID THAT A SILICON CHIP S NUMBER OF TRANSISTORS AND THUS ITS PROCESSING POWER WOULD DOUBLE EVERY MOORE S 18 MONTHS. LAW IN THIS AND OTHER FORMS HAS PROVEN TO BE REMARKABLY ACCURATE BUT THIS IS STILL NOT ENOUGH FOR POWER-HUNGRY APPLICATIONS DUNDEE.AC.UK PAGE 18",
  "ArchitectureIntro-19": "SO WHAT CAN WE DO WE CAN IMPROVE PROCESSOR PERFORMANCE BY ADDING MORE POWER TO THE HARDWARE WITH NEW INSTRUCTIONS WHICH DO MORE COMPLEX FUNCTIONS ADD MORE ADDRESSING MODES PUTTING SOME OPERANDS TOGETHER WITH THE OPCODE, SO THAT A SEPARATE OPERAND FETCH CYCLE IS NOT NEEDED THE MANCHESTER BABY ACTUALLY DID THIS PIPELINING INSTRUCTIONS ALLOWS CPU TO PROCESS PAGE 19 DUNDEE.AC.UK",
  "ArchitectureIntro-20": "SO WHAT CAN WE DO WE CAN IMPROVE PROCESSOR PERFORMANCE BY USING MULTIPLE PIPELINES WITHIN ONE CPU - THIS IS KNOWN AS SUPER-SCALAR ARCHITECTURE USING MULTIPLE CPUS AND CRANKING UP THE CLOCK SPEED OF THE PROCESSOR THE PEOPLE DOWN AT THE SILICON LAB HAVE BEEN DOING THIS FOR US FOR YEARS, BUT PHYSICAL MATERIAL LIMITS ARE MAKING THEIR LIFE HARDER ALL THE TIME DUNDEE.AC.UK PAGE 20",
  "ArchitectureIntro-21": "SO WHAT CAN WE DO WE CAN IMPROVE MEMORY PERFORMANCE BY MINIMISING MEMORY ACCESSES - DURING AN INSTRUCTION CYCLE, THE PROCESSOR SPENDS A LOT OF TIME WAITING ON DATA COMING FROM MAIN MEMORY, SO WE WANT TO REDUCE WAITING TIMES WE DO THIS BY ADDING A SMALL CACHE MEMORY TO THE PROCESSOR AND CRANKING UP THE CLOCK SPEED OF THE MEMORY AND REMEMBER THAT THE MEMORY WILL BE A LOT LARGER TO HOLD THE MULTIPLE PROCESSES WE ARE RUNNING BUT SIZE ALONE HAS NO EFFECT VE OR -VE ON MEMORY ACCESS SPEED DUNDEE.AC.UK PAGE 21",
  "ArchitectureIntro-22": "SO WHAT CAN WE DO WE CAN IMPROVE INPUT OUTPUT PERFORMANCE BY MOVING FASTER I O DEVICES ONTO FASTER SYSTEM BUSES SO THAT SLOWER DEVICES DON T SLOW DOWN THE WHOLE COMPUTER ADOPTING NEW AND IMPROVED I O TECHNIQUES BOTH HARDWARE AND SOFTWARE DUNDEE.AC.UK PAGE 22",
  "ArchitectureIntro-23": "WHAT S THE CATCH ALL OF THESE PROCEDURES REQUIRE A MORE COMPLEX STRUCTURE FOR THE HARDWARE AND PROBABLY FOR THE SOFTWARE TOO . THEY ALSO CREATE THEIR OWN PROBLEMS WHICH MUST BE SOLVED TO ALLOW SUCCESSFUL IMPLEMENTATION. HOWEVER, IF WE ARE PREPARED TO PAY THE COST OF THIS COMPLEXITY, THEN WE GET THE IMPROVED PERFORMANCE THAT WE DESIRE SO, IN EFFECT, THE ADDITIONAL COMPLEXITY PAYS FOR ITSELF . DUNDEE.AC.UK PAGE 23",
  "ArchitectureIntro-24": "SO ... THREE MAIN POINTS TO REMEMBER 1 MOORE S LAW PERFORMANCE DOUBLES EVERY 18 MONTHS 2 WE ALWAYS WANT MORE SPEED THAN 1 GIVES 3 WE WILL ACCEPT GREATER COMPLEXITY AND EVEN COST IF THAT DELIVERS 2 NUMBER OF TRANSISTORS GROWS BY ABOUT 1.6 TIMES YEAR PROPORTIONAL TO SQUARE OF LINEAR DIMENSION , SPEED INCREASES LINEARLY WITH DECREASING SIZE DUNDEE.AC.UK PAGE 24",
  "ArchitectureIntro-25": "MEMORY RESTRUCTURING COMPLEXITY IS GOOD DUNDEE.AC.UK PAGE 25",
  "ArchitectureIntro-26": "MEMORY STRUCTURE 1 IDEALLY, WE WANT THE PROCESSOR TO BE ABLE TO ACCESS A VERY LARGE, VERY FAST REGISTER-LIKE MEMORY SAY, 1 CLOCK CYCLE PER FETCH . EVEN IF POSSIBLE, THIS WOULD BE VERY EXPENSIVE, SO WE MUST USE A SEPARATE MAIN MEMORY BUT MAIN MEMORY ACCESSES TAKE MANY CLOCK CYCLES SO CAN WE HAVE A LARGE MAIN MEMORY THAT RESPONDS WITH THE SPEED OF REGISTERS DUNDEE.AC.UK PAGE 26",
  "ArchitectureIntro-27": "MEMORY STRUCTURE 2 IDEALLY, WE WANT THE MAIN MEMORY TO BE AS LARGE AS POSSIBLE. HOWEVER, THIS WOULD ALSO BE VERY EXPENSIVE, SO WE CAN USE SEPARATE HARD DISK STORAGE AS VIRTUAL MEMORY TO AUGMENT THE RAM. BUT HARD DISK ACCESSES ARE VERY SLOW SO CAN WE HAVE VIRTUAL MEMORY THAT RESPONDS WITH THE SPEED OF MAIN MEMORY MEMORY MANAGEMENT TRIES TO DO THIS. DUNDEE.AC.UK PAGE 27",
  "ArchitectureIntro-28": "MULTI-LEVEL MEMORY FOR PRACTICAL AND ECONOMIC REASONS, TODAY S PCS HAVE A MULTI-LEVEL MEMORY STRUCTURE CPU REGISTERS D SP EE G SI N IN CR EA E HARD DISK STORAGE Z SI VIRTUAL MEMORY NG L3 CACHE MAIN MEMORY I AS RE DUNDEE.AC.UK L2CACHE CACHE C IN L1 CACHE BACKUP STORAGE PAGE 28",
  "ArchitectureIntro-29": "THE END IS NIGH WE KNOW THAT TRANSISTOR SIZE CAN T BE REDUCED FOREVER - MOORE S LAW IS STARTING TO BREAK DOWN PERFORMANCE ENHANCEMENT THROUGH SOME PROCESSOR ENHANCEMENTS HAS ALREADY GONE AS FAR AS IT CAN INCREASING INTEREST IN GREEN ISSUES WE NEED TO LOOK AHEAD TO THE NEXT PROCESSOR TECHNOLOGY DUNDEE.AC.UK PAGE 29",
  "ArchitectureIntro-30": "SUMMARY WE HAVE SEEN STARTING POINT IS THE BASIC MICROCOMPUTER - REVISE YOUR NOTES FROM AC21009 BETTER SPEED PERFORMANCE IS THE NEW GOAL WE WILL ACCEPT INCREASED HARDWARE COMPLEXITY IF IT OFFERS BETTER PERFORMANCE DUNDEE.AC.UK PAGE 30",
  "ArchitectureIntro-31": "DUNDEE.AC.UK",
  "BusArch-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES BUS ARCHITECTURES DUNDEE.AC.UK PAGE 1",
  "BusArch-02": "IN THIS VIDEO INTRODUCTION TO BUS HIERARCHIES DEVELOPMENT OF BUS HIERARCHIES EXPANSION AND HIGH-SPEED BUSES DISK DRIVE AND GRAPHICS BUSES USB, PCIE AND SATA THE MAIN HARDWARE FEATURES OF A PC SUMMARY OF THE HARDWARE SECTION DUNDEE.AC.UK PAGE 2",
  "BusArch-03": "WHAT IS A BUS A BUS IS A PATHWAY THAT INTER-CONNECTS TWO OR MORE COMPONENTS IN A COMPUTER A BUS IS MADE UP OF A NUMBER OF LINES, WHICH COLLECTIVELY CARRY A SIGNAL ANY SIGNAL PUT ONTO THE BUS IS AVAILABLE FOR RECEIPT BY ALL OTHER COMPONENTS THAT ARE CONNECTED TO THE BUS A SYSTEM OF BUSES ENABLES THE CPU TO TALK TO MEMORY AND I O DEVICES. A COLLECTION OF INTERCONNECTED BUSES IS CALLED A BUS HIERARCHY. DUNDEE.AC.UK PAGE 3",
  "BusArch-04": "PC ARCHITECTURE OVERVIEW THERE HAVE BEEN TWO MAJOR DEFINING FACTORS IN PC ARCHITECTURE OVER TIME CPU ARCHITECTURE E.G. X86, PENTIUM X, CORE X BUS ARCHITECTURE E.G. AT BUS, ISA BUS, PCI BUS, AGP BUS LOG SPEED PROCESSOR DISK DRIVES, NETWORKS ETC. KEYBOARDS, MICE ETC. TIME DUNDEE.AC.UK PAGE 4",
  "BusArch-05": "PC ARCHITECTURE OVERVIEW EARLY MICROCOMPUTERS HAD LITTLE I O DEMAND AND USED GENERIC DEVICES TO HANDLE IT. OVER TIME, MORE AND MORE I O DEMAND HAS BEEN ADDED, AND THE TENDENCY HAS BEEN TOWARDS MORE SPECIALISATION I.E. DIFFERENT TYPES OF DEVICES HAVING THEIR OWN SPECIALIST HARDWARE AND I O CHANNELS. THIS HAS MEANT MORE COMPLEXITY IN THE ARCHITECTURE OF OUR SYSTEMS, BUT AS THE AIM IS ALWAYS TO DELIVER MORE SPEED, WE ARE PREPARED TO ACCEPT THIS. DUNDEE.AC.UK PAGE 5",
  "BusArch-06": "ORIGINALLY NO HIERARCHY MAIN MEMOR Y CPU VDU SERIAL DISK KEYBOARD SYSTEM BUS DATA BUS, ADDRESS BUS AND CONTROL BUS TOGETHER DUNDEE.AC.UK PAGE 6",
  "BusArch-07": "FASTER E ST S-LOW T FAS DUNDEE.AC.UK PAGE 7",
  "BusArch-08": "DESIRABLE FEATURES THERE ARE SOME FEATURES THAT WE WOULD LIKE OUR REVISED BUS ARCHITECTURE TO HAVE DATA TRANSFER RATE WE WANT TO SUPPORT HIGH TRANSFER RATES TO SERVICE HIGH DEMAND I O DEVICES E.G. VDU WE WANT HIGH-DEMAND DEVICES TO BE CLOSELY INTEGRATED WITH CPU FOR SPEED WE WANT CPU-MEMORY COMMUNICATION FASTEST TO BE SEPARATE FROM CPU-OTHER DEVICE COMMUNICATION MUCH SLOWER DUNDEE.AC.UK PAGE 8",
  "BusArch-09": "DESIRABLE FEATURES COMPATIBILITY WE WANT THE I O CHIPS TO BE INDEPENDENT OF THE CPU FOR EASE UP UPGRADE OF SYSTEM COMPONENTS WE WANT BACKWARDS COMPATIBILITY WITH EXISTING I O CHIPS THESE ARE NOT ALWAYS ACHIEVED, SIMPLY BECAUSE TECHNOLOGY MOVES ON SO QUICKLY DUNDEE.AC.UK PAGE 9",
  "BusArch-10": "BUS HIERARCHY 1980S MAIN MEMORY OFF-CHIP CACHE L3 CPU VDU LOCAL BUS SERIAL CACHE CONTROLLER SYSTEM BUS BRIDGE DISK KEYBOARD EXPANSION BUS WHAT WE NOW CALL L3 CACHE IN THE 1980S IT WAS JUST THE CACHE DUNDEE.AC.UK PAGE 10",
  "BusArch-11": "BUS ARCHITECTURES BUS HIERARCHY HAD TO EVOLVE TO COPE WITH PERFORMANCE REQUIREMENTS OF CPU AND NEW APPLICATIONS E.G. FAST GRAPHICS BUILDUPS DUE TO THE PROLIFERATION OF GUIS THE TYPICAL SOLUTION WAS TO ADD ANOTHER BUS - KNOWN GENERICALLY AS THE HIGHSPEED BUS. DUNDEE.AC.UK PAGE 11",
  "BusArch-12": "BUS HIERARCHY 1990S CACHE L2 CPU MAIN MEMORY CACHE L3 LOCAL BUS VDU CACHE CONTROLLER SYSTEM BUS BRIDGE DISK HIGH SPEED BUS SERIAL EXPANSION BUS BRIDGE KEYBOARD EXPANSION BUS DUNDEE.AC.UK PAGE 12",
  "BusArch-13": "TYPICAL MODERN STRUCTURE THE TYPICAL ARCHITECTURE IN A PC WOULD BE LOCAL BUS SYSTEM BUS HIGH-SPEED BUS PCI, AGP, PCIE, ATA IDE , SCSI, SATA EXPANSION BUS ALL OF THESE CAN BE CLOCKED AT DIFFERENT SPEEDS. DUNDEE.AC.UK PAGE 13",
  "BusArch-14": "ON THE BUSES LOCAL BUS VERY FAST BUS 500MHZ CONNECTS CPU TO CACHE MEMORY INTERNALLY TO CPU MODULE AND THE BRIDGE CHIP SYSTEM BUS FAIRLY FAST BUS 100MHZ CONNECTS CPU TO MAIN MEMORY DUNDEE.AC.UK PAGE 14",
  "BusArch-15": "ON THE BUSES HIGH SPEED BUS 33MHZ SUPPORTS HIGH-SPEED PERIPHERAL DEVICES E.G. HARD DISK, VDU, HIGHSPEED LANS EXPANSION BUS 8MHZ SUPPORTS MEDIUM LOW SPEED PERIPHERALS PROVIDES BACKWARD COMPATIBILITY TO EXISTING I O CHIPS SOME ADAPTER BOARDS DON T WORK, OR ARE UNRELIABLE, AT HIGHER SPEEDS DUNDEE.AC.UK PAGE 15",
  "BusArch-16": "ISA BUS INDUSTRY STANDARD ARCHITECTURE ISA BUS 1984 BY IBM - AN EXAMPLE OF AN EXPANSION BUS 8.3 MHZ 16 MBYTES PER SECOND 16 DATA LINES ORIGINALLY 8 24 ADDRESS LINES 3 DMA CHANNELS 14 INTERRUPT LEVELS DUNDEE.AC.UK PAGE 16",
  "BusArch-17": "PCI BUS PERIPHERAL COMPONENT INTERCONNECT PCI BUS 1993 BY INTEL - A TYPICAL HIGHSPEED BUS 33MHZ 127 MBYTES PER SECOND WITH 32-BIT DATA BUS, ALSO 66MHZ VERSION CPU INDEPENDENT BUS IF CPU AND LOCAL BUS CHANGED, WE NEED TO CHANGE BRIDGE CHIP, BUT NOT THE I O DEVICES ATTACHES TO THE LOCAL BUS VIA A LOCALBUS-TO-PCI BRIDGE CHIP DUNDEE.AC.UK PAGE 17",
  "BusArch-18": "PCI BUS CONTINUED SUPPORT FOR OTHER BUSES TO BE CONNECTED, E.G. 2 TO 3 EXPANSION PORTS AVAILABLE. PCI USES TIME-MULTIPLEXING - CERTAIN LINES COULD BE USED AS EITHER ADDRESS OR DATA LINES. FOR BLOCK TRANSFER, PCI CAN OPERATE IN BLOCK MODE, WHICH IS FASTER - ONLY THE FIRST ADDRESS AND THE SIZE OF THE BLOCK NEED BE TRANSFERRED. VERY FLEXIBLE - USED IN SERVERS, DESKTOPS, LAPTOPS, PROCESSOR INDEPENDENT. DUNDEE.AC.UK PAGE 18",
  "BusArch-19": "DMA AND THE PCI IT IS NORMAL THAT DMA MODULES CAN GAIN CONTROL OF THE PCI BUS - TYPICALLY SEVERAL DMA MODULES ARE AVAILABLE. AN ARBITRATION SCHEME IS USED TO RESOLVE REQUESTS FROM DISTINCT BUS MASTERS I.E. THE CPU AND DMA ARBITRATION ALGORITHM COULD BE 1ST-COME-1ST-SERVED, ROUND ROBIN, PRIORITY ETC. PCI SUPPORTS UP TO 10 LOADS, WHERE A MOTHERBOARD CHIP DEVICE IS 1 LOAD EXPANSION SLOT IS 2 LOADS DUNDEE.AC.UK PAGE 19",
  "BusArch-20": "DISK DRIVES ADVANCED TECHNOLOGY ATTACHMENT ATA BUS 1986 BY WESTERN DIGITAL - FOR INTERNALLY ATTACHING DISK DRIVES AND OTHER STORAGE DEVICES A.K.A. INTELLIGENT DEVICE INTERFACE IDE AND PARALLEL ATA PATA UP TO 133 MBPS, 2 DRIVES PER DEVICE SMALL COMPUTER SYSTEMS ARCHITECTURE SCSI BUS 1986 SIMILAR ORIGINALLY FASTER, BUT IDE CAUGHT UP DUNDEE.AC.UK PAGE 20",
  "BusArch-21": "AGP ACCELERATED GRAPHICS PORT 1996 BY INTEL IS SIMILAR TO PCI, BUT WAS DESIGNED ESPECIALLY FOR THE THROUGHPUT DEMANDS OF 3-D GRAPHICS DEDICATED 32-BIT POINT-TO-POINT CHANNEL TO ALLOW THE GRAPHICS CONTROLLER TO ACCESS MAIN MEMORY DIRECTLY SEPARATE FROM PCI BUS 66 MHZ 266 MBPS TWO OPTIONAL FASTER MODES, WITH THROUGHPUTS OF 533 MBPS AND 1.07 DUNDEE.AC.UK PAGE 21",
  "BusArch-22": "WATCH YOUR SPEED WITH CPU-Z DUNDEE.AC.UK PAGE 22",
  "BusArch-23": "WATCH YOUR SPEED IN A MAC DUNDEE.AC.UK PAGE 23",
  "BusArch-24": "BUS HIERARCHY 2000 L2 CACHE GRAPHICS CHIP 2 GBPS CPU CORE SYSTEM 800 MBPS SYSTEM AGP MEMORY BRIDGE 528 MBPS I O BRIDGE USB GRAPHICS MEMORY ISA 28 MBPS DUNDEE.AC.UK SCSI IDE LAN PCI SLOTS MOUSE SERIAL PCI 132 MBPS LOCAL BRIDGE BIOS 800 MBPS MAIN MEMORY RT CLOCK KEYBOARD PAGE 24",
  "BusArch-25": "SERIAL S REVENGE ALTHOUGH THE PARALLEL BUSES ARE FAST, CARRYING MULTIPLE SIGNALS AT THE SAME TIME, THE ADDITION OF SO MANY HIGHBANDWIDTH DEVICES ONTO THE BROADCAST BUSES WAS CLOGGING THEM UP. THE SOLUTION WAS TO INSTEAD CONNECT DEVICES POINT-TO-POINT USING HIGH-SPEED SERIAL LINKS THE NEW SERIAL STANDARDS ARE SIMILAR TO NETWORK PROTOCOLS, ALLOWING MUCH FASTER SPEEDS THAN RS232 1969 AND SIMILAR STANDARDS. DUNDEE.AC.UK PAGE 25",
  "BusArch-26": "USB UNIVERSAL SERIAL BUS 1996 DESIGNED AS REPLACEMENT FOR ALL CONTEMPORARY SERIAL AND PARALLEL PERIPHERALS FAST, ROBUST, SIMPLE - HENCE CHEAP HOT-SWAPPABLE - CAN BE SAFELY CONNECTED DISCONNECTED WITHOUT TURNING OFF THE POWER USB 2 GIVES UP TO 480MBPS , USB 3 GIVES UP TO 20 GBPS WIDELY ADOPTED BY HARDWARE SOFTWARE VENDORS FOR PCS, PDAS, CONSOLES ETC. DUNDEE.AC.UK PAGE 26",
  "BusArch-27": "PCIE PCI EXPRESS 2004 BY INTEL WAS DESIGNED TO REPLACE PCI AND AGP . PCIE IS A SCALABLE, SERIAL POINT-TO-POINT BUS BASED ON LANES A LANE CARRIES 256 MBPS IN EACH DIRECTION FASTER TRANSFERS CAN JUST USE MORE LANES SPECIFICATION SUPPORTS UP TO 32 LANES 16 GBPS DUPLEX DUNDEE.AC.UK PAGE 27",
  "BusArch-28": "PCIE PCI PCI EXPRESS SERIAL CONNECTION MEANS SIMPLER WIRING CONNECTORS AND ALLOWS HOT SWAP OF DEVICES. NOW STANDARD FOR GRAPHICS CARDS, BECOMING STANDARD FOR OTHER DEVICES. DUNDEE.AC.UK PAGE 28",
  "BusArch-29": "SATA SERIAL ATA 2003 WAS DESIGNED TO REPLACE IDE ATA NOW PATA FOR INTERNAL STORAGE DEVICES SERIAL, POINT-TO-POINT, HOT-SWAPPABLE SOMETIMES UP TO 375 MBPS DUNDEE.AC.UK PAGE 29",
  "BusArch-30": "REMEMBER REMEMBER THAT EACH OF THESE DIFFERENT TYPES OF BUS HAS WITHIN IT AN ADDRESS BUS A DATA BUS A CONTROL BUS IN OLDER SYSTEMS, THERE WAS ONLY ONE TYPE OF EACH. IN MODERN SYSTEMS, WE NOW HAVE THE MULTI-LAYERED BUS HIERARCHY, WITH DIFFERENT ADDRESS, DATA AND CONTROL BUSES WITHIN EACH. DUNDEE.AC.UK PAGE 30",
  "BusArch-31": "BUS HIERARCHY NOW CONCEPT CPU END PT MAIN END PT HOST BRIDGE END PT SWITCH MEMORY END PT END PT DUNDEE.AC.UK END PT END PT END PT END PT END PT PAGE 31",
  "BusArch-32": "BUS HIERARCHY NOW ACTUAL L2 CACHE CPU CORE CPU CORE L2 CACHE L3 CACHE GRAPHICS MAIN MEMORY MEMORY BRIDGE SATA PCI I O BRIDGE USB SWITCH END PT - LAN END PT - ETC LOCAL BRIDGE BIOS DUNDEE.AC.UK RT CLOCK KEYBOARD MOUSE SERIAL PAGE 32",
  "BusArch-33": "TO SUMMARISE YE OLDEN DAYS NOT MUCH TRAFFIC NOT MANY ROUTES ONE TYPE OF ROUTE DUNDEE.AC.UK TODAY LOTS OF TRAFFIC MORE ROUTES ROUTES WITH A VARIETY OF SPEEDS CAPACITIES PAGE 33",
  "BusArch-34": "TO SUMMARISE YE OLDEN DAYS NOT MUCH TRAFFIC NOT MANY ROUTES ONE TYPE OF ROUTE DUNDEE.AC.UK TODAY LOTS OF TRAFFIC MORE ROUTES ROUTES WITH A VARIETY OF SPEEDS CAPACITIES PAGE 34",
  "BusArch-35": "PC SYSTEM UNIT A TYPICAL PC SYSTEM UNIT WILL CONTAIN MOTHERBOARD WITH CPU, MEMORY ETC. ADAPTER BOARDS IN MOTHERBOARD S EXPANSION SLOTS POWER SUPPLY CONVERTS MAINS TO DC DRIVE EXPANSION BAYS FOR 1 OR MORE HARD DRIVES SSDS COMING 1 OR MORE CD-ROM DVD DRIVES AND PROBABLY SEVERAL FANS DUNDEE.AC.UK PAGE 35",
  "BusArch-36": "MOTHERBOARD - COMPONENTS CPU USUALLY REMOVABLE CACHE RAM CONTROLLER CHIP BRIDGE CHIPS PCI-TO-LOCAL BUS PCI-TO-ISA INTEGRATED ADAPTERS AND EXPANSION PORTS, E.G. DISPLAY, KEYBOARD MOUSE, LAN, SCSI, IDE ROM BIOS REAL-TIME CLOCK CALENDAR NON-VOLATILE DUNDEE.AC.UK PAGE 36",
  "BusArch-37": "ROM BIOS LOADS BASIC OPERATING SYSTEM SOFTWARE FROM START-UP DEVICE E.G. HARD DISK LAN PORT PERFORMS POWER-ON SYSTEM TESTS TYPICALLY 64-128KB ROM, CONTENTS ARE MOVED TO DRAM AFTER POWER-ON FOR EXECUTION AS DRAM IS FASTER TYPICALLY, ALSO SUPPORT FOR SYSTEM CONFIGURATION DETECTION AND RESOURCE ALLOCATION AS DEFINED BY PLUG AND PLAY SPECIFICATION DUNDEE.AC.UK PAGE 37",
  "BusArch-38": "SUMMARY WE HAVE SEEN PC BUS ARCHITECTURE DEVELOPMENT OF BUS HIERARCHIES FROM 1980 - PRESENT DETAILS OF MAIN BUS STANDARDS MAIN HARDWARE FEATURES OF A PC DUNDEE.AC.UK PAGE 38",
  "BusArch-39": "SECTION SUMMARY OUR EARLY MICROCOMPUTER WAS FUNCTIONAL BUT S-L-O-W WE HAVE IMPROVED THROUGHPUT BY DECREASING TRANSISTOR SIZE, WHICH INCREASES SWITCHING SPEED AND SO ALLOWS FASTER CLOCK SPEEDS USING MORE TRANSISTORS, WHICH HAS ALLOWED MORE REGISTERS AND MORE COMPLEX INSTRUCTIONS IN THE CPU EXPANDING THE DATA BUS WIDTH, WHICH MEANS THE CPU CAN READ WRITE DATA IN LARGER CHUNKS EXPANDING THE ADDRESS BUS WIDTH, WHICH MEANS THE CPU CAN ACCESS A LARGER MEMORY SPACE DUNDEE.AC.UK PAGE 39",
  "BusArch-40": "SECTION SUMMARY WE HAVE IMPROVED THROUGHPUT BY REDUCING THE AMOUNT OF SLOW MEMORY ACCESSES BY USING CACHES SEVERAL LEVELS ADDING INSTRUCTION-LEVEL PARALLELISM BY USING PIPELINES INCREASING PIPELINE EFFICIENCY BY USING BRANCH PREDICTION DUNDEE.AC.UK PAGE 40",
  "BusArch-41": "SECTION SUMMARY WE HAVE IMPROVED THROUGHPUT BY ADDING THREAD-LEVEL PARALLELISM BY USING SUPER SCALAR ARCHITECTURE IMPROVING I O EFFICIENCY BY ADDING DMA REDUCING I O QUEUING DELAYS BY BUFFERING I O INCREASING OVERALL SYSTEM EFFICIENCY BY USING A BUS HIERARCHY ALL OF THESE MAKE OUR SYSTEM MORE COMPLEX, BUT THAT S OK IF IT S FASTER, BECAUSE IT S ALL ABOUT SPEED DUNDEE.AC.UK PAGE 41",
  "BusArch-42": "NEXT START OF THE OPERATING SYSTEMS SECTION DUNDEE.AC.UK PAGE 42",
  "BusArch-43": "DUNDEE.AC.UK",
  "concur_tut_1-01": "OPERATING SYSTEMS CONCURRENCY PRACTICAL EXAMPLES D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE ADDITIONAL MATERIAL AND PRESENTED BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "concur_tut_1-02": "OPERATING SYSTEMS A SLIGHT GENERALISATION CAR PARK PROBLEM CONSIDER A WALLED-IN CAR-PARK WITH 20 PARKING SPACES AND A SINGLE ENTRY EXIT. THIS IS AN EXAMPLE OF A SITUATION WHERE IT IS SAFE TO HAVE MORE THAN ONE CAR PROCESS INSIDE THE PARK. HOWEVER, THERE SHOULD NEVER BE MORE THAN 20 CARS INSIDE AT ANY TIME. ANY OTHERS HAVE TO QUEUE BEFORE THE GATE. ONLY ONE CAR CAN PASS THE GATE AT A TIME. AC22005 2",
  "concur_tut_1-03": "OPERATING SYSTEMS SEMAPHORE S ON CAR PARK I WHAT ARE THE SHARED RESOURCES THAT NEEDS TO BE PROTECTED MENTI 1. CAR S 2. EACH PARKING SPOT 3. PARKING AS A WHOLE MAXIMUM 20 CARS 4. GATE ONLY ONE CAR AT A TIME 5. WALL PARKING SPOTS CAN HAVE A SINGLE CAR AT A TIME BUT THIS CAN BE ENSURED BY USING ADEQUATE MODELLING AND ENFORCING ONLY THE WHOLE PARKING LIMIT. AC22005 3",
  "concur_tut_1-04": "OPERATING SYSTEMS SEMAPHORE S ON CAR PARK II HOW MANY SEMAPHORES WOULD YOU USE MENTI 1. ONE 2. TWO 3. THREE 4. MORE 5. NONE ONE FOR THE GATE AND ONE FOR THE WHOLE PARKING WHAT WOULD THOSE SEMAPHORES LOOK LIKE TYPE, INITIAL COUNTER VALUE, MAXIMUM VALUE, MENTI X2 AC22005 4",
  "concur_tut_1-05": "OPERATING SYSTEMS SEMAPHORE S ON CAR PARK III PARKING PLACES SEMAPHORE THE COUNT WOULD BE INITIALISED TO 20, AND DECREMENTED WHEN EACH CAR ENTERED PARK WHEN COUNT GOES 0, NEXT CAR IS FORCED TO QUEUE AT THE GATE, BECAUSE CAR PARK IS FULL THE QUEUE OF CARS AT THE GATE CAN BUILD UP WHENEVER A CAR LEAVES THE PARK, THE COUNT IS INCREMENTED, AND ONE CAR IS ALLOWED TO ENTER. GATE PASSING SEMAPHORE WOULD BE A BINARY SEMAPHORE AC22005 5",
  "concur_tut_1-06": "OPERATING SYSTEMS CARS ALGORITHM EACH CAR ACCESSING THE PARKING SHOULD HAVE THIS BIT OF PROGRAM TO ENSURE ADEQUATE ACCESS DRIVE DRIVE TO THE CAR PARK. WAIT PARKING WAIT FOR A FREE PARKING SPOT. IN WHICH ORDER SHOULD THE SEMAPHORE BE WAITED FOR WAIT GATE WAIT FOR THE GATE TO BE FREE. ENTER ENTER THE PARKING. SIGNAL GATE FREE THE GATE. PARK PARK UNTIL LEAVING. WAIT GATE WAIT ON THE GATE. EXIT ENTER THE PARKING. SIGNAL GATE FREE THE GATE. IN WHICH ORDER SHOULD THE SEMAPHORE BE FREED SIGNAL PARKING FREE A PARKING SPOT. DRIVE DRIVE AWAY. AC22005 6",
  "concur_tut_1-07": "OPERATING SYSTEMS SEMAPHORE S ON CAR PARK IV WHAT WOULD HAPPEN IF EXACTLY AT THE SAME TIME TWO CARS TRY TO PASS THE GATE MENTI 1. 2. 3. EVERYTHING WILL BE FINE, WE ARE NOW USING SEMAPHORES WE DON T REALLY KNOW FOR SURE ACTUALLY IT DEPENDS ON HOW SEMAPHORE THEMSELVES ARE IMPLEMENTED SEMAPHORES THEMSELVES ARE SHARED RESOURCES FOR WHICH ACCESS NEED TO BE PROTECTED TO ENSURE CORRECT OPERATION. THEY ARE USUALLY PROTECTED BY A MUTEX. AC22005 7",
  "concur_tut_1-08": "OPERATING SYSTEMS DINING PHILOSOPHERS PROBLEM I FIVE FORKS P2 OR CHOP-STICKS FIVE PLATES P3 P1 SPAGHETTI OR RICE NOODLES FIVE PHILOSOPHERS P4 P0 DEBATING THE ULTIMATE QUESTION OF LIFE, THE UNIVERSE, AND EVERYTHING WHAT ARE THE SHARED RESOURCES MENTI HOW MANY SEMAPHORES TYPE INITIALISATION MENTI AC22005 8",
  "concur_tut_1-09": "OPERATING SYSTEMS DINING PHILOSOPHERS ALGORITHM I FIVE SEMAPHORES CALLED FORK 0 .. FORK 4 ALL INITIALISED TO 1 PROCESS PHILOSOPHER I I IS AN INTEGER . FIVE SUCH PROCESSES CAN EXECUTE CONCURRENTLY, ONE FOR EACH PHILOSOPHER. REPEAT THINK THINK PROFOUND THOUGHTS. WAIT FORK I PICK UP THE LEFT-HAND FORK. WAIT FORK I 1 MOD 5 PICK UP THE RIGHT-HAND FORK. EAT EAT UNTIL STOMACH IS FULL. SIGNAL FORK I 1 MOD 5 LAY DOWN RIGHT-HAND FORK. SIGNAL FORK I LAY DOWN LEFT-HAND FORK. FOREVER ... AND DO IT ALL AGAIN. AC22005 IS THE PROBLEM SOLVED MENTI 9",
  "concur_tut_1-10": "OPERATING SYSTEMS DINING PHILOSOPHERS PROBLEM II THIS IS THE CLASSIC EXAMPLE FOR CHECKING TO SEE IF AN ALGORITHM CAN RESULT IN A DEADLOCK. FIVE PHILOSOPHERS, WITH FIVE PLATES AND FIVE FORKS. A PHILOSOPHER NEEDS TWO FORKS THE ONE ON HIS HER LEFT AND THE ONE ON HIS HER RIGHT IN ORDER TO EAT. WHAT MIGHT HAPPEN MENTI DEADLOCK... AND LITERAL STARVATION OCCURS IF EVERY PHILOSOPHER PICKS UP ONE FORK AND THEN WAITS INDEFINITELY FOR NEIGHBOUR TO RELEASE THE OTHER ONE. AC22005 10",
  "concur_tut_1-11": "OPERATING SYSTEMS DINING PHILOSOPHERS SOLUTION THE CODE ON THE PREVIOUS SLIDE CAN DEADLOCK. A SOLUTION IS TO ONLY ALLOW FOUR PHILOSOPHERS INTO THE DINING ROOM AT ANY ONE TIME. WHICH OTHER SHARED RESOURCE COULD BE PROTECTED THIS ENSURES THAT AT LEAST ONE PHILOSOPHER CAN PICK UP TO PROVIDE A CORRECT SOLUTION TWO FORKS, EAT AND THEN RELINQUISH BOTH FORKS, THUS ALLOWING A NEIGHBOUR TO EAT ALSO. THIS IS AN EXAMPLE OF RESOURCE ALLOCATION DENIAL, I.E. ONE PROCESS CAN ALWAYS COMPLETE. THE CODE ON FOLLOWING SLIDE WOULD NOT DEADLOCK. AC22005 11",
  "concur_tut_1-12": "OPERATING SYSTEMS DINING PHILOSOPHERS ALGORITHM II NEW SEMAPHORE CALLED ROOM, INITIALISED TO 4. PROCESS PHILOSOPHER I I IS AN INTEGER . FIVE SUCH PROCESSES. REPEAT THINK THINK PROFOUND THOUGHTS. WAIT ROOM ENTER THE DINING ROOM. WAIT FORK I PICK UP THE LEFT-HAND FORK. WAIT FORK I 1 MOD 5 PICK UP THE RIGHT-HAND FORK. EAT EAT UNTIL STOMACH IS FULL. SIGNAL FORK I 1 MOD 5 LAY DOWN RIGHT-HAND FORK. SIGNAL FORK I LAY DOWN LEFT-HAND FORK. SIGNAL ROOM LEAVE THE DINING ROOM. FOREVER ... AND DO IT ALL AGAIN. AC22005 12",
  "concur_tut_1-13": "OPERATING SYSTEMS FEEDING FRENZY TRY CHANGING THE NUMBERS OF PHILOSOPHERS AND FORKS, AND WORK OUT IF DEADLOCK CAN OCCUR FOR VARIOUS DIFFERENT COMBINATIONS. DOES IT MATTER IF SOME OF THE PHILOSOPHERS GET LOCKED PERMANENTLY OUT OF THE DINING ROOM WHAT WOULD HAPPEN IF THE FOOD SUPPLY STARTED TO FALL ALTHOUGH NOT TO ZERO COULD THIS CAUSE ANY PROBLEM WITH THE ABOVE CODE AC22005 13",
  "concur_tut_2-01": "OPERATING SYSTEMS CONCURRENCY PREVENTING DEADLOCKS D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE LECTURE BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "concur_tut_2-02": "OPERATING SYSTEMS DEADLOCK DETECTION THE PREVIOUS APPROACHES TRADE EFFICIENCY FOR THE GUARANTEE THAT DEADLOCK WILL NOT OCCUR. THIS APPROACH RELIES ON THE ASSUMPTION THAT DEADLOCKS DO NOT OCCUR VERY OFTEN AND SAYS DO AS YOU LIKE WE LL SORT THE PROBLEM OUT, IF IT OCCURS . THERE ARE MANY ALGORITHMS, BASED ON MATHEMATICAL GRAPH THEORY, FOR DETERMINING IF A DEADLOCK HAS OCCURRED. AC22005 2",
  "concur_tut_2-03": "OPERATING SYSTEMS BREAKING A DEADLOCK 1 FOUR POSSIBLE WAYS OF FREEING-UP THE LOG JAM 1. KILL ALL THE DEADLOCKED PROCESSES. THIS IS THE SIMPLEST WAY AND RADICAL YOU CAN THINK OF SIMPLE AND EASY TO IMPLEMENT BUT DRASTIC 2. IF CHECK-POINTING IS IMPLEMENTED, THEN FORCE ALL THE DEADLOCKED PROCESSES BACK TO THEIR LAST CHECK-POINTS AND RE-START THEM. HOPEFULLY RANDOM FACTORS WILL PREVENT THE DEADLOCK OCCURRING AGAIN. AC22005 3",
  "concur_tut_2-04": "OPERATING SYSTEMS BREAKING A DEADLOCK 2 3. KILL PROCESSES ONE AT A TIME AND RELEASES THEIR RESOURCES UNTIL THE DEADLOCK DISAPPEARS. 4. PRE-EMPT RESOURCES ONE PROCESS AT A TIME ANY IDEAS FOR RADICAL METHODS UNTIL THE DEADLOCK IS LESS BROKEN. ANY PROCESS THAT LOSES A RESOURCE HAS TO BE RESTARTED FROM A SUITABLE EARLIER POINT PREFERABLY A CHECK-POINT . THESE ACTIONS TAKE NO ACCOUNT OF THE POSSIBLE DAMAGE THAT MAY BE CAUSED, ALTHOUGH THEY MAY HEURISTICALLY TRY TO MINIMISE IT. AC22005 4",
  "concur_tut_2-05": "OPERATING SYSTEMS DEADLOCK AVOIDANCE ACHIEVED BY CONTROLLING THE ALLOCATION OF RESOURCES. A REQUEST FOR RESOURCES IS GRANTED ONLY IF THE SYSTEM KNOWS THAT THE REQUEST CANNOT LEAD TO DEADLOCK. TO IMPLEMENT SUCH A SCHEME THE OPERATING SYSTEM MUST KEEP TRACK OF WHAT RESOURCES HAVE BEEN ALLOCATED AND THE MAXIMUM REQUIREMENT EACH PROCESS HAS FOR EACH TYPE OF RESOURCE. AC22005 5",
  "concur_tut_2-06": "OPERATING SYSTEMS PROCESS INITIATION DENIAL A NEW PROCESS CAN START ONLY IF THE SUM OF ITS AND ALL CURRENTLY RUNNING PROCESSES MAXIMUM REQUIREMENTS IS LESS THAN OR EQUAL TO THE TOTAL AVAILABLE. THIS IS NOT OPTIMAL, SINCE IT ASSUMES THE WORST CASE SCENARIO, THAT ALL RUNNING PROCESSES WILL WANT ALL THEIR RESOURCES AT THE SAME TIME. AC22005 6",
  "concur_tut_2-07": "OPERATING SYSTEMS RESOURCE ALLOCATION DENIAL THIS IS A DYNAMIC PROCESS WHICH KICKS-IN EVERY TIME A PROCESS REQUESTS A RESOURCE, AND EVENTUALLY BLOCK THE ACCESS AND THE PROCESS . THE OPERATING SYSTEM KEEPS SUFFICIENT RESOURCES TO ENSURE THAT THERE IS AT LEAST ONE WAY IN WHICH ALL PROCESSES CAN COMPLETE A SAFE STATE . THIS IS NOT QUITE THE SAME AS KEEPING ENOUGH RESOURCES SO THAT ANY PROCESS CAN COMPLETE NEXT. AC22005 7",
  "concur_tut_2-08": "OPERATING SYSTEMS CHECKING FOR SAFE STATE RESERVE ENOUGH RESOURCES SO THAT ONE PROCESS CAN RECEIVE ALL IT REQUIRES. THIS PROCESS IS THUS GUARANTEED TO COMPLETE. IT WILL THEN RELEASE ALL OF ITS RESOURCES. THESE CAN THEN BE USED TO ALLOW ANOTHER PROCESS TO COMPLETE AND HENCE RELEASE ITS RESOURCES . REPEATED UNTIL ALL PROCESSES HAVE COMPLETED. AC22005 8",
  "concur_tut_2-09": "OPERATING SYSTEMS EXAMPLE OF SAFE STATE 1 CLAIM MATRIX TOTAL REQUIRED CURRENT STATE FUTURE STATE SAFE R1 R2 R3 P1 3 2 2 P2 6 1 3 P3 3 1 4 P4 4 2 2 R1 R2 R3 P1 3 2 2 P2 0 0 0 P3 3 1 4 P4 4 2 2 ALLOCATION MATRIX ALREADY GOT VECTOR P1 P2 P3 P4 1 6 2 0 0 1 1 0 0 2 1 2 P1 1 0 0 P2 P3 P4 0 2 0 0 1 0 0 1 2 AVAILABLE R1 R2 R3 0 1 1 R1 R2 R3 6 2 3 WHICH PROCESS SHOULD GET WHICH RESOURCE SO THAT IT CAN TERMINATE MENTI AC22005 9",
  "concur_tut_2-10": "OPERATING SYSTEMS EXAMPLE OF SAFE STATE 2 CLAIM MATRIX TOTAL REQUIRED R1 R2 R3 P1 0 0 0 P2 0 0 0 P3 3 1 4 P4 P1 4 R1 0 2 R2 0 2 R3 0 ALLOCATION MATRIX ALREADY GOT VECTOR P2 P3 P4 0 2 0 R1 7 0 1 0 R2 2 0 1 2 R3 3 R1 R2 R3 P1 0 0 0 P2 0 0 0 P3 0 0 0 P4 P1 4 R1 0 2 R2 0 2 R3 0 P2 0 0 0 P3 0 0 0 P4 0 0 2 R1 R2 R3 AVAILABLE 9 3 4 WHAT S NEXT AC22005 10",
  "concur_tut_2-11": "OPERATING SYSTEMS NON REUSABLE RESOURCES CLAIM MATRIX TOTAL REQUIRED CURRENT STATE NEW STATE P2 RUNS NEW STATE P1 RUNS ALLOCATION MATRIX ALREADY GOT VECTOR P1 P2 P3 P4 0 0 0 1 1 1 0 1 R1 R2 P1 1 3 P2 2 1 P3 0 3 P4 1 2 R1 R2 P1 1 3 P2 0 0 P3 0 3 P4 1 2 P1 0 1 P2 0 0 P3 0 0 R1 R2 P1 0 0 P2 0 0 P3 0 3 P4 1 2 P1 0 0 P2 0 0 P3 0 0 AVAILABLE R1 R2 5 1 P4 1 1 R1 R2 3 2 P4 1 1 R1 R2 2 3 R1 IS NOT RE-USABLE AC22005 11",
  "concur_tut_2-12": "OPERATING SYSTEMS INTEGRATED DEADLOCK STRATEGY NONE OF THE PREVIOUS STRATEGIES ARE PERFECT, SOME PERFORM BETTER IN CERTAIN SITUATIONS. NO STRATEGY CAN BE APPLIED EFFECTIVELY IN EVERY POSSIBLE SITUATION. TO GET THE BEST PERFORMANCE OUT OF AN OPERATING SYSTEM IT MAY BE NECESSARY TO USE A COMBINATION OF THESE TECHNIQUES. A CERTAIN ART TO GETTING THE MIX JUST RIGHT. AC22005 12",
  "C#-part1-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B C PART 1 - INTRODUCTION TO C DUNDEE.AC.UK PAGE 1",
  "C#-part1-02": "IN THIS VIDEO AN INTRODUCTION TO VISUAL STUDIO AN INTRODUCTION TO C DUNDEE.AC.UK PAGE 2",
  "C#-part1-03": "C PROGRAMMING WITH VISUAL STUDIO DUNDEE.AC.UK PAGE 3",
  "C#-part1-04": "C TWO MAIN ASPECTS NEW LANGUAGE TO LEARN BUT VERY SIMILAR TO ONES YOU HAVE ALREADY SEEN NEW PROGRAMMING ENVIRONMENT TO LEARN COMPLICATED BUT WE WON T BE USING ALL OF THE FEATURES SAME ENVIRONMENT AS OTHER MS LANGUAGES DUNDEE.AC.UK PAGE 4",
  "C#-part1-05": "IF LANGUAGES WERE CARS PROGRAMMING LANGUAGES ARE LIKE CARS THEY ALL WORK THE SAME WAY AND DO THE SAME THING, BUT THE DETAILS AND EXACT WAY OF DOING THINGS VARIES BETWEEN EXAMPLES. YOU ALREADY KNOW HOW TO DRIVE JAVA C C C IS QUITE SIMILAR TO THESE. DUNDEE.AC.UK PAGE 5",
  "C#-part1-06": "COMPILERS WE SAW IN AC21009 THAT THE GENERAL STRUCTURE OF A COMPILER IS SOURCE CODE IN INPUT FILE TEXT FILE INTERMEDIATE CODE SYMBOL TABLES OBJECT CODE IN OUTPUT FILEMACHINE CODE DUNDEE.AC.UK PAGE 6",
  "C#-part1-07": "COMMON LANGUAGE INFRASTRUCTURE THE CENTRAL CONCEPT OF THE CLI STANDARDISED 2003 IS TO USE THE SAME INTERMEDIATE CODE FOR MULTIPLE HIGH-LEVEL LANGUAGES. THIS CAN BE PART-COMPILED TO COMMON LANGUAGE RUNTIME LIKE A MACHINEINDEPENDENT MACHINE CODE WHICH CAN THEN BE FINALISED TO SPECIFIC MACHINE CODE FOR THE HOST MACHINE TO RUN. HTTP WWW.ISO.ORG ISO CATALOGUE DETAIL CSNUMBER 42927 DUNDEE.AC.UK PAGE 7",
  "C#-part1-08": "COMMON LANGUAGE INFRASTRUCTURE VB CODE C CODE JAVA CODE VB COMPILER C COMPILER JAVA COMPILER COMMON INTERMEDIATE LANGUAGE COMMON LANGUAGE RUNTIME COMMON LANGUAGE INFRASTRUCTU RE 1010010101001010100101011010 DUNDEE.AC.UK PAGE 8",
  "C#-part1-09": "COMMON LANGUAGE INFRASTRUCTURE THE CLI HAS STANDARD DATA TYPES FOR ALL SUPPORTED LANGUAGES USES LANGUAGE-INDEPENDENT METADATA, SO THAT MODULES CODED IN DIFFERENT LANGUAGES CAN BE COMBINED HAS A VIRTUAL EXECUTION SYSTEM, WHICH PRODUCES THE FINAL MACHINE CODE FOR THE HOST SYSTEM ALLOWS USE OF LANGUAGE-INDEPENDENT TOOLS THE BEST-KNOWN IMPLEMENTATION IS MICROSOFT S .NET DUNDEE.AC.UK PAGE 9",
  "C#-part1-10": "VISUAL STUDIO VISUAL STUDIO INCORPORATES THE CLI AND .NET LANGUAGES INTO ONE COMMON DEVELOPMENT INTERFACE FOR PROGRAMS, WEB PAGES, WEB APPS AND WEB SERVICES. FEATURES INCLUDE A SOPHISTICATED CODE EDITOR, DEBUGGER, CODE PROFILER, SOURCE CONTROL AND VARIOUS DESIGN TOOLS. LANGUAGES SUPPORTED INCLUDE C, C , C , VISUAL BASIC, JAVASCRIPT HTML, CSS, XML AND ASP DUNDEE.AC.UK PAGE 10",
  "C#-part1-11": "VISUAL STUDIO THE MOST RECENT VERSIONS INCLUDE PLUG-IN ADDITIONS SUCH AS PYTHON, RUBY, R AND NODE.JS SUPPORT FOR MOBILE DEVELOPMENT SUPPORT FOR DATABASE INTEGRATION VIA SQL SERVER THE AIM IS TO ALLOW THE DEVELOPMENT OF EVERYTHING WITHIN ONE INTEGRATED ENVIRONMENT DUNDEE.AC.UK PAGE 11",
  "C#-part1-12": "C C WAS DESIGNED SPECIFICALLY FOR THE CLI AS A GENERAL-PURPOSE OOP LANGUAGE, WITH FEATURES AND SYNTAX LARGELY DERIVED FROM C AND JAVA. IT IS REPLACING C FOR SOFTWARE DEVELOPMENT UNDER WINDOWS. THE STANDARD SPECIFIES FEATURES INCLUDING STRONG TYPE CHECKING ARRAY BOUNDS CHECKING DETECTION OF UNINITIALISED VARIABLES AUTOMATIC GARBAGE COLLECTION DUNDEE.AC.UK PAGE 12",
  "C#-part1-13": "PROCEDURAL VS. EVENT-DRIVEN THE C C PROGRAMS THAT YOU HAVE WRITTEN BEFORE WERE PROCEDURAL THERE WAS A MAIN PROGRAM WHICH RAN THROUGH, CALLING FUNCTIONS SUBROUTINES AS REQUIRED. C IS EVENT-DRIVEN DIFFERENT SUBROUTINES ARE RUN WHEN SPECIFIC EVENTS HAPPEN TO SPECIFIC OBJECTS E.G. BY A USER CLICKING A BUTTON. PROGRAM CODE IS THUS SIMILAR, BUT THE CODE STRUCTURE IS DIFFERENT AND IT IS ACCESSED IN A DIFFERENT WAY. DUNDEE.AC.UK PAGE 13",
  "C#-part1-14": "GENERAL PROGRAM FLOW OBJECTS LABELS, TEXT BOXES, BUTTONS ETC. ETC. ARE PLACED ONTO THE USER INTERFACE AT DESIGN TIME , AND THEIR INITIAL PROPERTIES ARE SET AS REQUIRED. IN RUN TIME, WHEN EVENTS HAPPEN E.G. THE USER TYPES SOME TEXT , THE PROGRAM ALTERS THE PROPERTIES OF SOME OBJECTS E.G. MAKES ANY MIS SPELT WORDS TURN RED , THEREBY GIVING FEEDBACK TO THE USER. LATER, WE CAN GET THE PROGRAM ITSELF DO THIS AT RUN TIME DUNDEE.AC.UK PAGE 14",
  "C#-part1-15": "VISUAL STUDIO VISUAL STUDIO IS MICROSOFT S INTEGRATED PROGRAMMING ENVIRONMENT, WHICH OFFERS STANDARD GUI FOR DEVELOPMENT OF A WIDE RANGE OF APPLICATION TYPES SUPPORT FOR SEVERAL LANGUAGES, INCLUDING VB AND C OTHERS CAN BE ADDED INTEGRATED DEBUGGER FLAGS ERRORS IN CODE, ALLOWS STEP-BY-STEP EXECUTION, BREAKPOINTS ETC. INTELLISENSE HELPS COMPLETE AND CHECK CODING MANY TOOLS - A FORM DESIGNER, PROPERTIES EDITOR, SOLUTION EXPLORER, ICON EDITOR ETC. DUNDEE.AC.UK PAGE 15",
  "C#-part1-16": "SUMMARY C IS AN EVENT-DRIVEN LANGUAGE, WITH MANY SIMILARITIES TO C AND JAVA VISUAL STUDIO IS A COMPLEX BUT POWERFUL PROGRAMMING ENVIRONMENT DUNDEE.AC.UK PAGE 16",
  "C#-part1-17": "IRMURRAY DUNDEE.AC.UK",
  "C#-part2-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B C PART 2 - GETTING STARTED WITH C DUNDEE.AC.UK PAGE 1",
  "C#-part2-02": "IN THIS VIDEO PROGRAMMING WITH C IN VISUAL STUDIO DUNDEE.AC.UK PAGE 2",
  "C#-part2-03": "ABOUT C C IS AN EVENT-DRIVEN LANGUAGE, WITH MANY SIMILARITIES TO C AND JAVA GUI OBJECT PROPERTIES CAN BE ALTERED MANUALLY AT DESIGN TIME TO SET THE INITIAL APPEARANCE BY CODE AT RUN TIME ONE WAY TO OUTPUT RESULTS FROM A PROGRAM DUNDEE.AC.UK PAGE 3",
  "C#-part2-04": "VISUAL STUDIO FILES VISUAL STUDIO SOURCE CODE MAY CONTAIN MANY COMPONENT PARTS, SO IT IS IMPORTANT THAT YOU KEEP THESE TOGETHER FOR EACH OF YOUR PROJECTS AND SUBMIT ALL OF THEM FOR ASSESSMENT CREATE A NEW FOLDER FOR EACH NEW PROJECT THE .SLN FILE IN THAT FOLDER IS THE MAIN PROJECT FILE GIVE IT A SENSIBLE NAME IN THE BIN SUBFOLDER IS THE COMPILED .EXE EXECUTABLE FILE ZIP THE WHOLE FOLDER FOR DUNDEE.AC.UK PAGE 4",
  "C#-part2-05": "DRAG-AND-DROP GUI THE CONVENTIONAL WAY TO BUILD A C APPLICATION IS TO DESIGN THE GUI ON PAPER DRAG-AND-DROP THE REQUIRED OBJECTS ONTO THE BASIC FORM WRITE THE INDIVIDUAL CODE HANDLERS FOR EACH ELEMENT NOTE THAT VS AUTOMATICALLY PROVIDES OUTLINE CODE STRUCTURE, WINDOWS FUNCTIONALITY ETC. ALSO ASSISTS WITH GUI LAYOUT AND CODE SYNTAX. DUNDEE.AC.UK PAGE 5",
  "C#-part2-06": "T N O D C I N A P VISUAL STUDIO LOOKS COMPLEX AS IT HAS A VAST HOST OF FEATURES, BUT WE WILL ONLY BE USING A SMALL SUBSET OF THESE IN THIS MODULE DUNDEE.AC.UK PAGE 6",
  "C#-part2-07": "SOPHISTICATION THE HISTORY OF EVERY MAJOR GALACTIC CIVILIZATION TENDS TO PASS THROUGH THREE DISTINCT AND RECOGNISABLE PHASES, THOSE OF SURVIVAL, INQUIRY AND SOPHISTICATION, OTHERWISE KNOWN AS THE HOW, WHY, AND WHERE PHASES. FOR INSTANCE, THE FIRST PHASE IS CHARACTERISED BY THE QUESTION HOW CAN WE EAT THE SECOND BY THE QUESTION WHY DO WE EAT AND THE THIRD BY THE QUESTION WHERE DUNDEE.AC.UK PAGE 8",
  "C#-part2-08": "SOPHISTICATION THE BASIC LOOK OF THE C GUI CAN EASILY BE ENHANCED FORMS RENAME THE FORM EVERY TIME BORDER WIDTH FIXED SIZE REMOVE CONTROL ICONS ADD CREATE A CUSTOM ICON DUNDEE.AC.UK PAGE 9",
  "C#-part2-09": "SOPHISTICATION OBJECTS OBJECTS NEARLY THE SAME SIZE SHOULD BE EXACTLY THE SAME SIZE OBJECTS NEARLY SQUARE SHOULD BE ACTUALLY SQUARE OBJECTS SHOULD LINE UP NEATLY VS HELPS USE OF GROUP BOXES CAN HELP BOTH VISUALLY AND FUNCTIONALLY USE APPROPRIATE FONTS, SIZES, TEXT COLOURS, FOREGROUND COLOURS ETC. DUNDEE.AC.UK PAGE 10",
  "C#-part2-10": "SOPHISTICATION CODE NAME OBJECTS APPROPRIATELY INCLUDE THE TYPE OF OBJECT AND ITS FUNCTION E.G. BTNEXIT AVOID RENAMING COMPONENTS LATER GETS MESSY NAME VARIABLES APPROPRIATELY ADD LOTS OF COMMENTS ESPECIALLY FOR UNUSUAL LINES OR TO INDICATE THE OVERALL FUNCTION OF WHOLE SECTIONS OF CODE AND ESPECIALLY AS CITATION FOR SMALL SECTIONS OF CODE TAKEN FROM ELSEWHERE DUNDEE.AC.UK PAGE 11",
  "C#-part2-11": "DUNDEE.AC.UK PAGE 12",
  "C#-part2-12": "SUMMARY WE CAN CREATE A PROGRAM USING DRAG-AND-DROP TO MAKE THE GUI WE THEN WRITE INDIVIDUAL EVENT HANDLERS FOR EACH OF THE GUI OBJECTS WE CAN EASILY MAKE THE PROGRAM LOOK PROFESSIONAL BY ALTERING THE OBJECT PROPERTIES DUNDEE.AC.UK PAGE 13",
  "C#-part2-13": "IRMURRAY DUNDEE.AC.UK",
  "CPU3-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES IMPROVING THE CPU PART 3 PIPELINING DUNDEE.AC.UK PAGE 1",
  "CPU3-02": "IN THIS VIDEO WHAT IS PIPELINING PROBLEMS WITH PIPELINING - DEPENDENCIES SOLUTIONS TO THESE PROBLEMS PREDICTION PENTIUM PIPELINING REFERENCES FOR THIS TOPIC STALLINGS, COMPUTER ORGANIZATION AND ARCHITECTURE 9TH ED. 2013 , PP. 517-534 DUNDEE.AC.UK PAGE 2",
  "CPU3-03": "CPU ENHANCEMENTS THE FETCH-EXECUTE CYCLE IS NOW SPEEDED UP, THANKS TO CACHES WE HAVE ADDED NEW MACHINE CODE INSTRUCTIONS WHICH GIVE US MORE COMPUTATIONAL POWER IN THE CPU HARDWARE WE HAVE ADDED MORE ADDRESSING MODES TO BETTER SUPPORT HIGH-LEVEL LANGUAGE STRUCTURES NOW WE CAN CONSIDER HOW WE CAN CHANGE THE INTERNAL ARCHITECTURE OF THE PROCESSOR TO IMPROVE ITS PERFORMANCE DUNDEE.AC.UK PAGE 3",
  "CPU3-04": "PIPELINING DUNDEE.AC.UK PAGE 4",
  "CPU3-05": "PIPELINING - THE CONCEPT CONVENTIONAL PIPELINE OIL OIL CONVENTIONAL PRODUCTION LINE 10110100101001010101 0 CPU PIPELINE DUNDEE.AC.UK 01110001010010100111 0001 PAGE 5",
  "CPU3-06": "PIPELINING - THE CONCEPT DUNDEE.AC.UK PAGE 6",
  "CPU3-07": "PIPELINING - THE CONCEPT THE CPU PIPELINE IS ACTUALLY SIMILAR IN CONCEPT TO AN INDUSTRIAL PRODUCTION LINE . THE CRUCIAL PROPERTY IS THAT THE PROCESS CONTAINS MULTIPLE OBJECTS AT DIFFERENT STAGES E.G. IF IT TAKES 24 HOURS TO BUILD A CAR, BUT PRODUCTION REQUIRES 12 STAGES OF 2 HOURS EACH, WE CAN BE BUILDING 12 CARS AT THE SAME TIME AND SO WE COMPLETE A CAR EVERY 2 HOURS A GAS OR OIL PIPELINE INVOLVES NO PROCESSING OF THE MATERIALS DUNDEE.AC.UK PAGE 7",
  "CPU3-08": "PIPELINING - THE CONCEPT WE CAN THUS DESIGN OUR PROCESSOR TO HAVE SEVERAL INSTRUCTIONS INSIDE THE PROCESSOR AT ONCE, EACH AT A DIFFERENT STAGE OF COMPLETION - THIS IS KNOWN AS CPU PIPELINING. AN INSTRUCTION ENTERS THE PIPELINE AT ITS START, AND MAKES ITS WAY THROUGH THE VARIOUS STAGES OF THE PIPELINE UNDERGOING PROCESSING ALONG THE WAY UNTIL IT IS COMPLETED. DUNDEE.AC.UK PAGE 8",
  "CPU3-09": "PIPELINING - THE CONCEPT NOTE THAT THE AMOUNT OF TIME TAKEN TO PROCESS ANY GIVEN INSTRUCTION IS ACTUALLY UNCHANGED FROM THE NO-PIPELINE CASE. HOWEVER, AS THE TIME BETWEEN INSTRUCTION COMPLETIONS IS SHORTER, THE APPARENT TIME IT TAKES FOR AN INSTRUCTION TO BE PROCESSED IS SUBSTANTIALLY REDUCED. THIS IS CALLED INSTRUCTION-LEVEL PARALLELISM. DUNDEE.AC.UK PAGE 9",
  "CPU3-10": "CYCLE STATE DIAGRAM ACCESSES MEMORY OR I O REGISTER WO OF IF MULTIPLE OPERAND S INTERNAL CPU OPERATION ID OC EX NEXT INSTRUCTION DUNDEE.AC.UK PAGE 10",
  "CPU3-11": "THE INSTRUCTION CYCLE STAGE 1 INSTRUCTION FETCH IF STAGE 2 INSTRUCTION DECODE ID STAGE 3 OPERAND CALCULATION OC STAGE 4 OPERAND FETCH OF STAGE 5 EXECUTE INSTRUCTION EX STAGE 6 WRITE OPERAND WO CPU INTERNAL OPERATION PARALLELISABLE MEMORY ACCESS VIA BUS OPERATION CAN T BE PARALLELISED DUNDEE.AC.UK PAGE 11",
  "CPU3-12": "NO PIPELINING TIME IF ID OC OF EX WO IF ID OC OF EX WO IF INSTRUCTIONS DUNDEE.AC.UK PAGE 12 ID",
  "CPU3-13": "WITH PIPELINING TIME IF ID OC OF EX WO IF ID OC OF EX IF ID OC OF EX WO IF ID OC OF EX IF ID OC OF EX IF INSTRUCTIONS SOMEWHAT SIMPLIFIED FOR ILLUSTRATION DUNDEE.AC.UK PAGE 13",
  "CPU3-14": "STAGES IF THE PIPELINE HAS N STAGES AND AN AVERAGE INSTRUCTION TAKES C CLOCK CYCLES TO COMPLETE, THEN AN INSTRUCTION WILL COMPLETE EVERY C N CLOCK CYCLES. C IS TYPICALLY FIXED, SO WE WANT N TO BE LARGE PENTIUM P5 N 5 PENTIUM II P6 N 10 PENTIUM III N 12 PENTIUM IV N 20 DUNDEE.AC.UK PAGE 14",
  "CPU3-15": "DEPENDENCIES AND STALLS SMOOTH FLOW THROUGH THE PIPELINE CAN BE DISRUPTED BY DEPENDENCIES, WHICH CAUSE STALLS IN THE INSTRUCTION EXECUTION. AT WORST, A STALL WILL CAUSE THE PIPELINE TO BE FLUSHED AND RESTARTED, BUT AVERAGE EFFICIENCY IS STILL BETTER THAN A NO-PIPELINE SITUATION. THERE ARE TWO TYPES OF DEPENDENCY DATA DEPENDENCY BRANCH DEPENDENCY DUNDEE.AC.UK PAGE 15",
  "CPU3-16": "DATA DEPENDENCY EXAMPLE MOVE A1 ,D1 LOAD MEMORY INTO D1 ADD D2,D1 D1 D2 D1 FOR CORRECT EXECUTION, THE SECOND INSTRUCTION CANNOT COMPLETE UNTIL THE FIRST INSTRUCTION HAS FINISHED USING REGISTER D1. THE ANALOGOUS SITUATION ON OUR CAR PRODUCTION LINE COULD BE THAT A PART CANNOT BE FITTED UNTIL THE PAINT ON IT IS DRY. DUNDEE.AC.UK PAGE 16",
  "CPU3-17": "DIAGRAM OF EXAMPLE TIME IF ID OC OF EX IF ID OC -- EX MOVE A1 ,D1 ADD D2,D1 A PIPELINE STALL DUNDEE.AC.UK PAGE 17",
  "CPU3-18": "WARNING BRANCH AHEAD DUNDEE.AC.UK PAGE 18",
  "CPU3-19": "BRANCHES A CONDITIONAL BRANCH INSTRUCTION CAN CHANGE THE ORDER IN WHICH THE INSTRUCTIONS ARE EXECUTED I.E. THE PROGRAM FLOW . NEXT INSTRUCTION THERE BEQ THERE REMEMBER THAT IN MACHINE CODE ALL BRANCHES ARE BINARY I.E. EITHER WE BRANCH PREVIOUS TO A NEW LOCATION OR WE JUST INSTRUCTION CARRY ON TO THE NEXTIF EQUAL TO JUST ONE OF BEQ BRANCH INSTRUCTION.MANY CONDITIONAL BRANCH INSTRUCTIONS DUNDEE.AC.UK PAGE 19",
  "CPU3-20": "BRANCHES E.G. AN IF CONSTRUCT IN A HIGH-LEVEL LANGUAGE WOULD BE IMPLEMENTED AS A CONDITIONAL BRANCH INSTRUCTION IN MACHINE CODE. HIGH-LEVEL CONSTRUCTIONS LIKE IF THEN ELSE OR CASE STATEMENTS APPEAR IN MACHINE CODE AS MULTIPLE BINARY BRANCHES. BUT CONDITIONAL BRANCHES CAUSE PROBLEMS FOR PUTTING INSTRUCTIONS INTO A PIPELINE THE CPU DOES NOT KNOW WHICH WAY IT IS GOING UNTIL THE BRANCH INSTRUCTION IS ACTUALLY EXECUTED - SO IT HAS TO GUESS WHICH BRANCH TO LOAD IN. DUNDEE.AC.UK PAGE 20",
  "CPU3-21": "BRANCH DEPENDENCY IF THE CPU GUESSES WRONGLY, THEN THE INCOMING INSTRUCTIONS WHICH IT HAS LOADED INTO THE PIPELINE BECOME IRRELEVANT. THE CPU WILL HAVE TO REFILL THE PIPELINE WITH THE INSTRUCTIONS FROM THE CORRECT PATH - THIS CAUSES A STALL I.E. NO OUTPUT FOR A TIME . THE ANALOGOUS SITUATION ON OUR CAR PRODUCTION LINE COULD BE THAT DIFFERENT MODELS ARE PRODUCED AND WE DON T KNOW WHICH FEATURES TO ADD UNTIL A SPECIFIC CAR IS ACTUALLY ORDERED. DUNDEE.AC.UK PAGE 21",
  "CPU3-22": "BRANCH DEPENDENCIES INST 1 INST 2 BRANCH TO INST 21 IF C 0 INST 3 INST 20 INST 21 AFTER INST 2 HAS BEEN INSERTED INTO THE PIPELINE, INST 3, INST 4 ETC. FOLLOW IT INTO THE PIPELINE, IN TURN. HOWEVER, WE MIGHT BRANCH TO INST 21. DUNDEE.AC.UK PAGE 22",
  "CPU3-23": "PIPELINE STALL DUE TO BRANCH TIME I1 IF I2 ID OC OF EX IF ID OC OF EX IF ID OC OF IF ID OC IF ID I3 I4 I5 I6 BRANCH INSTRUCTION IS EXECUTED BUT WRONG PATH EFFECT OF STALL IF IF I21 ID OC OF EX WO INSTRUCTIONS DUNDEE.AC.UK PAGE 23",
  "CPU3-24": "SOME SOLUTIONS BRANCH PREDICTION PRE-FETCH BRANCH TARGET MULTIPLE STREAMS LOOP BUFFER DELAYED BRANCH DUNDEE.AC.UK PAGE 24",
  "CPU3-25": "BRANCH PREDICTION MAKING PIPELINES WORK BETTER DUNDEE.AC.UK PAGE 25",
  "CPU3-26": "BRANCH PREDICTION BRANCH PREDICTION METHODS ATTEMPT TO PREDICT WHICH WAY A CONDITIONAL BRANCH WILL GO, TO IMPROVE THE GUESSES THAT THE CPU MAKES WHEN IT ENCOUNTERS A CONDITIONAL BRANCH. METHODS CAN BE STATIC UNCHANGING , OR DYNAMIC VARYING WITH ACTUAL PROGRAM EXECUTION DUNDEE.AC.UK PAGE 26",
  "CPU3-27": "STATIC METHODS STATIC METHODS PREDICT DEPENDING ON THE PARTICULAR OPCODE OF THE BRANCH INSTRUCTION ENCOUNTERED THAT THE BRANCH WILL EITHER BE NEVER TAKEN, OR ALWAYS TAKEN IT HAS BEEN CLAIMED THAT THE LATTER METHOD CAN ACHIEVE SUCCESS RATES OF GREATER THAN 75 FOR I 1 TO 100 DO THIS NEXT I THE BRANCH INDICATED WILL BE TAKEN THE FIRST 99 TIMES DUNDEE.AC.UK PAGE 27",
  "CPU3-28": "DYNAMIC METHODS WHEN A CONDITIONAL BRANCH IS ENCOUNTERED, DYNAMIC METHODS TRY TO PREDICT ON THE FLY WHETHER TO BRANCH THIS TIME OR NOT. PREDICTIONS ARE BASED ON THE RECENT HISTORY OF THIS PARTICULAR BRANCH INSTRUCTION. THIS REQUIRES THE CPU TO RECORD THE HISTORY OF ACTIVITY FOR EACH CONDITIONAL BRANCH IT ENCOUNTERS DURING PROGRAM DUNDEE.AC.UK PAGE 28",
  "CPU3-29": "PENTIUM BRANCH PREDICTION THE PENTIUM USES A DYNAMIC BRANCH PREDICTION STRATEGY BASED ON A BRANCH TARGET BUFFER YET ANOTHER CACHE MEMORY WHICH RECORDS THE EXECUTION OF BRANCH INSTRUCTIONS AS THEY OCCUR PENTIUM BTB IS 4 WAY WITH 256 SETS AND A 2 BIT HISTORY FIELD PENTIUM II BTB IS 4 WAY WITH 512 SETS AND A 4 BIT HISTORY FIELD REMEMBER A CACHE IS USED TO INCREASE SPEED BY STORING RECENTLY-USED STUFF THAT WE WILL LIKELY NEED AGAIN SOON . A MAIN MEMORY CACHE STORES A COPY OF THE DATA WHICH IS LOCATED AT THE ADDRESS ENCOUNTERED, WHILE THE BTB STORES THE DESTINATION ADDRESS OF THE BRANCH INSTRUCTION WHICH IS LOCATED AT THE ADDRESS ENCOUNTERED NOT DATA DUNDEE.AC.UK PAGE 29",
  "CPU3-30": "PENTIUM BRANCH TARGET BUFFER WAY 0 SE T TAG DEST ADDR HI ST WAY 2 WAY 1 LR U TAG DEST ADDR HI ST LR U TAG DEST ADDR HI ST WAY 3 LR U TAG DEST ADDR HI ST LR U 0 0 S0 1 0 2 0 3 2 2 24 32 2 2 24 32 2 2 24 32 2 2 F 24 32 D REMEMBER LAYOUT LOOKS LIKE A MEMORY CACHE, BUT THE PAYLOAD HERE IS F THE DESTINATION ADDRESS OF A BRANCH INSTRUCTION NOT DATA E DUNDEE.AC.UK F PAGE 30",
  "CPU3-31": "PENTIUM ARCHITECTURE SIMPLIFIED MAIN MEMOR Y BUS INTERFACE 8 KBYTE INSTRUCTION CACHE BRANCH PREDICTOR PREFETCH BUFFERS BTB U 5STAGE PIPE LINE V 5STAGE PIPE LINE FPU PIPE LINE REGISTERS 8 KBYTE DATA CACHE DUNDEE.AC.UK PAGE 31",
  "CPU3-32": "ENTRIES IN THE BTB THE TAG IS A PORTION OF THE BRANCH INSTRUCTION S ADDRESS IN MAIN MEMORY NO BYTE THIS TIME . THE BRANCH DESTINATION ADDRESS IS THE ADDRESS THAT THE PROCESSOR WILL BRANCH TO IF THE BRANCH IS TAKEN NB. THE BTB DOES NOT STORE DATA JUST THE ADDRESSES OF BRANCH DESTINATIONS . THE HISTORY BITS ARE TWO BITS WHICH RECORD THE RECENT HISTORY OF WHAT HAPPENED WHEN THIS INSTRUCTION WAS PREVIOUSLY ENCOUNTERED BY THE CPU. BECAUSE THE PAYLOAD IS A SINGLE MEMORY ADDRESS, NOT BYTES OF DATA DUNDEE.AC.UK PAGE 32",
  "CPU3-33": "ENTRIES IN THE BTB CONT. WHEN A BRANCH INSTRUCTION IS ACTUALLY TAKEN FOR THE FIRST TIME , IT IS WRITTEN INTO THE BTB CACHE AND THE HISTORY BITS ARE SET TO 11. WHEN THE INSTRUCTION IS RE-ENCOUNTERED, THE PREDICTION WILL BE TAKEN IF HISTORY 0, OTHERWISE NOT TAKEN THEN, BASED ON THE ACTUAL OUTCOME IF TAKEN, BITS WILL BE INCREMENTED MAX 11 IF NOT TAKEN, THE BITS WILL BE DECREMENTED MIN 00 DUNDEE.AC.UK PAGE 33",
  "CPU3-34": "BTB LIMITATIONS CONSIDER THIS SECTION OF PSEUDO CODE FOR I 1 TO 100 IF I IS EVEN THEN DO THIS ELSE DO THIS NEXT I AS THE BRANCH INDICATED WILL BE TAKEN EVERY OTHER TIME, IT WILL ALWAYS BE PREDICTED WRONGLY DUNDEE.AC.UK PAGE 34",
  "CPU3-35": "PENTIUM II BRANCH PREDICTION THE PENTIUM II STORES 4 HISTORY BITS FOR EACH BRANCH REPRESENTING THE LAST FOUR USES . IT USES THIS AS A POINTER TO ONE OF 16 2-BIT COUNTERS, AND FROM THAT, IT MAKES THE PREDICTION. THIS IS VERY POWERFUL AND ALLOWS THE CPU TO PREDICT TAKEN NOT TAKEN SEQUENCES UP TO LENGTH 5, AND IT IS ALSO VERY GOOD AT HANDLING SLIGHT DEVIATIONS FROM A PATTERN ALREADY LEARNT. DUNDEE.AC.UK PAGE 35",
  "CPU3-36": "HOW IS THE BTB USED WHEN A CONDITIONAL BRANCH INSTRUCTION IS FETCHED AND APPEARS IN THE INSTRUCTION DECODER, THE ID PASSES ITS MEMORY ADDRESS TO THE BTB, WHICH MAKES A PREDICTION OF WHETHER THE BRANCH WILL BE TAKEN OR NOT. THE BTB SUPPLIES THE PREDICTED BRANCH DESTINATION ADDRESS PREDICTED TARGET ADDRESS TO THE INSTRUCTION PRE-FETCHER, FROM WHERE THE NEXT INSTRUCTION FETCH WILL BE MADE. DUNDEE.AC.UK PAGE 36",
  "CPU3-37": "STALLS DUE TO BRANCHES HOWEVER, IT WILL NOT BE KNOWN WHETHER THE PREDICTION IS CORRECT OR NOT UNTIL THE BRANCH INSTRUCTION HAS PROGRESSED DOWN THE PIPELINE AND ACTUALLY BEEN EXECUTED. IF THE PREDICTION TURNS OUT TO BE WRONG, THE PIPELINE IS FLUSHED, AND THE CPU FETCHES THE CORRECT TARGET INSTRUCTION - A 3- OR 4-CYCLE STALL CAN BE CAUSED BY INCORRECT PREDICTION. DUNDEE.AC.UK PAGE 37",
  "CPU3-38": "THE END OF THE PIPE LINE AS AVERAGE INSTRUCTION TIME IS C N, WE WANT C SMALL IDEALLY 1 - EACH STAGE COMPLETED IN A SINGLE CLOCK CYCLE AND N LARGE - IN THE P4, C 20 AND N 20, SO WE SHOULD HAVE A THROUGHPUT OF ONE INSTRUCTION COMPLETED PER CLOCK CYCLE BUT THERE IS A POSSIBILITY OF A STALL AT EACH STAGE, SO AS N GROWS, THE PROBABILITY OF A STALL OCCURRING ESCALATES BUT HOW OFTEN DO WE ENCOUNTER CONDITIONAL BRANCHES DUNDEE.AC.UK PAGE 38",
  "CPU3-39": "HAVE WE REACHED THE LIMIT AS CODE ON AVERAGE HAS ONLY FIVE INSTRUCTIONS BETWEEN BRANCHES, THE PIPELINE EFFICIENCY BECOMES CRITICALLY DEPENDENT ON GOOD BRANCH PREDICTION. ALTHOUGH THE P4 HAS MORE STAGES THAN THE P3, THE INCREASED LIKELIHOOD OF STALLS MEANS THAT OVERALL PERFORMANCE IS NOT MUCH BETTER. THE P4 HAS 4 TIMES AS MANY TRANSISTORS AS P3 3 TIMES THE POWER OF P3 BUT TYPICALLY DOES FEWER INSTRUCTIONS PER CLOCK CYCLE DUNDEE.AC.UK LIMITS ON MULTIPLE INSTRUCTION ISSUE , M. D. SMITH, M. JOHNSON, M. A. HOROWITZ, IN INSTRUCTION-LEVEL PARALLEL PROCESSORS, IEEE COMPUTER SOCIETY PRESS, 1995, PP. 408-420 PAGE 39",
  "CPU3-40": "THE END CURRENT THINKING IS THAT PIPELINE ARCHITECTURE IS AS SOPHISTICATED AS IT CAN EVER GET INSTRUCTION LEVEL PARALLELISM HAS STALLED SO WHAT DOES THE FUTURE HOLD DUNDEE.AC.UK PAGE 40",
  "CPU3-41": "SUMMARY WE HAVE SEEN INSTRUCTION PIPELINES INSTRUCTION-LEVEL PARALLELISM FOR INCREASED THROUGHPUT PIPELINE STALLS MUST BE MINIMISED FOR MAXIMUM THROUGHPUT BRANCH TARGET BUFFERS ARE USED TO REDUCE STALLS AND HENCE MAINTAIN THROUGHPUT NEXT MORE ON THE CPU THE LAST ONE DUNDEE.AC.UK PAGE 41",
  "CPU3-42": "DUNDEE.AC.UK",
  "CPU4-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES IMPROVING THE CPU PART 4 SUPER-SCALAR ARCHITECTURE AND OTHER ISSUES DUNDEE.AC.UK PAGE 1",
  "CPU4-02": "IN THIS VIDEO SUPER-SCALAR ARCHITECTURE OTHER PROCESSOR DEVELOPMENTS REFERENCES FOR THIS TOPIC STALLINGS, COMPUTER ORGANIZATION AND ARCHITECTURE 9TH ED. 2013 , PP. 596-617 DUNDEE.AC.UK PAGE 2",
  "CPU4-03": "REVISION - PIPELINING PIPELINING IS AN ARCHITECTURAL DEVELOPMENT, WHICH IMPROVES THROUGHPUT VIA INSTRUCTIONLEVEL PARALLELISM - PROCESSING INSTRUCTIONS ON A PRODUCTION LINE INSIDE THE CPU TO DELIVER COMPLETED INSTRUCTIONS MORE QUICKLY. PIPELINING IS INTERNAL TO THE CPU, AND THE USER PROGRAMMER OPERATING SYSTEM DO NOT NEED TO DO ANYTHING DIFFERENTLY DEPENDING ON WHETHER PIPELINING IS USED OR NOT. BRANCH TARGET BUFFERS HELP MINIMISE PIPELINE STALLS DUE TO BRANCH DEPENDENCIES. DUNDEE.AC.UK PAGE 3",
  "CPU4-04": "THE END AS WE HAVE BROKEN DOWN THE PIPELINE INTO AS MANY STAGES AS WE CAN, PIPELINE ARCHITECTURE IS PROBABLY AS SOPHISTICATED AS IT CAN EVER GET - INSTRUCTION-LEVEL PARALLELISM ITSELF HAS STALLED SO WHAT ELSE CAN WE DO DUNDEE.AC.UK PAGE 4",
  "CPU4-05": "SUPER-SCALAR ARCHITECTURE DUNDEE.AC.UK PAGE 5",
  "CPU4-06": "SUPER-SCALAR ARCHITECTURE CONCEPT TO INCREASE CPU SPEED, WE CAN SIMPLY DUPLICATE HARDWARE COMPONENTS THIS IS CALLED SUPER-SCALAR ARCHITECTURE DUPLICATE PIPELINES WITHIN THE CPU CORE AND OR DUPLICATE WHOLE CPU CORES ON THE CHIP AND OR USE MULTIPLE CPUS INSIDE THE SAME COMPUTER WE THEN ACHIEVE GREATER THROUGHPUT BY UTILISING THESE COMPONENTS IN PARALLEL, EACH WORKING ON THEIR OWN INSTRUCTION SEQUENCE DUNDEE.AC.UK PAGE 6",
  "CPU4-07": "SUPER-SCALAR ARCHITECTURE CONCEPT BASIC CPU TRANSISTORS MADE SMALLER, SO NOW ROOM FOR 2 CORES ADDITIONAL SPACE AVAILABLE FOR L3 CACHE DUNDEE.AC.UK PAGE 7",
  "CPU4-08": "SUPER-SCALAR ARCHITECTURE THE PENTIUM HAS TWO INTEGER PIPELINES, CALLED U AND V. EACH PIPELINE HAS ITS OWN ALU, ALLOWING THEM TO OPERATE IN PARALLEL. THE PENTIUM PERFORMS ALMOST TWICE AS FAST AS THE 80486 ON INTEGER INSTRUCTIONS - THE TWO CPUS HAVE SIMILAR, FIVE-STAGE INTEGER PIPELINES BUT THE PENTIUM HAS TWO OF THEM . A FLOATING-POINT PIPELINE IS ALSO INCLUDED TO HANDLE FLOATING-POINT CALCULATIONS. DUNDEE.AC.UK PAGE 8",
  "CPU4-09": "PENTIUM ARCHITECTURE DUNDEE.AC.UK PAGE 9",
  "CPU4-10": "PENTIUM INTEGER PIPELINE FIVE STAGES IN A PENTIUM INTEGER PIPELINE ARE PRE-FETCH INSTRUCTION DECODE STAGE 1 IDENTIFIES OP-CODE AND EXTRACTS ADDRESSING INFORMATION ALSO PERFORMS BRANCH PREDICTION, CHECKS INSTRUCTION PAIRING FOR THE PIPELINES DECODE STAGE 2 CALCULATES MEMORY ADDRESS EFFECTIVE ADDRESSES EXECUTE DUNDEE.AC.UK PAGE 10",
  "CPU4-11": "PENTIUM INSTRUCTION PAIRING RULES GOVERN WHETHER OR NOT TWO INSTRUCTIONS CAN BE FED INTO THE TWO PIPELINES AT THE SAME TIME HANDLED BY THE PRE-FETCHER THERE MUST BE NO DATA DEPENDENCIES BETWEEN THE TWO INSTRUCTIONS U CAN HANDLE ANY INSTRUCTION V INSTRUCTION MUST BE SIMPLE TYPICALLY DATA MOVE, ADD, SUBTRACT, INCREMENT, DECREMENT, BOOLEAN INSTRUCTIONS ETC. THERE ARE CERTAIN OTHER MORE COMPLICATED RESTRICTIONS, WHICH REDUCE STALLING. DUNDEE.AC.UK PAGE 11",
  "CPU4-12": "PENTIUM INSTRUCTION PAIRING A PAIRING CHECK IS PERFORMED BY THE FIRST STAGE OF THE INSTRUCTION DECODING TO SEE IF TWO INSTRUCTIONS FROM THE PROGRAM CAN BE ALLOWED TO ENTER THE PIPELINES SIMULTANEOUSLY. THE USE OF PAIRING ATTEMPTS TO REDUCE THE NUMBER OF STALLS THAT WOULD OTHERWISE OCCUR. DUNDEE.AC.UK PAGE 12",
  "CPU4-13": "MULTI-CORE THE SUPER-SCALAR CONCEPT INCLUDES DUPLICATING ENTIRE PROCESSOR CORES WITHIN THE SAME CPU PENTIUM D 2005 - TWO PENTIUM 4 CORES CORE DUO 2006 - TWO PENTIUM M CORES CORE 2 DUO 2006 - TWO CORE DUO CORES CORE I7 2011 - 2, 4 OR 6 CORES SUN ULTRASPARC T1 2005 - 4, 6 OR 8 CORES, EACH CAN HANDLE 4 THREADS DUNDEE.AC.UK PAGE 13",
  "CPU4-14": "INTEL CORE I7 DUNDEE.AC.UK PAGE 14",
  "CPU4-15": "MULTI-CPU THIS TREND CAN CONTINUE EXTERNALLY, WITH MULTIPLE CPUS FITTED TO MOTHERBOARDS. ALL ACHIEVE GREATER THROUGHPUT BY INCREASING THE VOLUME OF PROCESSING CHANNELS AVAILABLE. MODERN OPERATING SYSTEMS ALREADY RUN MULTIPLE CONCURRENT PROCESSES THREADS BUT NOW THE SCHEDULING ALGORITHM HAS MORE PROCESSOR RESOURCES TO CALL ON. DUNDEE.AC.UK PAGE 15",
  "CPU4-16": "SIMULTANEOUS MULTI-THREADING CPUS CAN ALSO RUN MULTIPLE THREADS INTERNALLY I.E. CREATE TWO VIRTUAL CORES WITHIN ONE REAL CORE, WHICH CAN BE PROCESSING INSTRUCTIONS FROM TWO SEPARATE THREADS AT THE SAME TIME. THIS IN THEORY INCREASES EFFICIENCY AS THERE WILL BE NO DATA DEPENDENCIES BETWEEN THREADS, SO FEWER STALLS. THE REPORTED SPEED AND POWER CONSUMPTION BENEFITS OF SMT ARE VARIABLE. INTEL S VERSION IS CALLED HYPER-THREADING HT DUNDEE.AC.UK PAGE 16",
  "CPU4-17": "MEET THE FAMILY MARKETING FIRST RELEASE NAME MICROARCHITECTURE LITHOGRAPHY 1993 PENTIUM P5 0.8-0.35 M 1993 PENTIUM MMX P5 0.35-0.25 M 1995 PENTIUM PRO P6 0.5-0.35 M 1996 PENTIUM II P6 0.35-0.25 M 1999 PENTIUM III P6 0.25-0.18 M 2000 PENTIUM IV NETBURST 180-65NM 2003 PENTIUM M P6 90-65NM 2005 PENTIUM D NETBURST 90-65NM 2007 PENTIUM DUAL YONAH 65-45NM 2008 CORE NEHALEM 32NM 2011 CORE SANDY BRIDGE 32NM 2015 CORE SKYLAKE 14NM 2019 CORE ICE LAKE 10NM ORIGINALLY, THERE WAS ONE CPU AVAILABLE AT A TIME NOW THERE ARE MANY VARIANTS ON EACH MODEL, WITH A RANGE OF CAPABILITIES PRICES. CELERON CHEAP , XEON SERVER , CORE POWER DUNDEE.AC.UK PAGE 17",
  "CPU4-18": "MEET THE FAMILY MARKETING FIRST RELEASE NAME MICROARCHITECTURE LITHOGRAPHY 1993 PENTIUM P5 0.8-0.35 M 1993 PENTIUM MMX P5 0.35-0.25 M 1995 PENTIUM PRO P6 0.5-0.35 M 1996 PENTIUM II P6 0.35-0.25 M 1999 PENTIUM III P6 0.25-0.18 M 2000 PENTIUM IV NETBURST 180-65NM 2003 PENTIUM M P6 90-65NM 2005 PENTIUM D NETBURST 90-65NM 2007 PENTIUM DUAL YONAH 65-45NM 2008 CORE NEHALEM 32NM 2011 CORE SANDY BRIDGE 32NM 2015 CORE SKYLAKE 14NM 2019 CORE ICE LAKE 10NM ORIGINALLY, THERE WAS ONE CPU AVAILABLE AT A TIME NOW THERE ARE MANY VARIANTS ON EACH MODEL, WITH A RANGE OF CAPABILITIES PRICES. CELERON CHEAP , XEON SERVER , CORE POWER DUNDEE.AC.UK PAGE 18",
  "CPU4-19": "DUNDEE.AC.UK PAGE 19",
  "CPU4-20": "HOWEVER THE POWER INCREASE DELIVERED BY MORE PROCESSORS OR CORES IS NOT LINEAR NOT EVERYTHING IS PARALLELISABLE THERE IS AN OVERHEAD BOTH OS AND PROCESSOR IN MANAGING THE MULTIPLE THREADS THINK OF A TEAM COURSEWORK THERE IS AN OVERHEAD IN SETTING UP HOLDING THE DISCUSSIONS, SPLITTING UP THE TASK AND RECOMBINING INDIVIDUAL RESULTS BUT YOU CAN GET MORE WORK DONE IN TOTAL THAN BY WORKING ALONE. DUNDEE.AC.UK PAGE 20",
  "CPU4-21": "ANOTHER REASON FOR MULTI-CORE DUNDEE.AC.UK PAGE 21",
  "CPU4-22": "MELTDOWN EACH TRANSISTOR SWITCHING USES ENERGY. CPU POWER CONSUMPTION IS PROPORTIONAL TO OF TRANSISTORS X CLOCK FREQUENCY X VOLTAGE2 OVER TIME, WE HAVE BEEN INCREASING THE TRANSISTOR COUNT AND CLOCK FREQUENCY, HENCE POWER CONSUMPTION HAS ALSO BEEN GROWING. HOWEVER - SILICON CHIPS HAVE REMAINED ABOUT THE SAME SIZE, SO WE NOW HAVE MUCH MORE HEAT GENERATED PER UNIT AREA - HEAT DISSIPATION IS NOW BECOMING CRITICAL DUNDEE.AC.UK PAGE 22",
  "CPU4-23": "POWER - EXAMPLES PENTIUM, 75MHZ 8W PENTIUM II, 266MHZ 17W PENTIUM III, 550MHZ 40W PENTIUM IV, 1.8GHZ 67W PENTIUM D, 3GHZ 95W CORE 2 DUO, 3GHZ 35W AS ALL OF THESE CHIPS ARE ROUGHLY THE SAME SIZE, THE POWER DISSIPATED PER UNIT AREA IS CLEARLY INCREASING XEON PHI 7290, 72 CORES, 1.5GHZ 245W DUNDEE.AC.UK PAGE 23",
  "CPU4-24": "GOING GREEN - POWER THERE ARE SEVERAL STRATEGIES WHICH THE CPU CAN USE TO REDUCE ITS POWER CONSUMPTION RUN AT REDUCED VOLTAGE PREFERABLY DYNAMIC RUN AT REDUCED CLOCK SPEED PREFERABLY DYNAMIC TURN OFF PARTS OF THE CPU NOT BEING USED COMPILER OPTIMISATIONS MOST CURRENT CPUS HAVE A BUILT-IN THERMOMETER, AND CAN AUTOMATICALLY LIMIT THEIR FUNCTIONALITY IF THEY ARE STARTING TO OVERHEAT. DUNDEE.AC.UK PAGE 24",
  "CPU4-25": "KEEP AN EYE ON IT PART OF WINDOWS INSTALLER IS ON MYDUNDEE DUNDEE.AC.UK PAGE 25",
  "CPU4-26": "GOING GREEN FABRICATION DISPOSAL THE FABRICATION PROCESSES INVOLVED IN MAKING SILICON CHIPS ALSO INVOLVE SOME EXOTIC CHEMICALS, AND MANUFACTURERS ARE LOOKING AT REDUCING THE ENVIRONMENTAL IMPACT. WITH SO MANY ELECTRONIC DEVICES IN USE, THERE IS ALSO A HUGE AMOUNT OF WASTE ELECTRONIC HARDWARE BEING CREATED, AND THE ENVIRONMENTAL IMPACT OF THIS IS ALSO OF CONCERN. WWW.GREEN-COMPUTE.COM DUNDEE.AC.UK PAGE 26",
  "CPU4-27": "THE FUTURE DUNDEE.AC.UK PAGE 27",
  "CPU4-28": "THREAD-LEVEL PARALLELISM CURRENT THINKING IS LOOKING TO THREAD-LEVEL PARALLELISM TO KEEP PARALLELISM IMPROVING. THREADS ARE INDEPENDENT CODE SEQUENCES, SO WE CAN RUN THREADS IN PARALLEL ON DIFFERENT PROCESSORS. ONUS IS NOW ON THE PROGRAMMER OR THEIR COMPILER TO CODE PROCESSES AS PARALLEL THREADS WHICH THE PROCESSOR CAN COMPUTE IN PARALLEL , RATHER THAN AS A SINGLE THREAD. ALL OF THIS WILL BE SUPPORTED BY THE INCREASING NUMBER OF CORES PROCESSORS IN OUR COMPUTERS. DUNDEE.AC.UK PAGE 28",
  "CPU4-29": "THREAD PROCESSING 1980 C 1, T 1 EASY 1990 C 1, T 1 - NEED CPU SCHEDULING 2019 1 C 4, T 1 - NEED CPU SCHEDULING 2025 C T, T 1 - ONE CORE PER THREAD 2030 C T, T 1 - IDEAL DUNDEE.AC.UK PAGE 29",
  "CPU4-30": "MASSIVELY MULTI-CORE MEGACORE BUT IF C BECOMES VERY LARGE, THEN THINGS WILL BREAK DOWN HOW DO WE PARALLELISE A PROGRAM EFFICIENTLY HOW DO THE DIFFERENT CPUS COMMUNICATE WHAT ABOUT CACHE COHERENCE LIKELY SOLUTION IS TO FORGET THE SINGLE MAIN MEMORY MODEL - EACH CPU NEEDS ITS OWN MEMORY, THEN COMMUNICATION BETWEEN CPUS IMPORTANT EFFICIENT THREAD HANDLING BECOMES KEY DUNDEE.AC.UK PAGE 30",
  "CPU4-31": "IT CAN BE DONE SUNWAY TAIHULIGHT ANNOUNCED NOV 2017 WAS THE WORLD S MOST POWERFUL COMPUTER 40,960 64-BIT RISC PROCESSORS EACH PROCESSOR HAS 256 CORES PLUS 4 EXTRA CORES FOR SYSTEM MANAGEMENT 10,649,600 CPU CORES IN WHOLE SYSTEM 1.3PB MEMORY, 20PB STORAGE, 15MW DUNDEE.AC.UK PAGE 31",
  "CPU4-32": "IT CAN BE DONE SUMMIT BUILT BY IBM FOR THE U.S. DEPARTMENT OF ENERGY S OAK RIDGE NATIONAL LABORATORY IN 2018 IS THE WORLD S MOST POWERFUL COMPUTER 9,216 64-BIT 22-CORE PROCESSORS COUPLED WITH 27,648 NVIDIA TESLA GPUS 2.76PB MEMORY, 250PB STORAGE, 13MW DUNDEE.AC.UK PAGE 32",
  "CPU4-33": "IT CAN BE DONE SUMMIT BUILT BY IBM FOR THE U.S. DEPARTMENT OF ENERGY S OAK RIDGE NATIONAL LABORATORY IN 2018 IS THE WORLD S MOST POWERFUL COMPUTER 9,216 64-BIT 22-CORE PROCESSORS COUPLED WITH 27,648 NVIDIA TESLA GPUS 2.76PB MEMORY, 250PB STORAGE, 13MW DUNDEE.AC.UK PAGE 33",
  "CPU4-34": "OTHER FUTURES DUNDEE.AC.UK PAGE 34",
  "CPU4-35": "THE TRANSPUTER IN THE 1980S, THE TRANSPUTER WAS SEEN AS THE NEXT BIG THING IT COMPRISED A CPU, MEMORY AND COMMUNICATION HARDWARE ON ONE CHIP. IT ALLOWED HARDWARE TO BE INFINITELY SCALABLE IN THEORY JUST DOUBLE THE NUMBER OF TRANSPUTERS TO DO THE JOB IN HALF THE TIME. THE TRANSPUTER DID NOT CATCH ON, THOUGH SOME OF THE IDEAS IN THE TRANSPUTER HAVE APPEARED IN OTHER PROCESSORS. DUNDEE.AC.UK PAGE 35",
  "CPU4-36": "MICROCONTROLLERS WITH THE DEMAND FOR UBIQUITOUS COMPUTING , WE WANT SMALL, CHEAP, LOW POWER COMPUTERS. MICROCONTROLLERS HAVE A CPU, SOME MEMORY AND I O CIRCUITRY TOGETHER ON ONE CHIP. ARDUINO DUNDEE.AC.UK CHIP 9 PAGE 36",
  "CPU4-37": "MIPS MIPS ARCHITECTURE IS A FULLY-RISC PROCESSOR ARCHITECTURE WHICH OFFERS GREAT FLEXIBILITY. MIPS HAS AN UNUSUAL BUSINESS MODEL THEY DO NOT MANUFACTURE PROCESSORS, BUT LICENCE THEIR ARCHITECTURE TO CHIP MANUFACTURERS. THIS GIVES THEM GREATER DESIGN FLEXIBILITY. DUNDEE.AC.UK PAGE 37",
  "CPU4-38": "FPGA THE FIELD-PROGRAMMABLE GATE ARRAY IS RATHER LIKE A WRITEABLE SILICON CHIP. ANY LOGIC DEVICE CAN BE BUILT AND TESTED ON A COMPUTER , AND THEN BURNT TO A FPGA. THIS ALLOWS CHEAP AND QUICK PRODUCTION OF SMALL RUNS OF CUSTOM-MADE CHIPS EVEN WHOLE CPUS. DUNDEE.AC.UK PAGE 38",
  "CPU4-39": "MORE ON MULTI-CORE INSERT 2 K R O W E S R U O C HERE DUNDEE.AC.UK PAGE 39",
  "CPU4-40": "SUMMARY WE HAVE SEEN SUPERSCALAR ARCHITECTURE THREAD-LEVEL PROCESSING SOME OTHER BELLS AND WHISTLES NEXT IMPROVING THE INPUT OUTPUT DUNDEE.AC.UK PAGE 40",
  "CPU4-41": "DUNDEE.AC.UK DUNDEE.AC.UK PAGE",
  "deadlocks-01": "OPERATING SYSTEMS CONCURRENCY DEADLOCK STARVATION D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE ADDITIONAL MATERIAL AND PRESENTED BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "deadlocks-02": "OPERATING SYSTEMS RE-USABLE RESOURCES THESE ARE GLOBAL RESOURCES THAT CAN BE TEMPORARILY USED EXCLUSIVELY BY ONE PROCESS BUT WHICH ARE EVENTUALLY RELEASED AND ARE THEN AVAILABLE FOR USE BY OTHER PROCESSES. EXAMPLES MAIN MEMORY, DISCS, FILES, SEMAPHORES, A CPU, MOST DEVICES. AC22005 2",
  "deadlocks-03": "OPERATING SYSTEMS CONSUMABLE RESOURCES THESE ARE ENTITIES THAT ARE CONTINUOUSLY CREATED AND MADE AVAILABLE FOR PROCESSES TO USE . WHEN A PROCESS ACQUIRES SUCH A RESOURCE, IT USUALLY DESTROYS IT AND IT IS NOT RELEASED BACK INTO THE GENERAL SYSTEM, I.E. IT CONSUMES IT. EXAMPLES SIGNALS, MESSAGES, PRINTER PAPER. AC22005 3",
  "deadlocks-04": "OPERATING SYSTEMS CONCURRENCY IS CURSED WE HAVE SEEN HOW GLOBAL RESOURCES CAN BE SHARED BETWEEN SEVERAL PROCESSES. THE EMPHASIS WAS ON THE MEASURES NEEDED TO ENSURE THAT THE RESOURCES ARE USED CORRECTLY AND SAFELY. HOWEVER, THESE TECHNIQUES HELP TO CONTRIBUTE TO TWO MAJOR PROBLEMS THAT CAN AFFECT THE PROCESSES OR THREADS . AC22005 4",
  "deadlocks-05": "OPERATING SYSTEMS DEADLOCK STARVATION DEADLOCK THE PERMANENT BLOCKING OF A SET OF PROCESSES DUE TO AN UNFORTUNATE DISTRIBUTION OF RESOURCES BETWEEN THE PROCESSES. STARVATION THE INDEFINITE PREVENTION OF A PROCESS PROGRESSING DUE TO CONTINUED DENIAL OF ACCESS TO A RESOURCE. AC22005 5",
  "deadlocks-06": "OPERATING SYSTEMS PRINCIPLE OF DEADLOCK THE SITUATION WHERE THE GLOBAL RESOURCES ARE SO DIVIDED UP AMONG PROCESSES THAT EACH PROCESS IS WAITING FOR A RESOURCE THAT IS HELD BY ANOTHER PROCESS IN SUCH A WAY THAT NO PROCESS CAN PROCEED ANY FURTHER. IS WAITING FOR B P1 HAS LOCKED AC22005 HAS LOCKED P2 A IS WAITING FOR X RESOURCES PN PROCESSES 6",
  "deadlocks-07": "OPERATING SYSTEMS FOUR CONDITIONS FOR DEADLOCK THESE MUST ALL HAPPEN FOR DEADLOCK TO OCCUR 1. MUTUAL EXCLUSION ONE OF THE RESOURCES CAN BE ACCESSED BY ONLY ONE PROCESS AT A TIME. 2. NO PRE-EMPTION NO PROCESS CAN BE FORCED TO RELINQUISH A RESOURCE. 3. HOLD AND WAIT ONCE A PROCESS HAS ACQUIRED A RESOURCE IT IS NOT PREPARED TO RELINQUISH IT WHILST WAITING TO ACQUIRE OTHER RESOURCES. 4. AND THE KILLER CONDITION IS CIRCULAR WAIT .... AC22005 7",
  "deadlocks-08": "OPERATING SYSTEMS CIRCULAR WAIT THE KILLER CONDITION A CLOSED CHAIN OF PROCESSES IN WHICH EACH ONE IS WAITING FOR THE ONE IN FRONT OF IT TO RELEASE A RESOURCE. A REAL-LIFE EXAMPLE OF THIS IS MIGHT BE WHEN FOUR CARS ARE STOPPED AT A CROSSROAD, EACH GIVING WAY TO THE CAR ON THE RIGHT HUMAN DRIVERS CAN USUALLY SORT THIS OUT ROBOTIC DRIVERS WOULD DEADLOCK AC22005 8",
  "deadlocks-09": "OPERATING SYSTEMS DEADLOCK PREVENTION DESIGN THE OPERATING SYSTEM IN SUCH A WAY THAT DEADLOCK CANNOT OCCUR. THIS INVOLVES GUARANTEEING THAT ONE OF THE CONDITIONS CAN NEVER EXIST IN THE SYSTEM. THIS IS EITHER IMPOSSIBLE, UNPRACTICAL OR VERY INEFFICIENT SEE NEXT SLIDES . AC22005 9",
  "deadlocks-10": "OPERATING SYSTEMS MUTUAL EXCLUSION THIS IS NOWADAYS AN ESSENTIAL REQUIREMENT OF ANY OPERATING SYSTEM, THEY ALL USE IT INTERNALLY. RACE CONDITIONS MUST BE PREVENTED. CANNOT DO IT WITHOUT MUTEX AT SOME POINT. THERE ARE NO MULTI-PROGRAMMING OPERATING SYSTEMS THAT DO NOT HAVE SOME FORM OF MUTUAL EXCLUSION CAN EVEN BE PROVIDED BY USER SPACE LIBRARIES AC22005 10",
  "deadlocks-11": "OPERATING SYSTEMS HOLD AND WAIT THE IMPORTANT POINT IS TO PREVENT A PROCESS FROM HOLDING SOME RESOURCES WHILE WAITING FOR OTHER RESOURCES. A SOLUTION IS TO INSIST THAT A PROCESS TAKE ALL OF ITS REQUIRED RESOURCES AT ONE TIME, USUALLY AS IT STARTS. BUT THIS IS TERRIBLY INEFFICIENT, CAUSING MANY UN-NECESSARY DELAYS. AC22005 11",
  "deadlocks-12": "OPERATING SYSTEMS PRE-EMPTION 1 PRE-EMPTION MEANS THAT A PROCESS MUST BE ABLE TO GIVE UP A RESOURCE, SO THAT ANOTHER MAY USE IT. TO DO THIS A PROCESS MUST RECORD THE EXACT STATE OF ALL SHARED RESOURCES AND ITSELF SO THAT IT CAN RE-CREATE THE SCENARIO AND START AGAIN FROM THAT POINT AT A LATER DATE CHECK-POINTING CAN DO THAT PERIODICALLY IN PLACES WHERE NO OR FEW SHARED RESOURCES ARE USED AC22005 12",
  "deadlocks-13": "OPERATING SYSTEMS PRE-EMPTION 2 WHEN A PROCESS REQUESTS AN UNAVAILABLE RESOURCE THERE ARE TWO COMMON SCENARIOS 1. THE REQUESTING PROCESS GIVES UP ALL OF ITS RESOURCES AND WILL BE BLOCKED. THEN HE WILL LATER BE UNBLOCKED WHEN THE RESOURCES ARE AVAILABLE AND HE WILL HAVE TO RE-ACQUIRE ALL OF THEM. 2. THE OPERATING SYSTEM FORCES THE OTHER PROCESS HOLDING THE REQUESTED RESOURCE TO GIVE IT UP. THAT PROCESS WILL HAVE TO RE-ACQUIRE THE RESOURCE LATER. AC22005 13",
  "deadlocks-14": "OPERATING SYSTEMS CIRCULAR WAIT 1 THE MECHANISM FOR PREVENTING PROCESSES FORMING CIRCLES IS TO FORCE THEM TO KEEP MOVING IN A CERTAIN DIRECTION RESOURCES ARE ORDERED LINED UP IN SOME WAY. EACH PROCESS TRAVELS ALONG THE LINE AT ITS OWN PACE , BUT MUST PICK UP THE RESOURCES IT WANTS NOW OR IN THE FUTURE AS IT PASSES THEM. EXAMPLE CAFETERIA SERVING QUEUE - YOU MUST PICK UP EVERYTHING YOU WANT AS YOU GO PAST. AC22005 14",
  "deadlocks-15": "OPERATING SYSTEMS CIRCULAR WAIT 2 WHAT IS THE PROBLEM WITH THAT APPROACH 1. DELAYS, ESPECIALLY WHEN A PROCESS REQUIRES LOT IF MISSED ONE, BACK TO OF SHARED RESOURCES BEGINNING 2. INCREASE MEMORY CONSUMPTION A LOT TO KEEP TRACK OF THE RESOURCES ORDER NOT THAT IMPORTANT 3. IT DOES NOT REALLY SOLVE THE PROBLEM AS ANY OF THE OTHER THREE CONDITIONS CAN STILL CAUSE A DEADLOCK NOT TRUE, BREAKING ANY OF THE 4 CONDITIONS WOULD PREVENT DEADLOCKS AC22005 15",
  "deadlocks-16": "OPERATING SYSTEMS CONCLUSION WE HAVE SEEN WHAT A DEADLOCK IS AND THE CONDITIONS UNDER WHICH THAT CAN HAPPEN DEADLOCKS CAN LEAD TO STARVATION, A SITUATION WHERE PROCESSES NEVER GET THE RESOURCES THEY NEED WE HAVE DISCUSS SOME WAY TO PREVENT THOSE SITUATIONS OCCURING AC22005 16",
  "distrib-01": "OPERATING SYSTEMS DISTRIBUTED SYSTEMS NETWORKING AND DISTRIBUTED PROCESSING S. SMITH - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE LECTURE BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "distrib-02": "OPERATING SYSTEMS BASIC MODELS TOOLS NETWORKS MAKE IT EASY FOR WORK TO BE DISTRIBUTED BETWEEN MULTIPLE MACHINES POSSIBLY OVER LARGE DISTANCES CLUSTERS OF PROCESSING NODES BUY EM CHEAP, STACK EM HIGH CLIENT-SERVER MODEL VERY COMMON MIDDLEWARE DISTRIBUTED MESSAGE PASSING REMOTE PROCEDURE CALLS RPC AC22005 2",
  "distrib-03": "OPERATING SYSTEMS COMMUNICATIONS ARCHITECTURE MANY DIFFERENT PROGRAMS TALK TO EACH OTHER OVER A NETWORK, E.G. FTP, TELNET, HTTP BROWSERS. ALL SUCH PROGRAMS NEED TO SEND DATA OVER THE NETWORK ENSURE THAT ALL DATA ARRIVES IN THE CORRECT ORDER SET UP A HIGH-LEVEL DIALOGUE. E.G. CAN I HAVE A COPY OF THIS FILE PLEASE AC22005 3",
  "distrib-04": "OPERATING SYSTEMS CLIENT-SERVER COMPUTING A PROGRAM OR SERVICE IS SPLIT UP INTO TWO PARTS, EACH RUNNING ON A DIFFERENT COMPUTER. THE CLIENT PART RUNS ON A PC WORKSTATION AND PROVIDES A GUI OR USERFRIENDLY INTERFACE TO THE USER. PROCESSES THE USER S COMMANDS AND SENDS COMMANDS REQUESTS TO THE SERVER PART. AC22005 4",
  "distrib-05": "OPERATING SYSTEMS CLIENT-SERVER CONTINUED THE SERVER PART CARRIES OUT THE COMMAND AND SENDS THE ANSWER BACK TO THE CLIENT. THE CLIENT THEN PRESENTS THE ANSWER TO THE USER. THIS IS NOW A VERY FAMILIAR MODEL INTERNET PROVIDES A PLATFORM FOR LOT OF WEB ACTIVITIES DISTRIBUTED COMPUTING ALSO WORKS THIS WAY. AC22005 5",
  "distrib-06": "OPERATING SYSTEMS MIDDLEWARE DESPITE MANY EFFORTS TO STANDARDISE, MACHINE ARCHITECTURES, OPERATING SYSTEMS AND PROPRIETARY SYSTEMS CAN STILL MAKE IT DIFFICULT TO WRITE GENERAL CLIENT PROGRAMS. TO OVERCOME THIS AN EXTRA LAYER IS INSERTED TO TRY AND STANDARDISE INTERFACES AND HIDE THE ACTUAL LOW LEVEL MECHANICS FROM THE CLIENT APPLICATION. THIS IS CALLED MIDDLEWARE, TYPICALLY IMPLEMENTED IN LIBRARIES OR SERVICES. AC22005 6",
  "distrib-07": "OPERATING SYSTEMS DISTRIBUTED MESSAGE PASSING PROCESSES ON DIFFERENT MACHINES CAN ONLY TALK TO EACH OTHER BY MESSAGES. THERE ARE NO LOCAL SEMAPHORES OR SHARED MEMORY CONSTRUCTS AVAILABLE SO MESSAGES OVER THE NETWORK ARE THE SYNCHRONISATION TOOLS NEEDS CHANGE TO THE PRIMITIVES OF MESSAGE PASSING INTERFACES WHAT WERE THE TWO PRIMITIVES USED IN LOCAL MESSAGE PASSING BETWEEN PROCESSES AC22005 7",
  "distrib-08": "OPERATING SYSTEMS DISTRIBUTED MESSAGE PRIMITIVES SEND MACHINE, PROCESS, MESSAGE WHERE MACHINE AND PROCESS SPECIFY WHERE THE MESSAGE IS TO GO THE DESTINATION ADDRESS . THE MESSAGE CAN BE A SIMPLE STRING OR A COMPLEX DATA STRUCTURE. RECEIVE MACHINE, PROCESS, MESSAGE WHERE MACHINE AND PROCESS MAY BE USED TO SPECIFY WHICH MACHINES PROCESSES THE CALLER IS PREPARED TO ACCEPT MESSAGES FROM. WILDCARDS, FOR EXAMPLE ALL , MAY BE ALLOWED. THEY ARE UPDATED TO SHOW WHERE THE MESSAGE ACTUALLY CAME FROM. AC22005 8",
  "distrib-09": "OPERATING SYSTEMS RELIABLE AND UNRELIABLE DEPENDING ON THE TRANSPORT MECHANISM USED THE SYSTEM MAY OR MAY NOT GUARANTEE THAT THE MESSAGE WILL BE DELIVERED. RELIABLE MAKES THE APPLICATION PROGRAMMING SIMPLER. UNRELIABLE SYSTEMS MAKE THE MESSAGE PASSING PART EASIER. A CERTAIN PARALLEL HERE WITH CONNECTION-ORIENTED RELIABLE AND DATAGRAM UNRELIABLE SERVICES. THE OPERATING SYSTEM USUALLY PROVIDES THIS. AC22005 9",
  "distrib-10": "OPERATING SYSTEMS BLOCKING AND NON-BLOCKING BLOCKING MEANS THE PROCESS IS HELD UP UNTIL THE MESSAGE IS KNOWN TO HAVE REACHED ITS DESTINATION. MAY INVOLVE CONSIDERABLE DELAYS, BUT IS WELL UNDERSTOOD WHEN IT COMES TO DEBUGGING. OS THEN PUT THE PROCESS IN BLOCKED STATE. NON-BLOCKING IS THE MOST EFFICIENT IN TERMS OF PARALLEL PROCESSING. SEND MESSAGE AND GET ON WITH SOMETHING ELSE. CARE HAS TO BE TAKEN NOT TO OVERWRITE SENT DATA BEFORE IT IS ACTUALLY SENT. AC22005 10",
  "distrib-11": "OPERATING SYSTEMS REMOTE PROCEDURE CALLS RPC THIS IS A MECHANISM FOR EXECUTING A PROCEDURE ON ANOTHER MACHINE. WHEN A PROGRAM CALLS A PROCEDURE IT WAITS UNTIL THE PROCEDURE HAS PRODUCED THE REQUIRED EFFECTS AND THEN CARRIES ON. IT DOES NOT CARE HOW THIS IS ACCOMPLISHED. IT IS NO CONCERN OF THE CALLING PROGRAM IF THE PROCEDURE GOES TO ANOTHER MACHINE. THUS RPC IS A SIMPLE METHOD OF HIDING THE INTERMACHINE MECHANISM FROM THE CALLING PROGRAM. AC22005 11",
  "distrib-12": "OPERATING SYSTEMS FOUR PARTS TO USING AN RPC THERE ARE FOUR PARTS TO USING AN RPC THE ACTUAL PROCEDURE P X, Y THAT WILL BE RUN ON THE REMOTE MACHINE A DUMMY PROCEDURE CALLED A STUB P X, Y WHICH SIMPLY TAKES THE PARAMETERS, PACKAGES THEM UP INTO A MESSAGE AND SENDS THEM TO THE REMOTE MACHINE. IT WAITS FOR THE REPLY, UNPACKS THE RESULTS AND RETURNS THEM, JUST AS THOUGH IT HAD CALCULATED THEM LOCALLY. AC22005 12",
  "distrib-13": "OPERATING SYSTEMS FOUR PARTS TO USING AN RPC A SUITABLE MESSAGE TRANSPORT SYSTEM TO CARRY THE MESSAGES A DRIVER PROGRAM SERVER STUB , RUNNING ON THE REMOTE MACHINE WHICH RECEIVES THE MESSAGE, UNPACKS THE PARAMETERS, CALLS THE ACTUAL PROCEDURE, GETS THE RESULTS, PACKAGES THEM UP AND SENDS THEM BACK TO THE CALLING MACHINE. AC22005 13",
  "distrib-14": "OPERATING SYSTEMS RPC - CLIENT SERVER STUBS CLIENT CLIENT STUB SERVER STUB TRANSPORT SERVER TRANSPORT NETWORK AC22005 14",
  "distrib-15": "OPERATING SYSTEMS SYNCHRONOUS RPC IN THE EARLIER EXAMPLE THE CALLING PROGRAM WAITS UNTIL THE RESULTS ARE DELIVERED, JUST AS IF THE RESULTS HAD BEEN CALCULATED LOCALLY. THIS IS A SYNCHRONOUS RPC SYSTEM. HOWEVER, THE CALLING PROGRAM HAS BEEN IDLE, DOING NOTHING, WHEREAS IT COULD HAVE DONE SOME USEFUL WORK IN THE MEAN TIME. AC22005 15",
  "distrib-16": "OPERATING SYSTEMS ASYNCHRONOUS RPC IF AN RPC SYSTEM IMMEDIATELY RELEASES THE CALLING PROGRAM AS SOON AS THE DATA HAS BEEN PASSED TO THE REMOTE MACHINE THEN IT IS CALLED AN ASYNCHRONOUS RPC SYSTEM. PARTICULARLY USEFUL IF THE PROCEDURE DOES NOT RETURN A RESULT. SUITS WELL EVENT-DRIVEN PROGRAMMING. USE NON-BLOCKING COMMUNICATION. AC22005 16",
  "distrib-17": "OPERATING SYSTEMS CLUSTERS CREATING THE ILLUSION OF A BIG MACHINE BY CLUSTERING LOTS OF LITTLE ONES BUY EM CHEAP, STACK EM HIGH AC22005 17",
  "distrib-18": "OPERATING SYSTEMS PRINCIPLES OF CLUSTER APPROACH ABSOLUTE SCALABILITY SCALE UP USING ANY NUMBER OF COMPUTERS INCREMENTAL SCALABILITY ADD MORE COMPUTERS IN SMALL NUMBERS HIGH AVAILABILITY FAILURE OF ONE NODE DOES NOT TAKE IT ALL DOWN SUPERIOR PRICE PERFORMANCE USE COMMODITY PCS TO BUILD A MONSTER AC22005 18",
  "distrib-19": "OPERATING SYSTEMS CLUSTER MIDDLEWARE ATTRIBUTES MIDDLEWARE SOFTWARE REQUIRED TO UNIFY THE COMPUTERS SINGLE ENTRY POINT SINGLE USER INTERFACE SINGLE FILE HIERARCHY SINGLE I O SPACE SINGLE CONTROL PC SINGLE PROCESS SPACE SINGLE VIRTUAL NETWORK CHECK-POINTING SINGLE MEMORY SPACE PROCESS MIGRATION SINGLE JOB-MANAGEMENT SYSTEM AC22005 19",
  "distrib-20": "OPERATING SYSTEMS BEOWULF WWW.BEOWULF.ORG NASA FUNDED PROJECT CLUSTERED PCS FOR PERFORMING BIG COMPUTATION MASS MARKET COMMODITY COMPONENTS INCLUDING NETWORK E.G. COMMODITY ETHERNET DEDICATED PRIVATE NETWORK E.G. LAN FREELY AVAILABLE SOFTWARE BASE MOST IMPLEMENTATIONS USE LINUX ON LINUX WORKSTATIONS OR PCS. AC22005 20",
  "distrib-21": "OPERATING SYSTEMS SOME KEY ELEMENTS BPROC BEOWULF DISTRIBUTED PROCESS SPACE ALLOWS A PROCESS ID SPACE TO SPAN MULTIPLE NODES IN A CLUSTER ENVIRONMENT NEEDS TO PROVIDE A SINGLE SYSTEM IMAGE TO USER BEOWULF ETHERNET CHANNEL BONDING JOINS MULTIPLE NETWORKS INTO ONE LOGICAL NETWORK WITH HIGHER BANDWIDTH. USES MULTIPLE ETHERNETS. MORE ON BEOWULF IN STALLINGS, ED.7, PP.726-728. AC22005 21",
  "distrib-22": "OPERATING SYSTEMS OTHER EXAMPLES OF MIDDLEWARE AC22005 22",
  "distrib-23": "OPERATING SYSTEMS CORBA COMMON OBJECT REQUEST BROKER ARCHITECTURE FROM OBJECT MANAGEMENT GROUP. DISTRIBUTED OBJECT COMPUTING DOC . AN ATTEMPT TO MANAGE THE COMPLEXITY OF CREATING DISTRIBUTED SYSTEMS. THE ORB ACTS AS INTERMEDIARY BETWEEN LOCAL AND REMOTE OBJECTS, REDUCING MANY PROBLEMS. AC22005 23",
  "distrib-24": "OPERATING SYSTEMS CORBA NOT ALONE DCOM DISTRIBUTED COMPONENT OBJECT MODEL FROM MICROSOFT, ALSO ACTIVEX FROM MICROSOFT. RMI REMOTE METHOD INVOCATION FOR JAVA. MPI AND MPICH MESSAGE PASSING INTERFACE AN OPEN STANDARD AND ITS HIGH PERFORMANCE IMPLEMENTATION USING VIRTUALIZATION SLURM SIMPLE LINUX UTILITY FOR RESSOURCES MANAGEMENT AC22005 24",
  "distrib-25": "OPERATING SYSTEMS CONCLUSION OS CAN PROVIDE COMMUNICATION FACILITIES ALLOWING TO RUN SYSTEMS ON TOP OF MULTIPLE PHYSICAL COMPUTERS THE OS ITSELF CAN BE RUNNING OVER MULTIPLE COMPUTERS, EACH ONE TAKING CARE OF A PARTICULAR ASPECT MANY TECHNOLOGIES EXIST TO PROVIDE WAYS TO BUILD DISTRIBUTED APPLICATIONS AC22005 25",
  "filesystems-01": "FILESYSTEMS AND THEIR RELATION WITH DISCS I O J.L. ARNOTT N. CAIRNIE L. MAGERAND UNIVERSITY OF DUNDEE",
  "filesystems-02": "WHAT IS A FILESYSTEM AN HIGH LEVEL INTERFACE FOR STORAGE OF ORGANIZED DATA WHICH ABSTRACT THE HARDWARE DETAILS THE ORGANIZATION OF THE DATA ON THE DISK. PRESENTING IT IN A LOGICAL WAY FOR USERS FILES AND FOLDERS AS REAL PAPER FILES . KEEP TRACK OF SOME INFORMATION ABOUT THE DATA WHO CAN ACCESS IT, WHO DID IT AND WHEN, ... . HAVE TO ENFORCE ALL THE RESULTING LOGICAL RULES. SOMETHING AS TRANSPARENT AS POSSIBLE FOR PROGRAMS AND BASIC HUMAN USERS.",
  "filesystems-03": "LOCALITY OF REFERENCE REMEMBER IT A PRINCIPLE WHICH STATES THAT PROGRAMS TEND TO ACCESS DATA IN A CLUSTERED WAY AND ONLY WORK LOCALLY IN EACH CLUSTER FOR SHORT PERIOD OF TIMES. WHAT CONSEQUENCES FOR MANAGING SPACE ON DISKS YOUR IDEA ALL RELATED DATA CLUSTER SHOULD BE STORED IN CLOSE BY BLOCKS ON THE DISC.",
  "filesystems-04": "FILE ALLOCATION PRE-ALLOCATION ALL THE SPACE IS ALLOCATED WHEN FILE IS CREATED ESTIMATION OF FILE SIZE REQUIRED, MIGHT BE WRONG. USUALLY STORED ON CONTIGUOUS BLOCKS. NOT FLEXIBLE AND CAN WASTE SPACE. DYNAMIC ALLOCATION SPACE ALLOCATED WHEN DATA IS ACTUALLY WRITTEN FILES CAN GROW AND SHRINK NO ESTIMATION, NO WASTE. MIGHT NOT BE STORED ON CONTIGUOUS BLOCKS.",
  "filesystems-05": "SOME TERMINOLOGY PORTION A CONTIGUOUS CHUNK OF SPACE ON DISC, COMPOSED OF ONE OR MORE CONSECUTIVE BLOCKS. FILE ALLOCATION TABLE FAT KEEPS TRACK OF PORTIONS ALLOCATED TO A FILE DISC ALLOCATION TABLE DAT KEEPS TRACK OF BLOCKS OR PORTIONS WHICH ARE FREE ON THE DISC. CAN ALSO RECORD BAD BLOCKS WHERE DISC FAILS TO READ WRITE .",
  "filesystems-06": "CONTIGUOUS ALLOCATION PRE-ALLOCATION IS USED A PORTION OF FREE SPACE IS ALLOCATED WHEN A FILE IS CREATED. EACH FAT ENTRY CONTAINS FILE NAME, START BLOCK AND NO. OF BLOCKS IN FILE. FAST RANDOM ACCESS TO BLOCKS WITHIN FILE BUT LITTLE PORTIONS OF WASTED SPACE APPEAR AS FILES ARE ERASED OTHER SMALLER ONES ARE INSERTED. FRAGMENTATION CAN THUS APPEAR AFTER SOME TIME.",
  "filesystems-07": "CONTIGUOUS ALLOCATION ILLUSTRATED FILE 1 FILE 2 0 4 8 1 5 9 2 6 10 FILE 3 3 7 11",
  "filesystems-08": "FAT FOR CONTIGUOUS ALLOCATION FILE NAME FILE 1 FILE 2 FILE 3 STARTING BLOCK 1 4 7 LENGTH 3 3 5 HOW DID WE DELETED FILE 2 PREVIOUSLY",
  "filesystems-09": "CHAINED ALLOCATION SPACE ALLOCATED DYNAMICALLY IN PORTIONS THAT ARE ALL THE SIZE OF ONE BLOCK EVERY BLOCK CONTAINS POINTER TO NEXT BLOCK, AND LAST ONE CONTAINS A NULL POINTER FORMAT OF FAT IS SAME AS FOR CONTIGUOUS NO PORTIONS OF WASTED SPACE BUT RANDOM ACCESS MAY BE SLOW METHOD IS MOST SUITED FOR SEQUENTIAL ACCESS OF FILE BLOCKS.",
  "filesystems-10": "CHAINED ALLOCATION 0 4 8 FILE 1 1 5 9 FILE 2 2 6 10 3 7 11",
  "filesystems-11": "FAT FOR CHAINED ALLOCATION FILE NAME FILE 1 FILE 2 FILE 3 STARTING BLOCK 1 2 2 4 LENGTH WHY IS THE LENGTH COLUMN STILL THERE",
  "filesystems-12": "INDEXED ALLOCATION WITH VARIABLE-SIZED PORTION FILE CONTAINS AN INDEX BLOCK LIST OF POINTERS TO ALL PORTIONS OF THE FILE. EACH ENTRY INDICATES THE FIRST BLOCK AND LENGTH OF THE PORTION. FAT FORMAT IS DIFFERENT FROM PREVIOUSLY ENTRIES IN THE FAT POINT TO INDEX BLOCKS EACH ENTRY CONSISTS OF FILE NAME AND CORRESPONDING INDEX BLOCK",
  "filesystems-13": "FORMAT OF FAT INDEXED ALLOCATION FILE NAME FILE 1 FILE 2 FILE 3 INDEX BLOCK 8 1",
  "filesystems-14": "INDEXED ALLOCATION WITH VARIABLE-SIZED PORTION 0 4 8 FILE 1 FILE 2 1 5 9 2 6 10 3 7 11",
  "filesystems-15": "INSIDE INDEX BLOCK INDEXED ALLOCATION FILE 1 START BLOCK 9 6 4 LENGTH 3 2 1",
  "filesystems-16": "ADVANTAGES - INDEXED ALLOCATION SPEED OF RANDOM ACCESS IS GOOD READ THE INDEX BLOCK, COMPUTE NO. OF THE BLOCK THAT WE REQUIRE, THEN READ THAT BLOCK SEQUENTIAL ACCESS IS ALSO EASY INDEXED ALLOCATION IS THEREFORE THE MOST POPULAR FILE ALLOCATION METHOD. A DOWNSIDE IS THAT BLOCKS CAN BE SPREAD ALL OVER THE DISC.",
  "filesystems-17": "FREE SPACE MANAGEMENT DISC ALLOCATION TABLE DAT IS USED TO KEEP TRACK OF PORTIONS WHICH ARE EMPTY FREE . NEEDED TO SEARCH EFFICIENTLY FOR SPACE WHEN ALLOCATING THREE COMMON METHODS FOR THIS ARE BIT TABLE CHAINING FREE BLOCKS INDEXED FREE PORTIONS",
  "filesystems-18": "BIT TABLE DISC ALLOCATION TABLE IS AN ARRAY WITH ONE CELL FOR EACH BLOCK. CELLS CONTAIN BITS USED AS FLAGS IF A BLOCK IS USED OR MALFUNCTIONING , ITS BIT IS SET TO 1, OTHERWISE ITS BIT IS EQUAL TO 0. DISC ALLOCATION TABLE IS QUITE COMPACT ONE BIT FOR EACH BLOCK ON DISC BUT USE SOME SPACE. SEARCHING FOR CONTIGUOUS FREE BLOCKS IS A LINEAR OPERATION IN THE TOTAL NUMBER OF BLOCKS.",
  "filesystems-19": "CHAINING FREE BLOCKS TREAT THE FREE SPACE AS A SPECIAL FILE USING THE CHAINING METHOD TO LINK ALL THE FREE BLOCKS TOGETHER. DAT IS ONLY A POINTER TO THE FIRST BLOCK IN THE CHAIN OF FREE BLOCKS. DOESN T USE ANY SPACE ON THE DISC WHICH IS NOT POTENTIAL FREE SPACE. MAKE IT HARDER TO ALLOCATE SPACE TO FILE WISELY. LINEAR OPERATION IN THE NUMBER OF FREE BLOCKS.",
  "filesystems-20": "INDEXED FREE BLOCKS TREAT FREE SPACE AS A FILE, AND USE EXISTING INDEXED ALLOCATION METHOD. DAT IS SIMPLY THE INDEX BLOCK THAT WE WOULD STORE FOR A FILE UNDER INDEXED ALLOCATION. CAN BE VERY BIG WHEN THERE IS A LOT OF FREE SPACE. VARIABLE-SIZED PORTIONS ARE USED TO DECREASE ITS SIZE. SEARCHING FOR FREE SPACE IS MORE EFFICIENT LINEAR OPERATION IN THE NUMBER OF FREE PORTIONS .",
  "filesystems-21": "NTFS NT FILE SYSTEM NEW TECHNOLOGY FILE SYSTEM IN WINDOWS NT AND LATER VERSIONS",
  "filesystems-22": "VOLUME VS PARTITIONS A VOLUME CAN BE 1 DISC, OR PART OF 1 DISC, OR SPANNING SEVERAL DISCS A VOLUME CONTAINS FILE SYSTEM INFORMATION A COLLECTION OF FILES UNALLOCATED SPACE FREE SPACE THIS IS QUITE A DIFFERENT MECHANISM THAN PARTITIONS, WHICH ALLOW TO SPLIT ONE DISK INTO MULTIPLE VIRTUAL DISKS EACH DISK HAS ITS PARTITION SCHEME AND EACH PARTITION HAS ITS OWN FILESYSTEM. NTFS IS ONE FILESYSTEM COVERING POTENTIALLY MULTIPLE DISKS INCLUDING EVENTUALLY VIRTUAL ONES RESULTING FROM PARTITIONING .",
  "filesystems-23": "CLUSTER THE CLUSTER IS SEEN AS THE FUNDAMENTAL UNIT OF DISC SPACE ON NTFS REPLACES SECTOR OR BLOCK . DISK SECTORS WERE USUALLY 512 BYTES BUT NEWER LARGE DISK HAVE 4096 BYTES SECTOR SIZE CLUSTER SIZE IS ALWAYS A POWER OF 2 AND MULTIPLE OF BLOCK SIZE CLUSTERS NEED NOT BE CONTIGUOUS IN A FILE THAT ALLOW DYNAMIC ALLOCATION MAX FILE SIZE 232 CLUSTERS EQUIVALENT TO 248 BYTES WITH DEFAULT CLUSTER SIZE.",
  "filesystems-24": "CLUSTER SIZE NTFS CAN EASILY SUPPORT DISCS WITH DIFFERING SECTOR SIZE. IT CAN SUPPORT LARGE DISCS EFFICIENTLY AND LARGE FILES BY USING A LARGER CLUSTER SIZE SO LARGE FILES DO NOT NECESSARILY MEAN LOTS OF CLUSTERS TO MANAGE. HOW IS THAT CLUSTER SIZE FOR ACALLED VOLUME IS ESTABLISHED AT THE CREATION OF THE FILESYSTEM FORMATTING .",
  "filesystems-25": "NTFS DEFAULT CLUSTER SIZES WINDOWS 7, WINDOWS XP, WINDOWS SERVER 2003, 2008, ETC. VOLUME SIZE CLUSTER SIZE 7 MBYTE - 512 MBYTE 4 KBYTE 512 MBYTE 1GBYTE 4 KBYTE 1 GBYTE 2 GBYTE 4 KBYTE 2 GBYTE 2 TBYTE 4 KBYTE 2 TBYTE 16 TBYTE 4 KBYTE 16 TBYTE 32 TBYTE 8 KBYTE 32 TBYTE 64 TBYTE 16 KBYTE 64 TBYTE 128 TBYTE 32 KBYTE 128 TBYTE 256 TBYTE 64 KBYTE 256 TBYTE NOT SUPPORTED",
  "filesystems-26": "NTFS VOLUME LAYOUT PARTITION BOOT SECTOR INFORMATION ABOUT VOLUME LAYOUT, FILE SYSTEM STRUCTURES, BOOT START-UP INFO AND CODE. MASTER FILE TABLE INFORMATION ABOUT FILES AND FOLDERS ON THE VOLUME, AND ABOUT UNALLOCATED FREE SPACE. BASICALLY THE INDEX BLOCK INDEX FILE . ORGANISED IN A RELATIONAL DATABASE STRUCTURE SYSTEM FILES INCLUDING LOG FILE CLUSTER BIT MAP.",
  "filesystems-27": "EXT4 4TH EXTENDED FILESYSTEM A TYPICAL FILESYSTEM USED BY GNU LINUX",
  "filesystems-28": "EXT4 FEATURES SUPPORT VERY LARGE DISCS UP TO 1 EXABYTE 1 MILLION TERABYTES AND ALSO VERY LARGE FILES UP TO 16 TERABYTES EFFICIENT PRE-ALLOCATION FOR FILES DELAYED ALLOCATION THE ACTUAL ALLOCATION OF DISK SPACE IS DONE ONLY WHEN ENOUGH DATA IS TO BE WRITTEN",
  "filesystems-29": "EXTENTS A SPACE OF CONTIGUOUS BLOCKS ON THE DISK REPLACE CLUSTERS FROM NTFS DOES NOT HAVE A FIXED SIZE USES RANGES OF CONTIGUOUS BLOCKS I.E. FIRST ONE AND LAST ONE ARE DYNAMICALLY CREATED AND STORED INTO A TREE DATA STRUCTURE FILES ARE FRAGMENTED OVER MANY EXTENTS IF NECESSARY",
  "filesystems-30": "SOME CONCLUSIONS FILESYSTEMS IS STILL A VERY ACTIVE RESEARCH AREA THERE ARE FILESYSTEM DEDICATED TO DEVICE LIKE CD DVD THERE ALSO EXIST SOME FILESYSTEMS RUNNING ABOVE NETWORKS",
  "hard_disc-01": "OPERATING SYSTEMS HARD DISC I O AND SCHEDULING J.L. ARNOTT N. CAIRNIE L. MAGERAND UNIVERSITY OF DUNDEE AC22005",
  "hard_disc-02": "OPERATING SYSTEMS WHAT S INSIDE AN HARD-DISC AC22005",
  "hard_disc-03": "OPERATING SYSTEMS PROPERTIES OF HARD-DISCS HARD DISC HAS ONE OR MORE CIRCULAR PLATTERS STACKED ONE ABOVE EACH OTHER EACH PLATTER HAS TWO SIDE, BOTH CARRYING DATA HEADS MOVE IN BETWEEN PLATTERS THEY READ AND WRITE INFORMATION ON THE PLATTERS SUPPORTED BY A SINGLE ARM AC22005",
  "hard_disc-04": "OPERATING SYSTEMS SINGLE DISC PLATTER FROM ABOVE TRACKS AC22005",
  "hard_disc-05": "OPERATING SYSTEMS HARD DISK PLATTERS CYLINDER A CYLINDER OF DATA PLATTERS THE DATA CYLINDER IS MADE UP OF ALL THE DATA TRACKS 10 IN THIS CASE THAT ARE EQUIDISTANT FROM THE CENTRE OF THE SIX PLATTERS. AC22005",
  "hard_disc-06": "OPERATING SYSTEMS MORE PROPERTIES PLATTERS ARE PARTITIONED IN TRACKS ALL TRACKS ABOVE EACH OTHERS FORM A DATA CYLINDER HEADS ARE ALL AT SAME CYLINDER AT ANY INSTANT ONLY ONE CYLINDER CAN BE ACCESSED AT A TIME. EACH TRACK IS DIVIDED UP INTO BLOCKS OS VIEWPOINT OR SECTORS DISK VIEWPOINT THE BLOCK IS THE MINIMUM UNIT OF INFORMATION WHICH CAN BE STORED ON OR READ FROM THE DISC BY THE OS. AC22005",
  "hard_disc-07": "OPERATING SYSTEMS SOLID STATE DRIVE SEMICONDUCTOR SOLID-STATE MEMORY CONFIGURED IN THE FORM OF A DISC DRIVE THEY USE CYLINDER TRACKS BLOCKS TOO NO LATENCY ASSOCIATED WITH HEAD MOVEMENT SILENT AND ROBUST NO MOVING PARTS AC22005",
  "hard_disc-08": "OPERATING SYSTEMS COMPARE SSD AND HDD SSD CONVENTIONAL HDD EXAMPLE PRODUCT SAMSUNG 870 QVO 4TB - 4GB CACHE WD BLACK 4TB PERF. 256MB CACHE READ WRITE DATA RATE 530-560 MB SECOND 202 MB SECOND MAX SUSTAINABLE RATE CAPACITY 4 TBYTE 4 TBYTE PHYSICAL FORM FACTOR 2.5 INCH CASE 3.5 INCH CASE COST 2018 340 168 SO SSDS HAVE MUCH FASTER ACCESS RATES THAN HDDS, AT A MUCH HIGHER COST. AC22005",
  "hard_disc-09": "OPERATING SYSTEMS ACCESSING A BLOCK DISK HEADS CAN MOVE IN AND OUT TO READ AND WRITE TO ANY CYLINDER ON THE DISK. SSD EQUIVALENT OF CHANGING CYLINDER IS LIKE CHANGING PAGE IN MEMORY ALL PLATTERS ON A DRIVE ROTATE AT THE SAME SPEED, TYPICALLY 7200 RPM SOME EXPENSIVE DRIVES CAN DO UP TO 15000 RPM, LAPTOP DRIVES USUALLY DO 5400 RPM SAVE ENERGY . AC22005",
  "hard_disc-10": "OPERATING SYSTEMS ACCESS TIME SEEK TIME TIME TO MOVE DISK ARM TO REQUIRED TRACK. ROTATIONAL LATENCY THE WAIT TIME FOR THE CORRECT BLOCK TO COME ROUND UNDER THE HEAD WE HAVE NO CONTROL OVER THIS REALLY AT 7200 RPM, ROTATION 8.35 MS., SO THE AVERAGE LATENCY 4.175 MS. AC22005",
  "hard_disc-11": "OPERATING SYSTEMS HARD DISK I O DISK DRIVES ARE OF CENTRAL IMPORTANCE TO THE EFFICIENCY OF COMPUTERS VIRTUAL MEMORY AND BIG FILE STORAGE DISK DRIVES ARE VERY, VERY SLOW COMPARED TO MAIN MEMORY MUCH RESEARCH HAS BEEN PUT INTO IMPROVING THE EFFICIENCY OF DISK I O DISK SCHEDULING IS ONE SUCH ATTEMPT AC22005",
  "hard_disc-12": "OPERATING SYSTEMS I O SCHEDULING FOR HARD-DISCS MULTIPLE DISC REQUESTS CAN QUEUE UP THE ORDER IN WHICH CYLINDERS AND BLOCKS ARE READ WRITTEN AFFECTS SEEK TIMES, AND HENCE THE PERFORMANCE DISK SCHEDULING STRATEGY THUS TRY TO REDUCE SEEK TIMES AC22005",
  "hard_disc-13": "OPERATING SYSTEMS TWO THINGS TO CONSIDER LOCALITY OF REFERENCE A PRINCIPLE WHICH STATES THAT PROGRAMS TEND TO ACCESS DATA IN A CLUSTERED WAY AND ONLY WORK LOCALLY FOR SHORT PERIOD OF TIMES. FRAGMENTATION OF DATA WHEN DATA IS SPREAD ON THE DISK OVER MANY CYLINDERS OR MULTIPLES PROCESSES MANIPULATE LOT OF DIFFERENT DATA. AC22005",
  "hard_disc-14": "OPERATING SYSTEMS FIFO FAIREST OF THEM ALL AND NO RISK OF STARVATION ADVANTAGES DRAWBACKS BUT NOT TRYING TO OPTIMIZE ANYTHING REASONABLE PERFORMANCE IF A SMALL NUMBER OF PROCESSES ARE COMPETING FOR THE HARD DISK. HOWEVER, FOR LARGE NUMBER OF PROCESSES WE LL JUMP ALL OVER THE DISK - AND GET LARGE SEEK TIMES. AC22005",
  "hard_disc-15": "OPERATING SYSTEMS LOOK DISK ARM MOVES IN ONE DIRECTION, SERVICING ALL REQUESTS UNTIL NO MORE ARE NEEDED IN THAT DIRECTION, THEN TURNS AROUND AND COMES BACK SERVICING MORE REQUESTS AND SO ON ADVANTAGES AVOIDS STARVATION AND SIMPLE DISADVANTAGE DOES NOT TAKE FULL ADVANTAGE OF LOCALITY OF REFERENCE AS ARM MAY BE MOVING IN WRONG DIRECTION TO DO SO AC22005",
  "hard_disc-16": "OPERATING SYSTEMS C-LOOK MODIFICATION OF LOOK WHERE SCANNING DIRECTION IS ONE WAY ONLY. ONCE THERE ARE NO MORE REQUESTS IN ITS SINGLEDIRECTION SWEEP, DISK HEADS RETURN TO THE START WITHOUT SERVICING ANY REQUESTS DISKS HAVE BEEN OPTIMIZED FOR SUCH MOTION SAME ADVANTAGE AND DRAWBACKS AS LOOK AC22005",
  "hard_disc-17": "OPERATING SYSTEMS SHORTEST SERVICE TIME FIRST THE REQUEST THAT REQUIRES SHORTEST SEEK TIME IS CHOSEN. INTUITIVELY THIS SHOULD BE QUITE EFFICIENT ATTEMPTS TO REDUCE ARM MOVEMENT. SHOULD TAKE REASONABLE ADVANTAGE OF LOCALITY OF REFERENCE. REQUESTS FOR BLOCKS FAR AWAY FROM WHERE ARM IS DRAWBACKS CURRENTLY THINK MAY HAVE TO WAIT AGES NEW REQUESTS OF POSSIBLE CONSEQUENCES WEIFMENTIONED USING SHORTEST JOB FIRST CPU SCHEDULING COMING WHEN IN ARE PHYSICALLY CLOSER STARVATION . AC22005",
  "hard_disc-18": "OPERATING SYSTEMS LAST IN FIRST OUT LIFO THE MOST RECENT REQUEST IS SERVICED FIRST. TAKES ADVANTAGE OF LOCALITY OF REFERENCE TO REDUCE ARM MOVEMENT IF A PROCESS GETS SEVERAL REQUESTS IN TOGETHER QUICKLY, THEY LL ALL BE SERVICED IF REQUESTS ARE LOGICALLY CLUSTERED, AND THIS TRANSLATES TO PHYSICAL CLUSTERING ON DISK, IT WILL PERFORM WELL. AGAIN, STARVATION IS POSSIBLE REQUESTS LOWER DOWN IN QUEUE MUST WAIT TILL QUEUE EMPTIES, SINCE NEW REQUESTS GO STRAIGHT TO THE FRONT. AC22005",
  "hard_disc-19": "OPERATING SYSTEMS PRIORITY OR PROCESS BASED REQUESTS MADE BY SHORT INTERACTIVE JOBS MAY BE GIVEN A HIGHER PRIORITY THAN OTHER REQUESTS. USED TO FLUSH SHORT JOBS THROUGH SYSTEM QUICKLY GIVE BETTER PERFORMANCE FOR INTERACTIVE I O. SCHEME NOT INTENDED TO OPTIMISE THE EFFICIENCY OF DISK I O LONG JOBS MAY HAVE TO WAIT AND GET STARVED. AC22005",
  "hard_disc-20": "OPERATING SYSTEMS PRIORITY OR PROCESS BASED OTHER SCHEMES EXIST TO OPTIMIZE VARIOUS TYPE OF SYSTEMS DEADLINE, FOR SYSTEMS HOSTING DATABASES ENSURE ALL REQUESTS ARE TREATED BEFORE A GIVEN TIME CFQ BFQ, FOR SYSTEMS WHERE ALL PROCESS SHOULD BE TREATED AS EQUALLY AS POSSIBLE GROUP REQUESTS BY PROCESSES WITH A TIME SLOT EACH ANTICIPATORY, FOR SYSTEMS WHERE BLOCK ACCESS CAN EASILY BE PREDICTED WEB SERVERS AC22005",
  "hard_disc-21": "OPERATING SYSTEMS CONCLUSION DISCS ARE ORGANISED INTO BLOCKS OF DATA, THE MINIMAL UNIT THAT OS MANIPULATE. NEED TO REDUCE MECHANICAL MOTION OR PAGE CHANGE TO REDUCE ACCESS TIME. SCHEDULING REQUESTS IS AT THE CORE OF OPTIMISING ACCESS TIME. LOCALITY OF REFERENCES AND FRAGMENTATION INFLUENCE PERFORMANCES. AC22005",
  "hard_disc_tut-1": "OPERATING SYSTEMS HARD DISC I O AND SCHEDULING J.L. ARNOTT N. CAIRNIE L. MAGERAND UNIVERSITY OF DUNDEE AC22005",
  "hard_disc_tut-2": "OPERATING SYSTEMS LOOK C-LOOK LOOK DISK ARM MOVES IN ONE DIRECTION, SERVICING ALL REQUESTS UNTIL NO MORE ARE NEEDED IN THAT DIRECTION, THEN TURNS AROUND AND COMES BACK SERVICING MORE REQUESTS AND SO ON C-LOOK SCANNING DIRECTION IS ONE WAY ONLY, ONCE THERE ARE NO MORE REQUESTS IN ITS SINGLEDIRECTION SWEEP, DISK HEADS RETURN TO THE START WITHOUT SERVICING ANY REQUESTS AC22005",
  "hard_disc_tut-3": "OPERATING SYSTEMS SSTF SHORTEST SERVICE TIME FIRST THE REQUEST THAT REQUIRES SHORTEST SEEK TIME IS CHOSEN AS THE NEXT ONE SERVICED. SIMILAR TO SHORTEST JOB FIRST IN CPU SCHEDULING AC22005",
  "hard_disc_tut-4": "OPERATING SYSTEMS EXERCISE A HARD DISK HAS 200 CYLINDERS. THE QUEUE OF REQUESTED CYLINDERS IS AS FOLLOWS 34, 76, 12, 72, 13, 14, 35, 145 NO MORE REQUESTS ARE RECEIVED. THE DISK HEADS ARE CURRENTLY OVER CYLINDER 52 AND MOVING UPWARDS TOWARDS 199. WHAT ORDER ARE THE ABOVE REQUESTS SERVICED IN WHEN LOOK, C-LOOK, SSTF ARE USED AC22005",
  "hard_disc_tut-5": "OPERATING SYSTEMS SOLUTIONS LOOK 72, 76, 145, 35, 34, 14, 13, 12 C-LOOK 72, 76, 145, 12, 13, 14, 34, 35 SSTF 35, 34, 14, 13, 12, 72, 76, 145 AC22005",
  "intro-01": "OPERATING SYSTEMS WHAT IS AN OPERATING SYSTEM - AN INTRODUCTION D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE PRESENTED BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005",
  "intro-02": "OPERATING SYSTEMS SOME QUESTIONS ABOUT OS WHAT CAN AN OS DO WITH A PROCESS WHICH IS NOT DOING MUCH 1. GIVE IT CONTROL OF THE CPU LESS OFTEN 2. PUT IT IN A STATE WHERE IT WILL BE WAITING TO HAVE SOMETHING TO DO 3. SUSPEND IT AND MOVE IT AUXILIARY STORAGE TO SAVE RESOURCES FOR OTHER PROCESSES DO YOU KNOW WHAT IS THE DIFFERENCE BETWEEN AN APPLICATION, A PROCESS AND A THREAD ON WINDOWS ON GNU LINUX ON ANDROID AC22005",
  "intro-03": "OPERATING SYSTEMS WHAT YOU WILL LEARN ABOUT OS WHAT IS AN OPERATING SYSTEM AND ITS COMPONENTS VARIOUS KIND OF OPERATING SYSTEMS AC22005 WHAT IS A PROCESS AND HOW THE OPERATING SYSTEM DEALS WITH THEM HOW THE OPERATING SYSTEM DEALS WITH SHARED RESOURCES ACCESS AND CONCURRENCY HOW THE OPERATING SYSTEM CAN PROVIDE SOME LEVEL OF SECURITY",
  "intro-04": "OPERATING SYSTEMS HOW THE OS PART WORKS APPROXIMATELY 4.5 WEEKS, 2 TUTORIALS PER WEEK AND SOME CONTENT IN VIDEOS EVERY WEEK THERE IS NO LAB OR ASSIGNMENTS BUT OTHER ASSIGNMENTS IN THE MODULE CAN BENEFIT FROM APPLYING A WEE BIT WHAT WE WILL BE TALKING ABOUT FINAL CLASS TEST IS 50 ON THIS PART AND THE WEEKLY TESTS DURING THE 4 WEEKS AC22005",
  "intro-05": "OPERATING SYSTEMS ABOUT ME AND OS STARTED USING COMPUTERS WITH DOS 4 THEN WINDOWS AS MAIN SYSTEM UP TO 3.11 AND A BIT OF WINDOWS 98 AND XP THEN GNU LINUX SINCE 2.2 AND A LITTLE BIT OF BSD MY PHONE RUNS ANDROID OF COURSE HAVE TO USE WINDOWS 10 ON MY LAPTOP BEEN A GNU LINUX KERNEL DEVELOPER ALTHOUGH IT WAS VERSION 2.4 AT THE TIME DRIVERS FOR PCI BROADBAND TV ACQUISITION CARDS INTEGRATED GNU LINUX IN AN EMBEDDED SYSTEM AC22005",
  "intro-06": "OPERATING SYSTEMS WHAT IS AN OPERATING SYSTEM INITIALLY A REALLY TINY PROGRAM IN CHARGE OF MAKING THE COMPUTER USABLE FOR ANOTHER PROGRAM BUT WHAT ABOUT TODAYS A VERY BIG AND VERY COMPLEX PROGRAM IN CHARGE OF ALLOWING USER S TO RUN APPLICATION S EXPECTED TO AC22005 BE ABLE TO EVOLVE WITH TIME UPDATES, NEW DEVICES, PROVIDE AN EXTENDED MACHINE INTERFACE FOR THE PROGRAMMER PROVIDE EFFICIENT AND SAFE MANAGEMENT OF RESOURCES PROVIDE A USER INTERFACE FOR USER INTERACTION NOT NECESSARILY GRAPHICAL",
  "intro-07": "OPERATING SYSTEMS LIFE WITHOUT AN OPERATING SYSTEM EVERY PROGRAMMER WOULD HAVE TO KNOW THE HARDWARE, IN DETAIL BE ABLE TO ACCESS AND PROGRAM THE HARDWARE E.G. KEYBOARD, DISPLAY, HARD DISC, NETWORK DEVICES, ETC. EVERY PROGRAM WOULD CONTAIN CODE TO DO THE SAME THING E.G. ACCESSING HARDWARE SO DUPLICATION OF CODE WOULD RESULT PROBABLY DO SOMETHING WRONG E.G. CLASH WITH OTHER PROGRAMS TRYING TO ACCESS THE SAME HARDWARE AT THE SAME TIME, OVER-WRITE MEMORY BEING USED BY ANOTHER PROGRAM AC22005",
  "intro-08": "OPERATING SYSTEMS WHERE DOES THE OS FIT SYSTEM CALLS USERS AND USER PROGRAMS OPERATING SYSTEM CPU MEMORY AC22005 I O DEVICES HARDWARE",
  "intro-09": "OPERATING SYSTEMS IMPORTANT POINTS OS PROVIDES TO PROGRAMS AND DEVELOPERS HIGHER LEVEL SERVICES, A SIMPLER, MORE POWERFUL INTERFACE. OS SERVICES ARE ONLY ACCESSED VIA SYSTEM CALLS. USERS AND PROGRAMS SHOULD NOT DIRECTLY ACCESS THE HARDWARE, IDEALLY. SET OF SYSTEM CALLS APPLICATION PROGRAMMING INTERFACE, OR API IS WHAT PROGRAMS THINK THE OPERATING SYSTEM IS. AC22005",
  "intro-10": "OPERATING SYSTEMS SOME OS CONCEPTS KERNEL THE MAIN OS PROGRAM. CONTAINS CODE FOR ESSENTIAL SERVICES. ALWAYS IN PRIMARY MEMORY. DEVICE DRIVERS PROGRAMS THAT PROVIDE A SIMPLE, CONSISTENT INTERFACE TO DEVICES, ESPECIALLY INPUT OUTPUT I O . TYPICALLY PARTS OF THE KERNEL. AC22005",
  "intro-11": "OPERATING SYSTEMS SOME OS CONCEPTS PROGRAM A STATIC FILE OF MACHINE CODE ON A PERMANENT STORAGE UNIT. INANIMATE CODE WAITING TO BE USED. PROCESS A PROGRAM IN EXECUTION. A LIVING OR RUNNING CODE. NORMALLY SITTING IN MEMORY. THE COLLECTION OF RESOURCES AND OS DATA STRUCTURES OWNED BY A PROGRAM WHILE IT IS RUNNING MEMORY SPACE, DISC FILES, I O DEVICES, PROGRAM CODE, ETC. AC22005",
  "intro-12": "OPERATING SYSTEMS OPERATING SYSTEM CALLS - FUNCTIONS PROVIDED BY OS SOME PSEUDO-CODE TO OPEN A FILE, READ ITS CONTENTS INTO AN ARRAY, THEN PRINT THE FILE IF THE FIRST CHARACTER IN FILE IS Z OR Z . OPEN FILENAME TEXT1.TXT READ FILENAME TEXT1.TXT INTO ARRAY1 IF ARRAY1 0 Z OR Z THEN PRINT FILENAME TEXT1.TXT CLOSE FILENAME TEXT1.TXT EXIT WHERE ARE THE SYSTEMS CALLS OPEN, READ, PRINT, CLOSE, EXIT ARE ALL FUNCTIONS THAT WILL BE ACHIEVED THROUGH THE OS VIA SYSTEM CALLS. THE OS IS NEEDED TO FULFIL THESE TASKS. AC22005",
  "intro-13": "OPERATING SYSTEMS THE STRUCTURE PROBLEM SOME HISTORY 1963 1964 1973 CTSS OS 360 MULTICS 32,000 36-BITS WORDS MILLION INSTRUCTIONS 20 MILLION INSTRUCTIONS GROWTH OF OPERATING SYSTEMS SIZE WAS FAST. OPERATING SYSTEMS ARE NOW VERY LARGE PROGRAMS. SIZE PROBLEMS LEAD TO LATENESS AND MORE BUGS. AC22005",
  "intro-14": "OPERATING SYSTEMS OPERATING SYSTEM STRUCTURE. OLDER TRADITIONAL STYLE OF OS WAS THAT OF A MONOLITH. THE KERNEL WAS ONE LARGE PROGRAM THAT PROVIDED ALL THE REQUIRED SERVICES. VERY BIG AND CLUMSY. SO, WHENEVER YOU ADDED A NEW DEVICE YOU HAD TO GET A DEVICE DRIVER SOFTWARE FOR THE DEVICE E.G. PRINTER RECOMPILE THE KERNEL WITH THE NEW DEVICE DRIVER INCLUDED RE-BOOT THE MACHINE SO THE NEW KERNEL DRIVER WILL BE USED AC22005",
  "intro-15": "OPERATING SYSTEMS MICRO-KERNEL APPROACH. THE NEWER METHOD OF STRUCTURING AN OS. THE KERNEL CONTAINS THE MINIMUM OF FUNCTION MEMORY MANAGEMENT BASIC CPU PROCESSOR MANAGEMENT INTER-PROCESS COMMUNICATION I O SUPPORT SECURITY OTHER FUNCTIONALITIES ARE PROVIDED IN THE USER SPACE BY PROCESSES WITH HIGHER LEVEL PRIVILEGES WHEN NEEDED . AC22005",
  "intro-16": "OPERATING SYSTEMS USERS AND USER PROGRAMS FILE SYSTEM DEVICE DRIVERS PERSONALITIES SYSTEM SERVICES SERVICES KERNEL PROCESSES HIGH PRIVILEGES MICRO-KERNEL CPU MEMORY AC22005 I O DEVICES HARDWARE",
  "intro-17": "OPERATING SYSTEMS CHARACTERISTICS OF MICRO-KERNEL. MORE SECURE AND ROBUST EVERYTHING IS ISOLATED EASY TO REPLACE SERVER OR KERNEL PROCESSES EASIER TO WRITE AND PORT THE OPERATING SYSTEM MAKES USE OF MESSAGE PASSING CAN HAVE MULTIPLE PERSONALITIES VARIOUS COMBINATION OF KERNEL PROCESSES DESIGN IS PERFECT FOR DISTRIBUTED SYSTEMS AC22005",
  "intro-18": "OPERATING SYSTEMS DISTRIBUTED SYSTEMS USER PROCESSES FILE SYSTEM SERVICES MICRO-KERNEL HARDWARE NETWORK AC22005",
  "intro-19": "OPERATING SYSTEMS MICROSOFT WINDOWS STRUCTURE SEE OP. SYS. BY STALLINGS, ED.7 PP.100-109. SINGLE-USER, MULTI-TASKING, INTERACTIVE APPLICATIONS. STRUCTURE FOR USER MODE KERNEL MODE HARDWARE ABSTRACTION LAYER HAL FOR DIFFERENT HARDWARE. KERNEL - SCHEDULING, CONTEXT SWITCHING, EXCEPTION HANDLING. SYSTEM FUNCTIONS API. SPECIAL SYSTEM SUPPORT, SERVER PROCESSES, OS PERSONALITIES. SUPPORT FOR THREADS. SYMMETRIC MULTI-PROCESSING SUPPORT FOR SYSTEMS WITH MULTIPLE PROCESSORS OR MULTI-CORE USE OF OBJECT-ORIENTED CONCEPTS. AC22005",
  "intro-20": "OPERATING SYSTEMS GNU LINUX STRUCTURE SEE OP. SYS. BY STALLINGS, ED.7 PP.114-119. MULTI-USER, MULTI-TASKING, INTERACTIVE APPLICATIONS. STRUCTURE FOR THE MICRO-KERNEL AND USER SPACE MICRO-KERNEL RESPONSIBLE OF SECURITY AND SCHEDULING PROCESSES. LOADABLE AND STACKABLE KERNEL MODULES HIGH PRIVILEGES PROCESSES . ALL DEVICE DRIVERS ARE KERNEL MODULES. USER SPACE DAEMONS TO PROVIDE MOST OF THE SERVICES. SYSTEM CALLS US TO K AND SIGNALS K TO US FOR COMMUNICATION. NATIVE SUPPORT FOR FULL VIRTUALISATION AND REAL-TIME PROCESSES. SYMMETRIC MULTI-PROCESSING SUPPORT FOR SYSTEMS WITH MULTIPLE PROCESSORS OR MULTI-CORE INTERNALLY, THREADS AND PROCESSES ARE THE SAME. AC22005",
  "intro-21": "OPERATING SYSTEMS CONCLUSION AC22005",
  "IO1-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES IMPROVING THE I O PART 1 DUNDEE.AC.UK PAGE 1",
  "IO1-02": "IN THIS VIDEO INTRODUCTION TO I O POLLING ADVANTAGES AND DISADVANTAGES OF POLLING INTERRUPT-DRIVEN I O ADVANTAGES AND DISADVANTAGES OF INTERRUPTS DUNDEE.AC.UK PAGE 2",
  "IO1-03": "INTRODUCTION TO I O DUNDEE.AC.UK PAGE 3",
  "IO1-04": "THE MICROCOMPUTER DATA BUS CPU CLOCK DUNDEE.AC.UK MEMORY INPUT OUTPUT TO FROM THE REAL WORLD ADDRESS BUS PAGE 4",
  "IO1-05": "INPUT OUTPUT INPUT OUTPUT FACILITIES ALLOW THE COMPUTER AND HENCE APPLICATION PROGRAMS TO INTERACT WITH THE WORLD OUTSIDE THE BOX RECEIVE DATA AND INSTRUCTIONS FOR PROGRAMS ALLOW OUTPUT OF PROCESSED RESULTS THERE ARE MANY DIFFERENT I O DEVICES, AND THEY ARE AN ESSENTIAL PART OF ANY MICROCOMPUTER. WE ARE MAINLY DISCUSSING THE I O CHIPS WITHIN THE COMPUTER, NOT THE PERIPHERALS THEMSELVES MOUSE, KEYBOARD, VDU, DISK DRIVES ETC. . DUNDEE.AC.UK PAGE 5",
  "IO1-06": "FUNDAMENTAL CONCEPTS INPUT OUTPUT USUALLY INVOLVES COPYING A LARGE BLOCK OF MEMORY TO ANOTHER BLOCK E.G. MAIN MEMORY TO VIDEO DEVICE COPYING A LARGE BLOCK OF MEMORY TO ONE ADDRESS, ONE CHUNK AT A TIME E.G. IMAGE TO A PRINTER COPYING FROM ONE ADDRESS TO A LARGE BLOCK OF MEMORY, ONE CHUNK AT A TIME E.G. DOWNLOAD FILE FROM NETWORK DUNDEE.AC.UK PAGE 6",
  "IO1-07": "FUNDAMENTAL CONCEPTS ALTHOUGH THE I O CHIPS LOOK THE SAME AS MEMORY TO THE CPU, THEY ARE ATTACHED TO SLOW THINGS E.G. DISK HARDWARE, HUMANS SO OPERATION OF I O DEVICES IS V-E-R-Y S-L-O-W. AS CPU MEMORY SPEEDS HAVE INCREASED DRAMATICALLY, I O SPEEDS HAVE INCREASED COMPARATIVELY SLOWLY IF AT ALL . IT IS IMPORTANT THAT WE DESIGN OUR SYSTEM SO THAT FAST FEATURES ARE NOT PENALISED BY SLOW I O OPERATIONS. DUNDEE.AC.UK PAGE 7",
  "IO1-08": "WHAT WE DON T WANT DUNDEE.AC.UK PAGE 8",
  "IO1-09": "FUNDAMENTAL CONCEPTS OUR 1980S VINTAGE MICROCOMPUTER TYPICALLY HAD ONE INPUT DEVICE KEYBOARD AND ONE OUTPUT DEVICE CHARACTER-BASED SCREEN . OUR MODERN COMPUTER HAS FAR MORE I O HIGH-RESOLUTION HIGH-RESOLUTION PRINTERS GRAPHICS INC. 3D HARD DISK S SSD S AUDIO VIDEO I O CD DVD DRIVES NETWORKS MORE DEVICES, MOST OF WHICH ARE FAST FOR I O DUNDEE.AC.UK PAGE 9",
  "IO1-10": "OLD VS. NEW DUNDEE.AC.UK PAGE 10",
  "IO1-11": "REMEMBER THE CPU CAN ONLY READ MANIPULATE DATA IN MAIN MEMORY. WHERE DATA IS IN AN EXTERNAL FILE E.G. ON A NETWORK OR ON A HARD DISK IT MUST FIRST BE READ INTO MEMORY AN I O PROCESS TO ENABLE A PROCESS TO THEN READ IT. THUS DATA ON A DISK IS HANDLED IN A FUNDAMENTALLY DIFFERENT WAY FROM THE SAME DATA RESIDING IN MEMORY. INCLUDES SSDS ALTHOUGH MADE OF MEMORY CHIPS LIKE MAIN MEMORY THEY ARE ACCESSED VIA I O LIKE HARD DISKS AND SO SHOULD BE CONSIDERED THAT WAY DUNDEE.AC.UK PAGE 11",
  "IO1-12": "I O ISSUES PERIPHERAL DEVICES DIFFER GREATLY IN MANY ASPECTS INCLUDING DATA RATE UNIT OF TRANSFER HOW DATA IS REPRESENTED ENCODED THE TYPES OF ERRORS THAT CAN OCCUR CONSEQUENTLY, WE CAN T JUST ATTACH THEM STRAIGHT TO THE SYSTEM BUS - THE I O DEVICES MUST INTERFACE BETWEEN THE COMPUTER AND THE OUTSIDE WORLD DUNDEE.AC.UK PAGE 12",
  "IO1-13": "INTERFACING I O DEVICES PERIPHERALS HARD DISK BEHAVES LIKE THE PERIPHERAL I O CHIP I O CHIP I O CHIP BEHAVES LIKE MEMORY SYSTEM BUS CPU DUNDEE.AC.UK MEMORY THIS IS A VERY SIMPLE I O SCHEME PAGE 13",
  "IO1-14": "DATA TRANSFER THE AMOUNT OF DATA IN MOST I O TRANSFERS WILL BE MUCH BIGGER THAN THE SIZE OF THE DATA REGISTER ON THE INTERFACING I O CHIP. HENCE, I O TRANSFER IS DONE IN CHUNKS - EACH CHUNK IS THE SIZE OF THE DATA REGISTER DATA BUS WIDTH USUALLY . THIS CAUSES A PROBLEM - CPU IS MUCH FASTER THAN MOST I O TRANSFERS, SO THE I O CANNOT RECEIVE OR SEND DATA NEARLY AS FAST AS THE CPU. SO, THE CPU MUST BE DESYNCHRONISED FROM THE I O DEVICE IN SOME EFFICIENT WAY. DUNDEE.AC.UK PAGE 14",
  "IO1-15": "INTERFACING CONSIDERATIONS FOR OUTPUT THE CPU SHOULD ONLY PLACE NEW DATA IN THE DATA OUT REGISTER OF THE I O CHIP WHEN THE I O DEVICE IS READY I.E. HAS FINISHED SENDING THE PREVIOUS DATA ITEM FOR INPUT THE CPU SHOULD ONLY ATTEMPT TO READ DATA FROM THE DATA IN REGISTER OF THE I O CHIP WHEN NEW DATA HAS BEEN COMPLETELY RECEIVED ERROR-FREE FROM THE PERIPHERAL DUNDEE.AC.UK PAGE 15",
  "IO1-16": "IMPLEMENTING I O THERE ARE THREE MAIN WAYS IN WHICH I O CAN BE PERFORMED POLLING ALSO KNOWN AS PROGRAMMED I O PERFORMED ENTIRELY BY SOFTWARE INTERRUPT-DRIVEN I O REQUIRES HARDWARE SUPPORT, AVAILABLE IN ALL MICROPROCESSORS DIRECT MEMORY ACCESS DMA REQUIRES HARDWARE SUPPORT, BECAME AVAILABLE IN THE 1980S WE WILL EXAMINE EACH OF THESE IN DETAIL. DUNDEE.AC.UK PAGE 16",
  "IO1-17": "POLLING DUNDEE.AC.UK PAGE 17",
  "IO1-18": "POLLING - INPUTTING OF DATA BEGIN POLLING LOOP CHECK STATUS REGISTER TO SEE IF PERIPHERAL HAS SENT DATA SENT NOT SENT READ IN DATA FROM DATA REGISTER DUNDEE.AC.UK PAGE 18",
  "IO1-19": "POLLING EXAMPLE OUTPUT TO A SLOW PRINTER WHOSE DATA REGISTER CAN HOLD ONE ASCII CHARACTER WE WANT TO PRINT THE WORD WORD OUT ON THE PRINTER DUNDEE.AC.UK PAGE 19",
  "IO1-20": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP CPU CHECKS STATUS REGISTER S R PU CHECKS THE I O CHIP S STATUS REGISTER DUNDEE.AC.UK PAGE 20",
  "IO1-21": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU PRINTER READY I O CHIP S R U FINDS THAT THE PRINTER IS READY TO RECEIVE A NEW CHARACTER DUNDEE.AC.UK PAGE 21",
  "IO1-22": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP S R W LETTER TRANSFERRED LETTER W COPIED FROM MEMORY TO A CPU REGISTER THEN TO THE I O CHIP S DATA OUT REGISTER - STATUS REGISTER SET TO NOT READY DUNDEE.AC.UK PAGE 22",
  "IO1-23": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP CPU CHECKS STATUS REGISTER S R W U STARTS POLLING TO CHECK THE I O CHIP S STATUS REGISTER DUNDEE.AC.UK PAGE 23",
  "IO1-24": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP PRINTER NOT READY S R W CPU FINDS I O CHIP IS NOT READY TO RECEIVE A NEW CHARACTER AS IT IS STILL SENDING THE CURRENT CHARACTER TO THE PRINTER DUNDEE.AC.UK PAGE 24",
  "IO1-25": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP CPU CHECKS STATUS REGISTER S R W U POLLS AGAIN TO CHECK THE I O CHIP S STATUS REGISTER DUNDEE.AC.UK PAGE 25",
  "IO1-26": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP PRINTER NOT READY S R W CPU FINDS I O CHIP IS NOT READY TO RECEIVE A NEW CHARACTER AS IT IS STILL SENDING THE CURRENT CHARACTER TO THE PRINTER DUNDEE.AC.UK PAGE 26",
  "IO1-27": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP CPU CHECKS STATUS REGISTER S R W U POLLS AGAIN TO CHECK THE I O CHIP S STATUS REGISTER DUNDEE.AC.UK PAGE 27",
  "IO1-28": "POLLING EXAMPLE WORD PROGRA M IN MEMOR Y CPU I O CHIP PRINTER NOT READY S R W CPU FINDS I O CHIP IS NOT READY TO RECEIVE A NEW CHARACTER AS IT IS STILL SENDING THE CURRENT CHARACTER TO THE PRINTER DUNDEE.AC.UK PAGE 28",
  "IO1-29": "POLLING EXAMPLE W WORD PROGRA M IN MEMOR Y CPU I O CHIP CPU CHECKS STATUS REGISTER S R W U POLLS AGAIN TO CHECK THE I O CHIP S STATUS REGISTER DUNDEE.AC.UK PAGE 29",
  "IO1-30": "POLLING EXAMPLE W WORD PROGRA M IN MEMOR Y CPU PRINTER READY I O CHIP S R W CPU FINDS I O CHIP IS READY TO RECEIVE A NEW CHARACTER TRANSMISSION OF PREVIOUS CHARACTER HAS NOW COMPLETED DUNDEE.AC.UK PAGE 30",
  "IO1-31": "POLLING EXAMPLE W WORD PROGRA M IN MEMOR Y CPU I O CHIP S R W O LETTER TRANSFERRED LETTER O COPIED FROM MEMORY TO A CPU REGISTER THEN TO THE I O CHIP S DATA OUT REGISTER - STATUS REGISTER SET TO NOT READY DUNDEE.AC.UK PAGE 31",
  "IO1-32": "POLLING EXAMPLE THE CPU WOULD THEN ENTER ANOTHER POLLING LOOP TO WAIT UNTIL THE PRINTER HAD PRINTED OUT THE CHARACTER O . THE CPU WOULD CARRY ON IN THIS WAY UNTIL THE ENTIRE WORD HAD BEEN PRINTED OUT. THE CPU IS SO FAST, IT MAY HAVE TO POLL THE STATUS REGISTER HUNDREDS OF TIMES DURING THE WAIT FOR THE SLOW EXTERNAL DATA TRANSFER TO FINISH DUNDEE.AC.UK PAGE 32",
  "IO1-33": "ISSUES WITH POLLING IF THE CPU WANTED TO FOR EXAMPLE OUTPUT TO DISK, OR INPUT FROM THE KEYBOARD AT THE SAME TIME AS PRINTING, IT COULD MISS SOME EVENTS WHILE CHECKING FOR OTHERS. POLLING CAN THUS CAUSE PROBLEMS WHERE MULTIPLE I O CHANNELS ARE AVAILABLE THOUGH BUFFERING THE CHANNELS CAN ALLEVIATE THIS . DUNDEE.AC.UK PAGE 33",
  "IO1-34": "POLLING - ANALYSIS ADVANTAGES NEEDS NO HARDWARE SUPPORT ALL SOFTWARE SIMPLE, EASY TO IMPLEMENT EASY TO DEBUG DISADVANTAGES VERY WASTEFUL OF CPU TIME POSSIBLE PROBLEMS WITH MULTIPLE EVENTS SO, POLLING IS SIMPLE TO SET UP, BUT IT IS NOT SUITABLE FOR SERIOUS I O APPLICATIONS. DUNDEE.AC.UK PAGE 34",
  "IO1-35": "INTERRUPTS DUNDEE.AC.UK PAGE 35",
  "IO1-36": "INTERRUPT-DRIVEN I O AN INTERRUPT IS A SUSPENSION OF A PROCESS CAUSED BY AN EVENT OUTSIDE THE PROCESS. THE SUSPENSION IS PERFORMED IN SUCH A WAY THAT THE PROCESS CAN BE RESUMED AT A LATER TIME TYPICALLY, REGISTERS ARE PUSHED ONTO THE STACK . INTERRUPTS REQUIRE HARDWARE SUPPORT, BUT THIS HAS BEEN INCLUDED SINCE THE EARLY DAYS OF MICROPROCESSORS. DUNDEE.AC.UK PAGE 36",
  "IO1-37": "USING INTERRUPTS THE CPU ISSUES AN I O COMMAND, THEN CONTINUES EXECUTING OTHER INSTRUCTIONS PERHAPS FROM A DIFFERENT PROCESS . LATER, WHEN THE I O DEVICE REQUIRES SERVICING, OR BECOMES READY AGAIN, IT INTERRUPTS THE CPU TO ASK FOR FURTHER PROCESSING. THE CODE SEQUENCE FOR PROCESSING EACH INTERRUPT IS IN A SPECIAL SUBROUTINE CALLED AN INTERRUPT HANDLER OR AN INTERRUPT SERVICE ROUTINE, ACCESSED VIA A STORED ADDRESS LIST RATHER LIKE THE EVENT HANDLERS WE SAW IN THE C SECTION . DUNDEE.AC.UK PAGE 37",
  "IO1-38": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU INTERRUPT LINE I O CHIP IN CONTROL BUS PROCESSOR IS BUSY EXECUTING PROGRAM CODE DUNDEE.AC.UK PAGE 38",
  "IO1-39": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU INTERRUPT SIGNAL I O CHIP H KEY PRESSED, SO I O CHIP SENDS INTERRUPT SIGNAL PROCESSOR STOPS EXECUTING THE PROGRAM, SAVES ITS STATUS AND CONSULTS INTERRUPTS TABLE DUNDEE.AC.UK PAGE 39",
  "IO1-40": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU I O CHIP H INTERRUPTS TABLE GIVES THE ADDRESS OF THE HANDLER FOR THIS INTERRUPT, AND CPU CALLS THE KEYBOARD HANDLER DUNDEE.AC.UK PAGE 40",
  "IO1-41": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU H I O CHIP H CPU EXECUTES KEYBOARD HANDLER CODE, WHICH ACCESSES THE DATA IN REGISTER OF I O CHIP AND COPIES THE KEY PRESS TO A CPU REGISTER DUNDEE.AC.UK PAGE 41",
  "IO1-42": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU H I O CHIP H KEYBOARD HANDLER CODE COPIES CHARACTER FROM CPU REGISTER TO BUFFER IN MAIN MEMORY DUNDEE.AC.UK PAGE 42",
  "IO1-43": "INTERRUPTS EXAMPLE INTERRUPTS TABLE PROGRAM MEMORY KEYBOARD BUFFER KEYBOARD HANDLER CPU I O CHIP INTERRUPT HAS BEEN HANDLED - CPU RESTORES ITS STATUS AND RESUMES EXECUTING THE ORIGINAL PROGRAM WHERE IT LEFT OFF DUNDEE.AC.UK PAGE 43",
  "IO1-44": "MULTIPLE INTERRUPTS IF WE HAVE SEVERAL I O DEVICES ACTIVE, EACH CAN CREATE A UNIQUE INTERRUPT REQUEST, TO BE PROCESSED IN THE SAME WAY. WE CAN ALSO HAVE MULTI-LEVEL INTERRUPTS, SO THAT LOW PRIORITY INTERRUPTS E.G. KEYBOARD CAN THEMSELVES BE INTERRUPTED BY HIGHER PRIORITY INTERRUPTS E.G. DISK DRIVE . PROCESS DISK ACCESS KEY PRESS PROGRAM DUNDEE.AC.UK TIME PAGE 44",
  "IO1-45": "INTERRUPTS - ANALYSIS ADVANTAGES MORE TIME-EFFICIENT THAN POLLING - AVOIDS THE CPU HAVING TO REPEATEDLY LOOP TO TEST THE STATUS REGISTER OF THE DEVICE, SO CPU CAN WORK ON OTHER PROCESSES POWERFUL WAY OF HANDLING MULTIPLE I O DEVICES - CAN HAVE MULTI-LEVEL INTERRUPTS DUNDEE.AC.UK PAGE 45",
  "IO1-46": "INTERRUPTS - ANALYSIS DISADVANTAGES OVERHEAD IN HANDLING THE INTERRUPTS NEED TO SAVE AND RESTORE CPU STATUS - THIS MAY TAKE LONGER THAN HANDLING THE INTERRUPT ITSELF THOUGH NOT A SERIOUS PROBLEM UNLESS THERE ARE A LOT OF INTERRUPTS OCCURRING HARDWARE NEEDED TO SUPPORT INTERRUPTS E.G. INCLUSION OF INTERRUPT LINES ON BUSES DIFFICULT TO DEBUG AN INTERRUPT SCHEME STILL REQUIRES THE ACTIVE INTERVENTION OF THE CPU TO DO THE ACTUAL DATA TRANSFER DUNDEE.AC.UK PAGE 46",
  "IO1-47": "SUMMARY WE HAVE SEEN ANY MICROCOMPUTER REQUIRES I O FACILITIES POLLING IS EASY JUST SOFTWARE , BUT IT IS NOT VERY EFFICIENT OR PRACTICAL INTERRUPTS ARE MORE COMPLEX, BUT MORE EFFICIENT AND ALLOWS SOPHISTICATED I O SCHEMES NEXT MORE ON I O DUNDEE.AC.UK PAGE 47",
  "IO1-48": "DUNDEE.AC.UK",
  "IO2-01": "UNIVERSITY OF THE YEAR FOR STUDENT EXPERIENCE THE TIMES SUNDAY TIMES GOOD UNIVERSITY GUIDE 2020 AC22005 COMPUTER SYSTEMS 2B ADVANCED ARCHITECTURES IMPROVING THE I O PART 2 DUNDEE.AC.UK PAGE 1",
  "IO2-02": "IN THIS VIDEO USING DMA TO PERFORM I O WHAT IS DMA WHY USE IT I O BUFFERING WHY USE IT SINGLE BUFFERING DOUBLE BUFFERING DUNDEE.AC.UK PAGE 2",
  "IO2-03": "SUMMARY OF PREVIOUS VIDEO I O TYPICALLY INVOLVES COPYING LARGE AMOUNTS OF DATA BETWEEN DEVICES, USUALLY THROUGH A NARROW CHANNEL TYPICALLY ONE I O REGISTER . WE RE DOING A LOT MORE I O THAN WE USED TO DUE TO HARD DISKS, NETWORKS, GRAPHICS CARDS, HI-RES PRINTERS ETC. ETC. AND I O REQUESTS ARE HAPPENING A LOT MORE FREQUENTLY THE CPU FAST MUST SYNCHRONISE WITH THE I O DEVICES SLOW IN COMPARISON THIS MUST BE DONE CLEVERLY, OTHERWISE ALL THE I O ACTIVITY WILL SLOW DOWN THE WHOLE SYSTEM DUNDEE.AC.UK PAGE 3",
  "IO2-04": "SUMMARY OF PREVIOUS VIDEO THREE MAIN TECHNIQUES POLLING CONSTANT LOOPING TO CHECK STATUS SIMPLEST METHOD, ERROR PRONE, INEFFICIENT INTERRUPT-DRIVEN I O CPU INTERRUPTED WHEN I O ACTIVITY OCCURS BETTER, BUT COMPLEX HARDER TO IMPLEMENT DIRECT MEMORY ACCESS TO COME DUNDEE.AC.UK PAGE 4",
  "IO2-05": "MAIN PROBLEMS POLLING CONTINUAL USE OF CPU INEFFICIENT INTERRUPTS ONLY USES CPU WHEN REQUIRED, BUT CPU IS STILL INVOLVED IN TRANSFERRING THE DATA FROM I O TO MEMORY OR VICE VERSA AND THERE IS A PROCESSING OVERHEAD WHEN PERFORMING EACH INTERRUPT - BETTER, BUT NOT IDEAL FOR LARGE TRANSFERS WHICH WOULD GENERATE MANY INTERRUPTS DUNDEE.AC.UK PAGE 5",
  "IO2-06": "WHAT WE RE TRYING TO DO WORD MEMOR Y CPU I O CHIP DATA DUNDEE.AC.UK PAGE 6",
  "IO2-07": "WHAT INTERRUPTS ACTUALLY DO WORD MEMOR Y CPU HANDLER CODE DATA I O CHIP DATA PLUS THERE IS THE OVERHEAD OF SAVING WHAT THE CPU WAS DOING WHEN THE INTERRUPT OCCURRED, AND RESTORING IT AFTERWARDS FOR EVERY INTERRUPT DUNDEE.AC.UK PAGE 7",
  "IO2-08": "TRANSFER LOOP CONSIDER A STANDARD INTERRUPT-BASED TRANSFER WAIT BTST 0,STATUS BNE WAIT DATA OK MOVE.B A0 ,D0 MOVE.B D0,OUT REG DBNE D1,WAIT 3 BUS CYCLES 2 BUS CYCLES 2 BUS CYCLES 2 BUS CYCLES 1 BUS CYCLE YET ALL WE REALLY NEED IS ONE READ CYCLE FROM THE MEMORY AND ONE WRITE CYCLE TO THE I O 80 OF THE TIME IS SPENT LOADING AND RUNNING THE MACHINE CODE TO MOVE THE DATA DUNDEE.AC.UK PAGE 8",
  "IO2-09": "INTERRUPTS - ANALYSIS INTERRUPTS ARE USEFUL FOR EVENTS WHICH ARE RELATIVELY INFREQUENT HANDLER OVERHEAD IS MANAGEABLE HANDLING EVENTS FROM DIFFERENT DEVICES INTERRUPTS BREAK DOWN WHEN I O EVENTS OCCUR VERY FREQUENTLY THE OVERHEAD OF HANDLING EACH EVENT I O BECOMES OVERWHELMING SO, A DIFFERENT TECHNIQUE IS NEEDED WHEN A LOT OF I O EVENTS NEED TO BE HANDLED. DUNDEE.AC.UK PAGE 9",
  "IO2-10": "DIRECT MEMORY ACCESS DUNDEE.AC.UK PAGE 10",
  "IO2-11": "DIRECT MEMORY ACCESS DIRECT MEMORY ACCESS DMA INVOLVES AN ADDITIONAL DEVICE ON THE BUSES THAT IS CAPABLE OF TAKING OVER FROM THE CPU FOR I O PURPOSES DMA DEVICES ARE ESSENTIALLY SINGLE-PURPOSE PROCESSORS - THEY CAN ACCESS THE BUSES LIKE A CPU, BUT THEY DON T DO ANY PROCESSING THEY CAN PERFORM READS WRITES ONLY USUALLY SINGLE CHIP DEVICES THAT ARE NOT PROGRAMMABLE OTHER THAN FOR I O MUCH SIMPLER CHEAPER THAN CONTEMPORARY GENERAL PURPOSE CPUS DUNDEE.AC.UK PAGE 11",
  "IO2-12": "DIRECT MEMORY ACCESS WHEN THE CPU WISHES TO READ OR WRITE A BLOCK OF DATA I O OPERATION DELEGATED TO THE DMA DEVICE DMA IS INITIALISED WITH DETAILS OF THE TRANSFER DMA DEVICE MOVES DATA DIRECTLY TO OR FROM MEMORY ONE READ WRITE , WITHOUT GOING THROUGH THE CPU AND NO MACHINE CODE NEEDS TO BE RUN TO DO THE TRANSFER THE CPU CAN CONTINUE WITH OTHER PROCESSES WHEN TRANSFER IS COMPLETE, CPU IS INTERRUPTED BY THE DMA DEVICE TO CLOSE OFF THE TRANSFER DUNDEE.AC.UK PAGE 12",
  "IO2-13": "DELEGATING TO THE DMA THE CPU DELEGATES TO THE DMA MODULE BY SENDING THE FOLLOWING INFORMATION WHETHER A WRITE OR A READ IS REQUIRED THE STARTING LOCATION IN MEMORY TO WRITE TO OR TO READ FROM THE AMOUNT OF DATA TO BE WRITTEN OR READ THE ADDRESS OF THE I O DEVICE INVOLVED DUNDEE.AC.UK PAGE 13",
  "IO2-14": "WHAT DMA DOES CPU PLEASE MOVE 4096 BYTES, STARTING AT ADDRESS 3000, TO ADDRESS 6034 I LL CARRY ON DOING SOME PROCESSING DMA AYE, NO PROBLEM, I LL SEND YOU AN INTERRUPT WHEN I VE FINISHED DUNDEE.AC.UK PAGE 14",
  "IO2-15": "WHAT DMA DOES WORD DMA MEMOR Y INITIALISE I O CHIP DATA DATA DMA CONTINUES TO TRANSFER DATA WITH NO CPU INVOLVEMENT UNTIL THE TRANSFER HAS BEEN COMPLETED DUNDEE.AC.UK PAGE 15",
  "IO2-16": "CYCLE STEALING TO TRANSFER DATA DIRECTLY TO OR FROM MEMORY, WITHOUT REQUIRING THE CPU, THE DMA MODULE MUST GAIN CONTROL OF THE SYSTEM BUS EVERY SO OFTEN - THIS IS CALLED CYCLE STEALING BECAUSE IT S AT THE EXPENSE OF THE CPU S FETCH-EXECUTE CYCLE THE DMA MODULE IS GIVEN A HIGHER PRIORITY FOR TAKING CONTROL OF THE BUS THAN THE CPU DURING THE STOLEN CYCLE, THE DMA MODULE TRANSFERS ONE WORD OF DATA TO FROM MEMORY DUNDEE.AC.UK PAGE 16",
  "IO2-17": "CYCLE STEALING CYCLE STEALING WOULD SUGGEST A DRAMATIC IMPACT ON THE CPU S PERFORMANCE, SINCE BOTH MUST ACCESS MEMORY VIA THE SAME BUSES THERE IS AN EFFECT, BUT IT IS MINOR - THE CPU WILL GET MOST OF WHAT IT NEEDS FROM ITS OWN MEMORY CACHES, AND HENCE IT DOESN T ACTUALLY USE THE SYSTEM BUS VERY MUCH THUS FOR MOST STOLEN CYCLES, THE CPU WOULDN T WANT THE SYSTEM BUS ANYWAY A DMA TRANSFER IS FASTER THAN CPU INTERRUPTS METHOD EVEN IF THE CPU WAS IDLE AT THE TIME DUNDEE.AC.UK PAGE 17",
  "IO2-18": "DMA ANALYSIS ADVANTAGES VERY EFFICIENT FOR TRANSFERRING A LARGE BLOCK OF DATA TO OR FROM MEMORY THE CPU S TIME IS NOT WASTED - IT IS ONLY INVOLVED AT THE BEGINNING AND END OF TRANSFER DISADVANTAGES ADDITIONAL HARDWARE CHIPS ETC. ARE REQUIRED NOT EFFICIENT WHEN TRANSFERRING ONLY A FEW BYTES OF DATA STILL USE INTERRUPTS FOR THAT ADVANTAGES ARE SO SIGNIFICANT THAT DMA HARDWARE HAS BEEN INCORPORATED INTO MOST PCS SINCE THE MID-1980S DUNDEE.AC.UK PAGE 18",
  "IO2-19": "SUMMARY OF I O SO FAR THE GENERAL PRINCIPLES OF I O DEVICES CPU IS MUCH FASTER THAN I O DEVICES, SO MUST SYNCHRONISE EFFICIENTLY WITH THE I O DEVICE USE DATA REGISTER FOR I O, MONITOR STATUS REGISTER FOR STATUS OF I O CHIP I O TECHNIQUES - POLLING, INTERRUPTS, DMA SEEN WHAT THEY ARE DISCUSSED ADVANTAGES AND DISADVANTAGES OF EACH, AND WHEN YOU WOULD USE THEM DUNDEE.AC.UK PAGE 19",
  "IO2-20": "I O BUFFERING INCREASING SYSTEM SPEED BY OVERLAPPING I O AND PROCESSING DUNDEE.AC.UK PAGE 20",
  "IO2-21": "I O BUFFERING - CONCEPT MOST PROCESSES REQUIRE A COMBINATION OF COMPUTATION PROCESSOR TIME AND I O LOADING DATA FOR COMPUTATION, OR SAVING RESULTS . IN A MULTI-PROCESS SYSTEM, IF A PROCESS IS BLOCKED AWAITING I O, THE OS CAN SIMPLY GIVE OVER MORE TIME TO OTHER PROCESSES. THIS MEANS THAT BOTH THE CPU AND I O ARE MORE FULLY UTILISED, NOT NEEDING TO WAIT FOR THE OTHER ONE - MORE ON THIS IN THE OS SECTION OF THE MODULE. DUNDEE.AC.UK PAGE 21",
  "IO2-22": "I O BUFFERING - CONCEPT I O BUFFERING IS A METHOD OF PERFORMING THE I O OF A GIVEN PROCESS AT THE SAME TIME AS THE COMPUTATIONS DONE BY THAT PROCESS. THIS HAS THE DOUBLE BENEFIT OF PERFORMING THESE TASKS IN PARALLEL FASTER , AND OF SMOOTHING OUT FLUCTUATIONS IN I O DEMAND BETTER UTILISATION OF BOTH THE CPU AND I O SYSTEM . FOR INPUT, AFTER THE PROCESS HAS OBTAINED SOME DATA AND IS STARTING TO DO SOME CALCULATIONS ON THE DATA, THE CPU ARRANGES FOR THE NEXT SECTION OF DATA TO BE TRANSFERRED. DUNDEE.AC.UK PAGE 22",
  "IO2-23": "HOW DOES IT WORK THE OPERATING SYSTEM SETS ASIDE A SECTION OF MAIN MEMORY, KNOWN AS A BUFFER. DURING AN I O TRANSFER, DATA CAN BE TEMPORARILY STORED IN THE BUFFER, BEFORE PROCEEDING TO ITS FINAL DESTINATION. FOR INPUT, AFTER THE PROCESS GETS THE DATA FROM THE BUFFER AND STARTS PROCESSING IT, THE I O DEVICE CAN START FILLING IT AGAIN STRAIGHT AWAY FROM THE NEXT DATA BLOCK AS THIS IS A MEMORYTO-MEMORY TRANSFER - CALLED READING AHEAD . DUNDEE.AC.UK PAGE 23",
  "IO2-24": "SINGLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM BLOCK 1 BUFFER PROCESS BLOCK 1 DUNDEE.AC.UK I O DEVICE S-L-O-W BLOCK 1 FAST PROCESS CALCULATIONS CAN START USING BLOCK 1 PAGE 24",
  "IO2-25": "SINGLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM 2 BLOCK 1 PROCESS DUNDEE.AC.UK BLOCK 2 BLOCK 1 I O DEVICE WHILE CALCULATIONS ON BLOCK 1 CONTINUE, WE READ BLOCK 2 INTO BUFFER PAGE 25",
  "IO2-26": "SINGLE BUFFER INPUT EXAMPLE MAIN MEMORY I O DEVICE OPERATING SYSTEM BLOCK 2 PROCESS 1 BLOCK 2 DUNDEE.AC.UK FAST CALCULATIONS ON BLOCK 2 IS TRANSFERRED BLOCK BLOCK 1CONTINUE FINISH FOR USE1IMMEDIATELY PAGE 26",
  "IO2-27": "SINGLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM BLOCK 3 2 PROCESS DUNDEE.AC.UK BLOCK 3 BLOCK 2 I O DEVICE WHILE CALCULATIONS ON BLOCK 2 START, WE READ BLOCK 3, AND SO ON PAGE 27",
  "IO2-28": "OUTPUT BUFFERING THE OUTPUT CASE IS SIMILAR DUNDEE.AC.UK PAGE 28",
  "IO2-29": "THE EFFECT OF I O BUFFERING IN BOTH CASES, WE ATTEMPT TO KEEP BOTH THE CPU AND THE I O DEVICE WORKING TO FULL CAPACITY. AS I O AND PROCESSING ARE DONE AT THE SAME TIME, THERE IS LESS WAITING DONE BY EITHER THE PROCESS OR THE I O DEVICE. THE USE OF BUFFERS ALLOWS EITHER THE PROCESS OR THE I O DEVICE TO RUN AHEAD OF THE OTHER SLIGHTLY, DEPENDING ON THE NUMBER AND SIZE OF THE BUFFERS, HELPING TO SMOOTH OUT THE FLUCTUATIONS IN I O DEMAND. DUNDEE.AC.UK PAGE 29",
  "IO2-30": "EXAMPLE SUPPOSE WE HAVE A PROCESS THAT WILL READ 3 BLOCKS OF DATA FROM HARD DISK, AND DO SOME CALCULATIONS USING EACH BLOCK. READING A BLOCK FROM DISK TAKES T UNITS OF TIME. THE CALCULATIONS WHICH THE PROCESS DOES ON EACH BLOCK TAKES C UNITS, AND THE PROCESS TAKES M UNITS TO READ A BLOCK FROM THE BUFFER. ASSUME T IS TWICE AS LARGE AS C, AND THAT M IS VERY SMALL. DUNDEE.AC.UK PAGE 30",
  "IO2-31": "EXAMPLE CONTINUED COMPUTE THE TOTAL TIME TAKEN TO COMPLETE THIS TASK WHEN NO BUFFERING IS USED A SINGLE BUFFER IS USED DUNDEE.AC.UK PAGE 31",
  "IO2-32": "ANSWER - NO BUFFER NO BUFFERING TOTAL TIME TAKEN IS 3T 3C 9C UNITS BLOCK 3 T 2 1 T T C C C TIME DUNDEE.AC.UK PAGE 32",
  "IO2-33": "ANSWER - SINGLE BUFFER SINGLE BUFFERING TOTAL TIME TAKEN IS 3T 3M C 7C UNITS FASTER, SINCE 3M IS MUCH SMALLER BLOCKTHAN 2C 3 T 2 1 T T M M M C C C TIME DUNDEE.AC.UK PAGE 33",
  "IO2-34": "DOUBLE BUFFERING DOUBLE BUFFERING USES TWO BUFFERS PER DATA TRANSFER. THE READ-FROM BUFFER AND THE FILL BUFFER OPERATIONS SWITCH BETWEEN THE TWO BUFFERS ALTERNATELY. THIS TECHNIQUE IS BETTER THAN A SINGLE BUFFER FOR BLOCK-ORIENTED DATA TRANSFER E.G. FROM HARD DISK OR OTHER SECONDARY STORAGE DEVICE. DUNDEE.AC.UK PAGE 34",
  "IO2-35": "DOUBLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM BLOCK 2 BLOCK 1 BUFFERS PROCESS DUNDEE.AC.UK BLOCK 2 BLOCK 1 BLOCK 1 I O DEVICE PROCESS CALCULATIONS CAN START USING BLOCK 1 WHILE BLOCK 2 IS READ IN PAGE 35",
  "IO2-36": "DOUBLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM BLOCK 2 1 BLOCK 3 PROCESS DUNDEE.AC.UK BLOCK 3 1 BLOCK 2 I O DEVICE BLOCKCALCULATIONS 2 IS TRANSFERRED ON FOR USE IMMEDIATELY BLOCK 1 FINISH AND WE START READING BLOCK 3 PAGE 36",
  "IO2-37": "DOUBLE BUFFER INPUT EXAMPLE MAIN MEMORY OPERATING SYSTEM I O DEVICE BLOCK 2 BLOCK 3 PROCESS BLOCK 2 DUNDEE.AC.UK PROCESS CALCULATIONS CONTINUE ON BLOCK 2 BLOCK 3 IS READY FOR USE PAGE 37",
  "IO2-38": "EXAMPLE COMPUTE THE TOTAL TIME TAKEN TO COMPLETE THIS TASK WHEN A DOUBLE BUFFER IS USED DUNDEE.AC.UK PAGE 38",
  "IO2-39": "ANSWER - DOUBLE BUFFER DOUBLE BUFFERING TOTAL TIME TAKEN IS 3T M C 7C UNITS FASTEST, THOUGH ONLY 2M FASTER THAN BLOCKSINGLE 3 T 2 1 T T M M M C C C TIME DUNDEE.AC.UK PAGE 39",
  "IO2-40": "EXERCISE NOW ASSUME C IS TWICE AS LARGE AS T AND M REMAINS VERY SMALL . COMPUTE THE TOTAL TIME TAKEN TO COMPLETE THE PREVIOUS TASK WHEN NO BUFFERING IS USED A SINGLE BUFFER IS USED A DOUBLE BUFFER IS USED REPEAT, ASSUMING A DATA WRITE OF DURATION T IS NEEDED FOLLOWING THE CALCULATION ON EACH BLOCK. REMEMBER THAT ONLY ONE READ OR ONE WRITE CAN HAPPEN AT ANY ONE TIME. DUNDEE.AC.UK PAGE 40",
  "IO2-41": "REALITY CHECK HARD DISKS CAN PERFORM A READ PROCESS AND A WRITE PROCESS APPARENTLY SIMULTANEOUSLY. IN REALITY, JUMPING TO AND FRO BETWEEN MULTIPLE PROCESSES WILL INCREASE THE OVERALL TIME TO DO THE TWO PROCESSES DUE TO HEAD TRANSIT TIMES BETWEEN THE SECTORS BEING READ WRITTEN TO . HENCE, FOR BUFFERING CALCULATIONS, WE ASSUME THAT READS AND WRITES CANNOT OVERLAP. THE SITUATION IS MUCH BETTER WITH SSDS, AS THERE IS NO PHYSICAL MOVEMENT REQUIRED MORE ON THIS IN THE OS SECTION DUNDEE.AC.UK PAGE 41",
  "IO2-42": "REALITY CHECK NOTE THAT THESE EXAMPLES ARE FOR IDEAL PROCESSES SEEN IN ISOLATION IN REALITY A PROCESS MAY HAVE DIFFERENT PROCESSING TO PERFORM ON EACH BLOCK THE OS WILL BE RUNNING MANY PROCESSES, SO THE ACTUAL TIME TO COMPLETE A PARTICULAR PROCESS MAY VARY DUE TO VARYING PROCESS LOADS ON BOTH THE OS AND THE I O SYSTEM DUNDEE.AC.UK PAGE 42",
  "IO2-43": "REALITY CHECK WHY IS THE TRANSFER RATE NOT CONSTANT DUNDEE.AC.UK PAGE 43",
  "IO2-44": "SUMMARY WE HAVE SEEN DMA IS A VERY EFFICIENT WAY OF TRANSFERRING LARGE BLOCKS OF I O DATA BUT NEEDS HARDWARE I O BUFFERING ALLOWS I O TRANSFERS TYPICALLY DMA-BASED AND CPU COMPUTATIONS TO OCCUR AT THE SAME TIME NEXT BUS ARCHITECTURES DUNDEE.AC.UK PAGE 44",
  "IO2-45": "DUNDEE.AC.UK",
  "mutex-01": "OPERATING SYSTEMS CONCURRENCY RACE CONDITION MUTUAL EXCLUSION D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE ADDITIONAL MATERIAL AND PRESENTED BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "mutex-02": "OPERATING SYSTEMS WHAT IS CONCURRENCY 1. MANY INDEPENDENT PROCESSES UNKNOWINGLY SHARING RESOURCES 2. SEVERAL PROCESSES CO-OPERATING AND POTENTIALLY SHARING RESOURCES 3. A SINGLE PROCESS WITH A MULTI-THREADED PROGRAM 4. ANY COMBINATION OF THE ABOVE ON A MULTI-TASKING SYSTEM WITH ONE OR MORE PROCESSORS OR IN A DISTRIBUTED SYSTEM. AC22005 2",
  "mutex-03": "OPERATING SYSTEMS PROBLEMS WITH CONCURRENCY CONCURRENCY BRINGS ITS OWN PROBLEM, SOME VERY NASTY AND TROUBLESOME ONES RACE CONDITIONS DEADLOCK STARVATION THESE ALL RESULT FROM 2 OR MORE PROCESSES TRYING TO SHARE RESOURCES ON A NON-SYNCHRONISED OR BADLY CONTROLLED BASIS. AC22005 3",
  "mutex-04": "OPERATING SYSTEMS SYNCHRONISATION OFTEN NEED TO SYNCHRONISE PROCESSES. FORCE ONE OR MORE PROCESSES THREADS TO WAIT UNTIL ANOTHER ONE HAS COMPLETED A VITAL TASK, E.G. WAIT FOR THE WI-FI TO BE CONNECTED BEFORE LETTING THE BROWSER GRAB PAGES FROM INTERNET HEAT UP A PRINTER ELEMENT BEFORE IT TRIES TO PRINT ON HEAT SENSITIVE PAPER, ETC. WE NEED PROCESSES TO TALK TO EACH OTHER AC22005 4",
  "mutex-05": "OPERATING SYSTEMS SIGNALLING PROCESSES CAN TALK TO EACH OTHER WITH BASIC SIGNALS E.G. SEMAPHORES , OR USE MESSAGES MESSAGE PASSING PROTOCOLS EXIST FOR THIS PURPOSE IMPORTANT THING IS THAT PROCESSES CAN DECIDE TOGETHER OF A SEQUENCE WHERE THINGS HAPPEN AC22005 5",
  "mutex-06": "OPERATING SYSTEMS RACE CONDITION WHENEVER TWO OR MORE PROCESSES MANIPULATE A COMMON GLOBAL RESOURCE IN SUCH A WAY THAT IT IS POSSIBLE FOR AN INCORRECT RESULT STATE TO BE PRODUCED DUE TO THE ORDER OF THE OPERATIONS. AC22005 6",
  "mutex-07": "OPERATING SYSTEMS EXAMPLE WHAT WE WANT IF TWO SEPARATE THREADS BOTH EXECUTE THE FOLLOWING PIECE OF CODE MANIPULATING THE SAME GLOBAL VARIABLE OF THE PROCESS LOCAL COPY GLOBAL VARIABLE LOCAL COPY LOCAL COPY 1 GLOBAL VARIABLE LOCAL COPY WHAT WOULD THE EXPECTED FINAL RESULT BE EACH THREAD INCREASE THE GLOBAL VARIABLE BY ONE, THUS WITH 2 THREADS THE GLOBAL VARIABLE SHOULD BE INCREASED BY 2. AC22005 7",
  "mutex-08": "OPERATING SYSTEMS EXAMPLE WHAT WE CAN GET IF TWO SEPARATE THREADS BOTH EXECUTE THE FOLLOWING PIECE OF CODE MANIPULATING THE SAME GLOBAL VARIABLE OF THE PROCESS LOCAL COPY GLOBAL VARIABLE LOCAL COPY LOCAL COPY 1 GLOBAL VARIABLE LOCAL COPY WHAT ARE THE POSSIBLE RESULTS 1. 2. 3. AC22005 GLOBAL VARIABLE INCREMENTED BY 2 GLOBAL VARIABLE INCREMENTED BY 1 GLOBAL VARIABLE UNCHANGED MOST OF THE TIME SOMETIME SHOULD NEVER HAPPEN 8",
  "mutex-09": "OPERATING SYSTEMS ANOTHER EXAMPLE DEPOSIT 100 INTO CASH MACHINE IN GLASGOW. BANK COMPUTER ADDS 100 TO YOUR ACCOUNT. WITHDRAW 50 FROM CASH MACHINE IN DUNDEE AT THE SAME TIME. BANK COMPUTER SUBTRACTS 50 FROM YOUR ACCOUNT. YOUR ACCOUNT IS 50 UP AFTER THESE EVENTS ... ... WHICH IS WHAT YOU WANT. AC22005 9",
  "mutex-10": "OPERATING SYSTEMS BUT JUST SUPPOSE .... CASH MACHINE IN GLASGOW READS YOUR ACCOUNT TOTAL FROM YOUR BANK INTO LOCAL VARIABLE TOTAL1... ... AND ADDS 100 TO TOTAL1. CASH MACHINE IN DUNDEE READS YOUR ACCOUNT TOTAL FROM YOUR BANK INTO LOCAL VARIABLE TOTAL2 ... ... AND SUBTRACTS 50 FROM TOTAL2. CASH MACHINE IN GLASGOW WRITES TOTAL1 INTO YOUR BANK ACCOUNT TOTAL. CASH MACHINE IN DUNDEE WRITES TOTAL2 INTO YOUR BANK ACCOUNT TOTAL SLIGHTLY AFTER. YOU LOSE 100 DUE TO A RACE CONDITION. AC22005 10",
  "mutex-11": "OPERATING SYSTEMS CRITICAL SECTION OF CODE I WE CALL A CRITICAL SECTION ANY PIECE OF CODE THAT HAS TO BE EXECUTED UNDER THE ASSUMPTION THAT NO OTHER PROCESS IS EXECUTING A SIMILAR, RELATED PIECE OF CODE. EXECUTION OF SUCH A PIECE OF CODE MUST BE MUTUALLY EXCLUSIVE TO THE EXECUTION OF ANY OTHER SUCH CRITICAL PIECE OF CODE ANYWHERE ELSE INCLUDING OTHER PROCESSES . AC22005 11",
  "mutex-12": "OPERATING SYSTEMS CRITICAL SECTION OF CODE II OFTEN SEVERAL PROCESSES WILL NEED TO EXECUTE THE FOLLOWING TYPE OF CODE REPEAT DO SOMETHING ENTER CRITICAL SECTION DO SOMETHING CRITICAL DANGER POINT EXIT CRITICAL SECTION DO SOMETHING ELSE FOREVER HOW CAN WE IMPLEMENT ENTRY EXIT GUARDS AC22005 12",
  "mutex-13": "OPERATING SYSTEMS REQUIREMENTS OF MUTUAL EXCLUSION 1. MUST ALLOW ONLY ONE PROCESS INTO A CRITICAL SECTION OF PROGRAM CODE AT ANY ONE TIME. 2. A PROCESS HALTING IN NON-CRITICAL CODE MUST DO SO WITHOUT INTERFERING WITH ANY OTHER PROCESS. 3. PROCESS MUST EVENTUALLY BE ALLOWED INTO ITS CRITICAL SECTION. NO DEADLOCK OR STARVATION. 4. FIRST COME IMMEDIATELY SERVED NO DELAY. 5. NO ASSUMPTION ABOUT SPEED OR QUANTITY NUMBER OF PROCESSES INVOLVED COULD BE LOTS OF THEM . 6. CRITICAL SECTIONS MUST HAVE FINITE DURATION. AC22005 13",
  "mutex-14": "OPERATING SYSTEMS INTERRUPT-ORIENTED SOLUTION REPEAT DO SOMETHING DISABLE INTERRUPTS STOP INTERRUPT SERVICE. DO SOMETHING CRITICAL DO CRITICAL CODE. ENABLE INTERRUPTS ALLOW INTERRUPT SERVICE. DO SOMETHING ELSE FOREVER AC22005 14",
  "mutex-15": "OPERATING SYSTEMS SPECIAL MACHINE INSTRUCTIONS MOST MODERN CPUS HAVE SPECIAL MACHINE CODE INSTRUCTIONS TO ASSIST WITH MUTUAL EXCLUSION. A SET OF MACHINE CODE INSTRUCTION IS AN ATOMIC ACTION IF IT CANNOT BE SUB-DIVIDED OR PRE-EMPTED. RAM IS SO ORGANISED THAT ONLY ONE CPU CAN MANIPULATE A PARTICULAR MEMORY LOCATION AT ANY ONE TIME. SO SEQUENTIAL ACCESS IS GUARANTEED. AC22005 15",
  "mutex-16": "OPERATING SYSTEMS MUTEX AT OS LEVEL LET S ASSUME YOU HAVE A BOOLEAN VARIABLE IN KERNEL PROTECTED SPACE. HOW TO USE IT TO ACHIEVE MUTUAL EXCLUSION IF BOOLEAN VARIABLE IS 1, PROCESS MUST NOT PROCEED INTO CRITICAL SECTION - BLOCK PROCESS, OR AVOID CRITICAL SECTION IF IT IS OPTIONAL IF BOOLEAN VARIABLE IS 0, SET IT TO 1 AND ALLOW PROCESS TO PROCEED INTO THE CRITICAL SECTION AFTER THE CRITICAL SECTION HAS BEEN EXECUTED, RESET THE BOOLEAN VARIABLE TO 0. AC22005 16",
  "mutex-17": "OPERATING SYSTEMS CONCLUSION WE HAVE DEFINED WHAT A RACE CONDITION IS AND SEEN WHAT IT CAN LOOK LIKE WE SAW THAT TO PREVENT IT, PROCESSES MUST SYNCHRONIZE THEIR ACCESS TO SHARED RESOURCES WE PRESENTED MUTEX, A SIMPLE SERVICE THAT THE OS CAN PROVIDE TO ACHIEVE SUCH SYNCHRONIZATION AC22005 17",
  "priority-01": "OPERATING SYSTEMS PROCESS PRIORITY D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE PRESENTATION BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "priority-02": "OPERATING SYSTEMS PRIORITY PROCESSES CAN HAVE DIFFERENT PRIORITY HIGH PRIORITY PROCESSES THREADS INTERACTIVE INPUT OUTPUT I O . USER INTERFACE THE USER EXPERIENCE MUST COME FIRST. URGENT AND IMPORTANT MUST HAPPEN QUICKLY. MEDIUM PRIORITY PROCESSES THREADS DISC ACCESS FOR PERIODIC DATA SAVING E.G. WORD . LESS IMPORTANT URGENT THAN USER INTERFACE USER EXPERIENCE. LOW PRIORITY PROCESSES THREADS BACKGROUND PROCESS, E.G. DATA PROCESSING , VIRUS SCANNING. CAN RUN SLOWLY OVER A LONG PERIOD OF TIME BUT SHOULD NOT INTRUDE ON THE USER EXPERIENCE. AC22005 2",
  "priority-03": "OPERATING SYSTEMS PRIORITY PROCESSES OF DIFFERENT PRIORITY TIME-OUT HIGH PRIORITY Q ADMIT DISPATCH MEDIUM PRIORITY Q CPU EXIT LOW PRIORITY Q READY QUEUES CAN HAVE MORE THAN ONE READY QUEUE HAVE AS MANY READY QUEUES AS SEPARATE PRIORITY LEVELS WHICH ARE NEEDED. AC22005 3",
  "priority-04": "OPERATING SYSTEMS PRIORITY A POLICY IS NEEDED SCHEDULING ALGORITHM WILL NEED TO HAVE A POLICY TO DECIDE WHICH QUEUE GET ACCESS TO CPU NEXT. SOME EXAMPLES ARE TAKE ALL PROCESSES FROM HIGH PRIORITY Q TILL EMPTY, THEN EMPTY THE MEDIUM Q, THEN EMPTY THE LOW PRIORITY Q DANGER THAT MEDIUM AND LOW PROCESSES WILL STARVE. TAKE 3 PROCESSES FROM HIGH, 2 FROM MEDIUM, 1 FROM LOW GIVES MEDIUM AND LOW A GOOD SHARE OF THE ACTION. TAKE 7 PROCESSES FROM HIGH, 3 FROM MEDIUM, 1 FROM LOW. GIVES MEDIUM AND LOW SOME ACTION, HIGH GETS THE MOST. ETC. AC22005 4",
  "priority-05": "OPERATING SYSTEMS PRIORITY QUEUES ONCE PRE-EMPTED, A PROCESS THREAD CAN RETURN TO ITS USUAL READY Q. SO A PROCESS OR THREAD LEAVING THE PROCESSOR CAN FOLLOW THE PRE-EMPTION PATH BACK TO THE QS, BUT BE PLACED ON A DIFFERENT Q THAN THE ONE IT CAME FROM. THIS ARRANGEMENT ALSO ALLOWS FOR PROCESSES THREADS TO MIGRATE TO OTHER READY QS, I.E. THEIR PRIORITY CAN CHANGE IF O.S. WANTS IT TO CHANGE. IT THUS HAS ITS PRIORITY CHANGED. FROM W.STALLINGS OPERATING SYSTEMS AC22005 5",
  "priority-06": "OPERATING SYSTEMS THREAD DISPATCHING PRIORITIES IN MICROSOFT WINDOWS PRIORITY QUEUING WITH DYNAMIC PRIORITY AC22005 6",
  "priority-07": "OPERATING SYSTEMS MS WINDOWSTM THREAD DISPATCHING PRIORITIES 32 PRIORITY READY QUEUES 16 REAL-TIME PRIORITY CLASSES TOP 16 VARIABLE PRIORITY CLASSES LOWER THREADS CANNOT MOVE BETWEEN REAL-TIME AND VARIABLE PRIORITY CLASSES THREADS CAN MIGRATE UP AND DOWN THE VARIABLE PRIORITY QUEUES PRIORITY LEVELS BUT NOT THE REAL-TIME QUEUES PRE-EMPTIVE SCHEDULING THREADS WITH REAL-TIME PRIORITIES HAVE PRECEDENCE OVER OTHERS IF A THREAD BECOMES READY WITH A HIGHER PRIORITY THAN THE RUNNING ONE, THEN AC22005 IT PRE-EMPTS THE RUNNING ONE. FROM W.STALLINGS OPERATING SYSTEMS 7",
  "priority-08": "OPERATING SYSTEMS MS WINDOWS PRIORITY RELATIONSHIP PROCESS HAS A BASE PRIORITY OF P. EACH THREAD IN THE PROCESS STARTS OFF WITH BASE PRIORITY OF P PLUS-OR-MINUS 2. IF A THREAD BLOCKS ON AN I O EVENT, ITS PRIORITY IS BOOSTED IF INTERACTIVE, IT IS BOOSTED MORE. AC22005 IF IT IS CPU-BOUND, THREAD CAN MIGRATE UP AND DOWN THIS COLUMN DYNAMICALLY. FROM W.STALLINGS OPERATING SYSTEMS BUT DOES NOT DROP BELOW ITS OWN THREAD BASE PRIORITY OR RISE HIGHER THAN LEVEL 15. 8",
  "priority-09": "OPERATING SYSTEMS MICROSOFT WINDOWS MICROSOFT WINDOWS WAS DESIGNED FOR USE AS A SINGLE-USER, INTERACTIVE, TIME-SHARING, MULTIPROGRAMMING ENVIRONMENT. THE USER EXPERIENCE IS THEREFORE IMPORTANT SO THE SYSTEM MUST BE RESPONSIVE TO THE USER. THE THREAD SCHEDULING HAS THEREFORE BEEN DESIGNED TO ASSIST INTERACTIVE E.G. KEYBOARD, MOUSE THREADS THE MOST OTHER INPUT OUTPUT E.G. DISK I O THREADS NEXT CPU-BOUND E.G. DATA PROCESSING THREADS THE LEAST. AC22005 9",
  "priority-10": "OPERATING SYSTEMS GNU LINUX A TOTAL OF 140 LEVELS OF PROCESS PRIORITY EXIST IN THE KERNEL LEVELS 0-99 ARE RESERVED FOR KERNEL AND REAL-TIME PROCESSES USING A SPECIFIC SCHEDULER DESIGNED TO PROVIDE TRUE REAL-TIME PERFORMANCE. ONLY THE ROOT USER OR KERNEL CAN START PROCESSES WITH SUCH A PRIORITY AND THOSE ARE ALWAYS EXECUTED BEFORE USERSPACE ONES. USER-SPACE PROCESSES USE THE REMAINING 40 LEVELS WITH ANOTHER SCHEDULER. TO THE USERS THIS IS AVAILABLE AS A NICENESS VALUE BETWEEN -20 AND 19, DEFAULT IS 0 . THE USER CAN ONLY INCREASE THE NICENESS ABOVE 0, REDUCING THE PROCESS PRIORITY. ONLY THE ROOT USER OR KERNEL CAN DECREASE THE NICENESS OF A PROCESS TO NEGATIVE VALUES. SCHEDULING ALGORITHMS CAN BE CHANGED AT KERNEL COMPILATION AND BOOT TIME TO ADAPT TO THE USE OF THE SYSTEM. AC22005 10",
  "process-01": "OPERATING SYSTEMS PROCESS DESCRIPTION CONTROL D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE L. MAGERAND - UNIVERSITY OF DUNDEE I.R. MURRAY - UNIVERSITY OF DUNDEE AC22005 1",
  "process-02": "OPERATING SYSTEMS PROCESS DESCRIPTION CONTROL WHAT IS A PROCESS WHAT ARE THE PROCESS STATES THAT IT CAN BE IN HOW ARE THEY CONTROLLED CONTEXT AND PROCESS SWITCHES PROCESSES AND THREADS AC22005 2",
  "process-03": "OPERATING SYSTEMS A PROCESS USER VIEWPOINT FROM YOUR EXPERIENCE AS A USER OF OPERATING SYSTEMS, WHAT IS A PROCESS A PROCESS IS A PROGRAM IN EXECUTION E.G. POWERPOINT, FIREFOX, A FILE MANAGER WORKING A PROCESS CAN BE MAINLY HIDDEN FROM THE USER E.G. VISIBLE IN TASK MANAGER BUT NOT VISIBLE TO THE USER AC22005 3",
  "process-04": "OPERATING SYSTEMS A PROCESS OS VIEWPOINT A PROCESS IS A PROGRAM WHICH THE OS CAN EXECUTE . A COMBINATION OF MACHINE CODE DATA, INCLUDING ITS STACK OPERATING SYSTEMS DATA STRUCTURES EACH PROCESS NEEDS TO BE MANAGED THE OPERATING SYSTEM SHOULD BE IN OVERALL CONTROL OF WHAT IS HAPPENING ON THE COMPUTER ONLY KERNEL PROCESSES ARE RUNNING IN RING 0 ON PROCESSORS WITH PROTECTED MODE THERE CAN BE MANY PROCESSES ACTIVE ON THE COMPUTER AC22005 4",
  "process-05": "OPERATING SYSTEMS THREADS A PROCESS CAN BE FURTHER BROKEN DOWN INTO THREADS THESE ARE PROCESSES-WITHIN-PROCESSES E.G. IN A FLIGHT SIMULATOR, CALCULATING CHANGES IN THE POSITION ATTITUDE IS SEPARATE FROM THE CALCULATION OF THE VIEW FROM THE CURRENT POSITION THREADS ALLOW A PROCESS TO BE BROKEN DOWN INTO SELFCONTAINED SUB-PROCESSES, WHICH SHARE THE SAME CONTEXT AS THE MAIN PROCESS TO THE OS, THREADS MOSTLY BEHAVE LIKE PROCESSES HAVING MULTIPLE PROCESSES AND THREADS CAN MAKE THE SYSTEM MORE EFFICIENT AS THE CPU IS ALWAYS BUSY AC22005 5",
  "process-06": "OPERATING SYSTEMS PROCESS STATES IT IS THE RESPONSIBILITY OF THE OPERATING SYSTEM TO KEEP TRACK OF THE PROCESS ES . A SINGLE PROCESS GOES THROUGH VARIOUS STATES IN ITS LIFE, FROM ITS BIRTH TO ITS DEATH ONE CAN BUILD UP A LIFE HISTORY OF A PROCESS ONLY CERTAIN STATE TRANSITIONS ARE POSSIBLE SEE STATE MODEL ON NEXT SLIDE FOR NOW, WE WILL ASSUME THAT WE HAVE A SINGLE-CORE PROCESSOR AC22005 6",
  "process-07": "OPERATING SYSTEMS FIVE-STATE PROCESS MODEL NEW ADMIT DISPATCH RELEASE READY RUNNING TIME-OUT EVENT OCCURS EXIT EVENT WAIT BLOCKED WAITING AC22005 AFTER STALLINGS FIGURE 3.6 7",
  "process-08": "OPERATING SYSTEMS FIVE PROCESS STATES PROCESSES HAVE TO SHARE THE CPU AT ANY MOMENT, ONLY ONE PROCESS IS RUNNING AT TIME-OUT, THE RUNNING PROCESS IS STOPPED AND MOVED BACK TO THE READY STATE ANOTHER READY PROCESS IS ALLOWED TO RUN UNTIL IT A TIMES-OUT, OR B BECOMES BLOCKED A PROCESS BLOCKS IF IT HAS TO WAIT FOR ANYTHING, E.G. A KEYSTROKE IT IS THEN MOVED INTO THE BLOCKED STATE AND ANOTHER READY PROCESS RUNS IN ITS PLACE A BLOCKED PROCESS CAN ONLY BECOME UN-BLOCKED IF THE EVENT OCCURS FOR WHICH IT WAS WAITING IT CAN THEN RE-JOIN THE READY STATE AC22005 8",
  "process-09": "OPERATING SYSTEMS QUEUE MODEL WHY DOES THE OS NEED QUEUE S OF PROCESSES SOME TRANSITIONS MIGHT NOT HAPPEN IMMEDIATELY FOR THE PROCESSES AND THE OS NEEDS A DATA-STRUCTURE TO RETAIN PROCESSES WAITING FOR A TRANSITION WHICH TRANSITION IN THE PREVIOUS FIVE-STATE PROCESS MODEL MIGHT REQUIRE A QUEUE A PROCESS CANNOT BE MOVED TO THE RUNNING STATE UNTIL THE PROCESSOR IS FREE DISPATCH TRANSITION BLOCKED PROCESSES CANNOT MOVE AHEAD UNTIL THE EVENT BLOCKING THEM HAPPEN EVENT OCCURS TRANSITION MULTIPLE PROCESSES CAN WAIT FOR THE SAME EVENT AND USUALLY ONLY ONE WILL PROCEED WHEN THE EVENT HAPPEN AC22005 9",
  "process-10": "OPERATING SYSTEMS MORE PROCESSOR LESS MEMORY WHAT ABOUT MEMORY LIMITATION NEED TO USE VIRTUAL MEMORY AUXILIARY STORAGE ON DISK PROCESSES CAN ONLY RUN WITH DATA IN MAIN MEMORY THE PROCESSOR REQUIRES ACCESS TO THE DATA HOW CAN THE OS SELECT PROCESSES TO MOVE TO VIRTUAL MEMORY HOW CAN WE MODIFY THE 5-STATE MODEL TO LET IT KNOW WHICH PROCESSES ARE IN THE MAIN MEMORY WHAT ABOUT ADDING MORE PROCESSORS AFFECT THE READY AND RUNNING STATES AS THE OS NEEDS TO KNOW WHICH PROCESSOR A PROCESS IS RUNNING ON INFORMATION STORED IN THE PROCESS IMAGE INSTEAD OF STATE AC22005 10",
  "process-11": "OPERATING SYSTEMS PROCESS IMAGE WHAT DOES A PROCESS CONSIST OF AS IT SITS IN MEMORY AC22005 11",
  "process-12": "OPERATING SYSTEMS PROCESS IMAGE PROCESS TABLE WITH PCBS KERNEL PROGRAM CODE CODE ID 42 DATA NAME GVIM CONTEXT STATE CONTROL INFORMATION PROCESS CONTROL BLOCK PCB FOR ONE PROCESS AC22005 DATA UNUSED MEMORY CONTENTS OF A PROCESS IMAGE USER DATA USER PROGRAM CODE SYSTEM STACK CONTEXT PROCESS CONTROL BLOCK PCB 12",
  "process-13": "OPERATING SYSTEMS CONTENTS OF A PCB PROCESS CONTROL BLOCK PROCESS IDENTIFICATION PROCESS NAME NUMBER, PARENT AND USER PROCESS CONTROL INFORMATION PROCESS STATE, PRIORITY, SCHEDULING INFO, EVENT DATA STRUCTURES, INTER-PROCESS COMMUNICATION IPC PRIVILEGES, MEMORY MANAGEMENT, RESOURCE OWNERSHIP PROCESSOR STATE INFORMATION CONTEXT CPU REGISTERS USER AND SYSTEM , STACK POINTERS AC22005 13",
  "process-14": "OPERATING SYSTEMS PROCESS SWITCHING TAKE ONE PROCESS OFF THE CPU AND PUT ANOTHER ONE ONTO THE CPU. PROCESS SWITCH MAY OCCUR WHEN THE OS HAS CONTROL OF CPU. STALLINGS LISTS THREE PRE-EMPTION MECHANISMS EXTERNAL INTERRUPT TYPICALLY TIMERS TRAP EXCEPTIONS OR FAULT ON PROCESSOR SUPERVISOR SYSTEM CALL A PROCESS ITSELF CAN ALSO RELEASE THE CPU. AC22005 14",
  "process-15": "OPERATING SYSTEMS CONTEXT AND CONTEXT SWITCH WHAT IS THE CONTEXT ANY INFORMATION ABOUT THE STATE OF THE SYSTEM COMPUTER THAT WOULD BE CHANGED BY THE EXECUTION OF ANOTHER PROCESS IT TYPICALLY CONSISTS OF THE REGISTER CONTENTS WITHIN THE CPU CONTEXT SWITCH CHANGING THE CONTEXT WHICH THE CPU IS USING HAPPENS FOR EXAMPLE WHEN AN INTERRUPT IS HANDLED WHEN A PROCESS RESUMES ITS COMPUTATION AC22005 15",
  "process-16": "OPERATING SYSTEMS PROCESS SWITCH V CONTEXT SWITCH BOTH CHANGE WHAT THE CPU IS DOING, BUT PROCESS SWITCH TAKES MUCH LONGER THAN CONTEXT ONE A PROCESS SWITCH IS HEAVY DUTY - LOTS TO DO UPDATE PCBS FOR THE OLD AND NEW PROCESSES IN ADDITION TO CHANGING THE STATE OF THE PROCESSOR CONTEXT SWITCH DOES NOT IMPLY PROCESS SWITCH IT MAY BE A THREAD SWITCH WITHIN ONE PROCESS. IT IS RELATIVELY LIGHT - THERE IS MUCH LESS TO DO ONLY CHANGES THE STATE OF THE PROCESSOR AC22005 16",
  "process-17": "OPERATING SYSTEMS STEPS IN A PROCESS SWITCH SAVE THE CONTEXT OF THE RUNNING PROCESS UPDATE THE PCB OF THE RUNNING PROCESS SELECT ANOTHER READY PROCESS MOVE THE PCB TO THE CORRECT QUEUE UPDATE AND MOVE THE PCB OF THE CHOSEN PROCESS RESTORE THE CONTEXT OF CHOSEN PROCESS DONE IN KERNEL MODE CONTINUE EXECUTION DONE IN USER MODE AC22005 17",
  "process-18": "OPERATING SYSTEMS SUMMARY PROCESSES ARE PROGRAMS WHICH ARE RUNNING ON A COMPUTER - USUALLY MANY AT THE SAME TIME THE OPERATING SYSTEM HAS TO SCHEDULE ACCESS TO THE CPU FAIRLY FOR ALL THE PROCESSES EACH PROCESS IS IN ONE OF FIVE STATES STATE SWITCHING CAN OCCUR IN SEVERAL WAYS AC22005 18",
  "process_tut-01": "OPERATING SYSTEMS PROCESSES D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE TUTORIAL BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 FEBRUARY 2016 1",
  "process_tut-02": "OPERATING SYSTEMS FIVE-STATE PROCESS MODEL FIVE-STATE PROCESS MODEL NEW ADMIT DISPATCH RELEASE READY RUNNING TIME-OUT EVENT OCCURS EXIT EVENT WAIT BLOCKED WAITING AC22005 AFTER STALLINGS FIGURE 3.6 2",
  "process_tut-03": "OPERATING SYSTEMS MORE PROCESSOR LESS MEMORY WHAT CHANGES ARE NEEDED WITH THE 5-STATE MODEL IF WE ADD ANOTHER PROCESSOR IN THE SYSTEM MENTI A NEW READY QUEUE CAN BE ADDED FOR EACH PROCESSOR. HOWEVER, THIS FORCES PROCESSES TO WAIT FOR THAT CPU EVEN IF ANOTHER IS FREE. A SINGLE READY QUEUE CAN BE SUFFICIENT, BUT MORE INFORMATION NEED TO BE STORED IN PROCESS IMAGES TO KNOW THE CPU THEY ARE RUNNING ON. WHICH MODIFICATION OF THE 5-STATE MODEL AND ASSOCIATED QUEUES ARE NEEDED TO HANDLE VIRTUAL MEMORY WHEN THE MAIN MEMORY GETS FULL MENTI A NEW STATE, AND CORRESPONDING TRANSITIONS, IS ADDED FOR PROCESSES THAT ARE STORED INTO VIRTUAL MEMORY AND THUS CANNOT BE EXECUTED RIGHT NOW. AC22005 3",
  "process_tut-04": "OPERATING SYSTEMS A SUSPENDED STATE IS ADDED ONE EXTRA SUSPEND STATE NEW ADMIT DISPATCH READY RUNNING RELEASE EXIT TIME-OUT ACTIVATE EVENT OCCURS BLOCKED SUSPEND SUSPEND WAITING AC22005 EVENT WAIT AFTER STALLINGS FIGURE 3.9 A 4",
  "process_tut-05": "OPERATING SYSTEMS ONE SUSPENDED STATE SUSPEND STATE ALLOWS THE OS TO SWAP A BLOCKED PROCESS OUT TO SECONDARY STORAGE I.E. REMOVE IT PARTIALLY OR COMPLETELY FROM MAIN MEMORY . ALLOWS A NEW PROCESS TO START, OR ANOTHER SUSPENDED PROCESS TO RETURNED MEMORY SWAPPED IN TO SEE IF IT CAN MAKE FURTHER PROGRESS MAY BE UNBLOCKED BY NOW . THIS CAN OCCUR OVER AND ABOVE NORMAL VIRTUAL MEMORY OPERATION. OS TYPICALLY KEEPS AT LEAST PART OF A PROCESS IN MAIN MEMORY ALL THE TIME. NEED TO BE ABLE TO CHECK IF THE PROCESS IS UNBLOCKED WITHOUT BRINGING ALL ITS DATA BACK INTO THE MAIN MEMORY. HOW TO DEAL WITH PROCESSES THAT ARE UNBLOCKED BUT CANNOT BE LOADED INTO THE MAIN MEMORY YET MENTI AC22005 5",
  "process_tut-06": "OPERATING SYSTEMS ... WITH TWO SUSPENDED STATES NEW ADMIT ADMIT SUSPEND DISPATCH ACTIVATE RELEASE READY, READY RUNNING SUSPENDED TIME-OUT SUSPEND EVENT OCCURS EVENT OCCURS ACTIVATE BLOCKED, BLOCKED SUSPENDED SUSPEND AC22005 EXIT EVENT WAIT AFTER STALLINGS FIGURE 3.9 B 6",
  "process_tut-07": "OPERATING SYSTEMS TWO SUSPENDED STATES TWO SUSPEND STATES ALLOW A SUSPENDED PROCESS SITTING ON SECONDARY STORAGE TO MOVE FROM BEING BLOCKED SUSPEND TO READY SUSPEND . THE OS CAN SWAP A READY SUSPENDED PROCESS ONTO THE READY STATE WHILE SWAPPING A BLOCKED PROCESS OUT OF MEMORY. BLOCKED SUSPENDED PROCESSES CAN BE LEFT SWAPPED OUT OF MEMORY UNTIL AN EVENT OCCURS WHICH UNBLOCKS THEM. SO OS DOES NOT HAVE TO SWAP A PROCESS INTO MAIN MEMORY JUST TO FIND OUT IF IT IS STILL BLOCKED. AC22005 7",
  "process_tut-08": "OPERATING SYSTEMS PROCESSES AND THREADS WHEN A PROCESS IS NOT ENOUGH, MAKE SOME THREADS AC22005 8",
  "process_tut-09": "OPERATING SYSTEMS WHAT ARE THREADS MODERN OS USE THE THREAD CONCEPT, WHAT IS THE DIFFERENCE WITH A PROCESS MENTI RESOURCE OWNERSHIP PCB, OPENED FILES, DEVICES USED, IS CONTROLLED BY THE KERNEL AND SHARED BETWEEN ALL THREADS OF A PROCESS. CONTEXT IS SPECIFIC TO EACH THREAD AND CAN IS CONTROLLED BY THE PROCESS CREATION, TERMINATION, THROUGH A THREADING LIBRARY IN THE USER SPACE. MULTIPLE THREADS ARE ASSOCIATED WITH ONE PROCESS PROCESSES HAVE BECOME MULTI-THREADED. A PROCESS HAS A MAIN THREAD WHICH EXECUTE THE MAIN PROGRAM. AC22005 9",
  "process_tut-10": "OPERATING SYSTEMS TRADITIONAL PROGRAM WITH TWO SUB-TASKS PROGRAM WITH TWO THREADS INSIDE A SINGLE PROCESS BOX REPRESENTS RESOURCE OWNERSHIP A THREAD OF EXECUTION AC22005 10",
  "process_tut-11": "OPERATING SYSTEMS RECALL STEPS OF PROCESS SWITCH SAVE THE CONTEXT OF THE CPU SELECT ANOTHER READY PROCESS UPDATE THE PCB OF THE RUNNING PROCESS MOVE THE PCB TO THE RIGHT QUEUE UPDATE AND MOVE THE PCB OF THE CHOSEN PROCESS RESTORE THE CONTEXT OF CHOSEN PROCESS DONE IN KERNEL MODE CONTINUE EXECUTION HAPPEN IN USER MODE AC22005 11",
  "process_tut-12": "OPERATING SYSTEMS STEPS IN THREAD SWITCH SAVE THE CONTEXT OF THE CPU JUMP TO ANOTHER PART OF THE CODE RESTORE THE CONTEXT OF CHOSEN PROCESS EVERYTHING DONE IN USER MODE MUCH LIGHTER CONTINUE EXECUTION AC22005 12",
  "process_tut-13": "OPERATING SYSTEMS THREADS AND PROCESSES IMPLEMENTED IN VARIOUS WAY BY EACH OS. LIGHTWEIGHT PROCESSES ALSO EXIST ON SOME OS, THIS IS BETWEEN A THREAD AN A PROCESS. GOOD USE OF THREADS MEANS MORE EFFICIENT PROGRAMS FOR THE SYSTEM. COMES WITH SOME POTENTIAL ISSUES SEE FUTURE CONCURRENCY LECTURES AC22005 13",
  "process_tut-14": "OPERATING SYSTEMS WHEN TO USE THREADS FOREGROUND AND BACKGROUND WORK GRAPHICAL USER INTERFACES, WINDOWS, MENUS. ASYNCHRONOUS PROCESSING AUTOMATIC PERIODIC SAVING OF WORK E.G. TEXT WRITER, CODE EDITOR, TO DISC IN CASE OF POWER FAILURE. SPEED OF EXECUTION INTERLEAVE I O AND EXECUTION FOR SPEED AND EFFICIENCY. ORGANISING PROGRAMS MAY MAKE PROGRAM DESIGN AND IMPLEMENTATION EASIER, PARTICULARLY IF THERE ARE LOTS OF ACTIVITIES AND LOTS OF I O SOURCES. AC22005 14",
  "process_tut-15": "OPERATING SYSTEMS CONCLUSION WE HAVE DISCUSSED TODAY HOW THE OS CAN HANDLE VIRTUAL MEMORY SUSPENDING PROCESSES WHAT IS DIFFERENT BETWEEN A THREAD AND A PROCESS FOR THE OS AC22005 15",
  "process_tut-16": "OPERATING SYSTEMS SUGGESTED EXERCISES 1. ASSUMING AN OS WHERE THERE ARE 15 DIFFERENT PROCESSES PRESENT IN DIFFERENT QUEUES IN THE SYSTEM, AND 2 DIFFERENT EVENTS WHICH ARE CAPABLE OF BLOCKING SOME OR ALL OF THESE PROCESSES, WHAT MIGHT THE QUEUING MODEL LOOK LIKE FOR THE FIVE-STATE PROCESS MODEL HANDLING EVENTS SEPARATELY 2. DRAW A QUEUING MODEL, ASSUMING A THAT A SIX-STATE PROCESS MODEL IS BEING USED CONTAINING A SUSPEND STATE FOR BLOCKED PROCESSES WHICH THE OS WANTS TO SWAP OUT OF MEMORY , AND B THAT THERE IS ONLY 1 EVENT WHICH CAN CAUSE BLOCKING OF ANY OF THE PROCESSES IN THE SYSTEM. REPEAT THE ABOVE ASSUMING THAT THERE ARE 3 DIFFERENT EVENTS WHICH CAN CAUSE BLOCKING OF ANY OF THE PROCESSES IN THE SYSTEM. 3. FOR THE SEVEN-STATE PROCESS MODEL INCLUDING THE STATES OF READY SUSPEND AND BLOCKED SUSPEND , DRAW QUEUING MODELS FOR EACH OF THE FOLLOWING TWO SITUATIONS I ONLY ONE EVENT CAN BLOCK PROCESSES, II UP TO N EVENTS CAN BLOCK PROCESSES. IF THE PROCESSES HAVE DIFFERENT PRIORITIES I.E. SOME ARE MORE IMPORTANT THAN OTHERS AND MUST BE GIVEN PRECEDENCE BY THE DISPATCHER HOW MIGHT THIS INFLUENCE THE DESIGN OF THE READY QUEUING SYSTEM AC22005 16",
  "raid-01": "OPERATING SYSTEMS RAID REDUNDANT ARRAY OF INDEPENDENT DISKS J.L. ARNOTT L. MAGERAND UNIVERSITY OF DUNDEE AC22005",
  "raid-02": "OPERATING SYSTEMS RAID 0 USE N DISK DRIVES IN THIS CASE N 4 TO GIVE AN INCREASE IN OVERALL DISK CAPACITY. NO REDUNDANCY, NOT REALLY RAID AT ALL DATA RATE INCREASE UP TO N TIMES CAN READ OR WRITE A BLOCK FROM EACH DRIVE SIMULTANEOUSLY ONLY FOR BIG ENOUGH FILES I.E. BIGGER THAN N BLOCKS AC22005",
  "raid-03": "OPERATING SYSTEMS DATA STRIPS AND STRIPING DATA ARE STRIPED ACROSS THE AVAILABLE DRIVES, E.G. PUT BLOCKS FROM A FILE ONTO SEPARATE DRIVES BLOCK 0 ON DRIVE 0, BLOCK 1 ON DRIVE 1, ETC. CAN READ THE BLOCKS SIMULTANEOUSLY FASTER READ. EXTRA DISKS ALLOW FAILURE PROTECTION TO BE DONE RAID 1 USES A MIRROR COPY TO PRESERVE DATA RAID 2 USES AN ERROR-CORRECTING MECHANISM RAID 3 USES A PARITY CHECK TO RETRIEVE LOST DATA AC22005",
  "raid-04": "OPERATING SYSTEMS RAID 1 WE ACHIEVE DATA PROTECTION BY HAVING A MIRROR-COPY OF EACH DISK DRIVE. SHOULD A DRIVE FAIL, REPLACE IT AND FILL IT WITH CONTENT FROM ITS COPY. AC22005",
  "raid-05": "OPERATING SYSTEMS RAID 2 EXTRA SPACE USED TO STORE BIT-LEVEL HAMMING ERROR CODE TO CHECK AND OR CORRECT ERRORS IN THE MAIN DISKS. AC22005 NEEDS LOG N ADDITIONAL DISKS FOR N MAIN DISKS. DISKS ROTATION HAVE TO BE SYNCHRONIZED.",
  "raid-06": "OPERATING SYSTEMS RAID 3 0 1 2 3 4 WORKS WITH PARITY AT THE BYTE LEVEL, REQUIRES LESS ADDITIONAL DISKS AND MORE RELIABLE. SYNCHRONISE THE DISK DRIVES SO THAT 4 BYTES CAN BE WRITTEN SIMULTANEOUSLY TO THE 4 DRIVES AT INDEX I X0 I , , X3 I . A 5TH BYTE IS CALCULATED FROM THE FIRST 4 BYTES AND IS WRITTEN TO DISK 4 X4 I X3 I X2 I X1 I X0 I . AC22005",
  "raid-07": "OPERATING SYSTEMS RAID 3 - RECONSTRUCTION 0 1 2 3 4 5TH DISK SUCH THAT X4 I X3 I X2 I X1 I X0 I . IF ONE DISK FAILS, E.G. DISK 1, WE CAN RE-CALCULATE ALL OF THE BITS ON DISK 1 USING X1 I X3 I X2 I X4 I X0 I . WHAT HAPPEN IF WE LOOSE 2 DISKS AT THE SAME TIME AC22005",
  "raid-08": "OPERATING SYSTEMS HIGHER RAID LEVELS RAID 4 WORKS SIMILARLY TO RAID 3 BUT WITH BLOCKS INSTEAD OF BYTES RAID 5 IS SIMILAR TO RAID 4 BUT MORE EFFICIENT DUE TO ANOTHER WAY TO STRIP DATA WITH SOME VARIATIONS AVAILABLE RAID 6 IS A COMBINATION OF RAID 5 AND RAID 1 AC22005",
  "raid-09": "OPERATING SYSTEMS MIXING RAID LEVELS RAID 0 1 RAID 1 RAID 0 RAID 1 HOW MUCH SPACE AVAILABLE AC22005",
  "raid-10": "OPERATING SYSTEMS RAID CONCLUSION SO WE CAN ACHIEVE AN INCREASE IN DATA RATE BY USING MULTIPLE DRIVES DATA PROTECTION AND RETRIEVAL BY ADDING EXTRA DRIVES IT IS IMPORTANT TO REPLACE A DEAD DISK DRIVE ASAP SO THAT THE DATA CAN BE RE-CONSTRUCTED ON A REPLACEMENT DRIVE AND NORMAL SERVICE CAN BE RESUMED. AC22005",
  "schedule-01": "OPERATING SYSTEMS CPU SCHEDULING D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE L. MAGERAND - UNIVERSITY OF DUNDEE I.R. MURRAY - UNIVERSITY OF DUNDEE AC22005 FEBRUARY 2014 1",
  "schedule-02": "OPERATING SYSTEMS WHO SHOULD USE THE CPU FOR A PROCESS TO DO ANY WORK IT MUST OBTAIN A PROCESSOR CPU SO THAT ITS CODE CAN EXECUTE. WHEN DOES A PROCESS GET CPU HOW LONG DOES IT HAVE IT FOR THIS IS DECIDED BY THE SCHEDULING ALGORITHM. EXAMPLE TAKE THE SHORTEST PROCESS FROM THE READY QUEUE AND PUT IT ONTO THE CPU AND LET IT RUN TO COMPLETION I.E. SHORT PROCESSES GET TO RUN FIRST. AC22005 2",
  "schedule-03": "OPERATING SYSTEMS TYPES OF CPU SCHEDULING SCHEDULING IS DIVIDED INTO VARIOUS LEVELS. THESE LEVELS ARE DEFINED BY THE STATE OF THE PROCESS. A PROCESS CAN BE NOT YET ADDED TO THE SYSTEM E.G. NEW AVAILABLE TO BE EXECUTED BY THE PROCESSOR E.G. READY FULLY IN MAIN MEMORY BUT WAITING FOR SOMETHING E.G. BLOCKED PARTIALLY IN SECONDARY MEMORY E.G. SUSPENDED SUSPENDED AND WAITING FOR SOMETHING E.G. SUSPENDED, BLOCKED SUSPENDED BUT OTHERWISE READY TO EXECUTE E.G. SUSPENDED, READY AC22005 3",
  "schedule-04": "OPERATING SYSTEMS TYPES LEVELS OF SCHEDULING LONG-TERM DECISION TO ADD TO THE POOL OF PROCESSES TO BE EXECUTED, E.G. ADMIT A PROCESS ONTO READY QUEUE MEDIUM-TERM DECISION TO MOVE PROCESS INTO MAIN MEMORY E.G. FROM SUSPEND TO READY SHORT-TERM DECISION IS WHICH PROCESS GETS ONTO CPU NEXT, E.G. MOVE A PROCESS FROM READY TO RUNNING DECISION NEEDED WHENEVER A PROCESS IS TAKEN OFF THE CPU I.E. WHEN A PROCESS IS MOVED FROM RUNNING TO READY OR TO BLOCKED E.G. EVERY TIME ROUND-ROBIN SCHEDULER TRIGGERS A PROCESS CHANGE AC22005 FROM STALLINGS OPERATING SYSTEMS 4",
  "schedule-05": "OPERATING SYSTEMS SCHEDULING CRITERIA USER-ORIENTED OR SYSTEM-ORIENTED CRITERIA PERFORMANCE OR OTHER CRITERIA USER-ORIENTED CRITERIA GOOD USER EXPERIENCE. E.G. LOW RESPONSE TIMES MAX. PERCENTAGE OF DEADLINES MET. SYSTEM-ORIENTED CRITERIA USER IS NOT IMPORTANT, WHAT IS IMPORTANT IS THE MAXIMUM EFFICIENCY AND UTILISATION OF THE MACHINE. E.G. MAX. CPU UTILISATION, MAX. SYSTEM EFFICIENCY, MAX, NO. OF PROCESSES COMPLETING UNIT TIME, LOW ENERGY CONSUMPTION. THE OS NEEDS TO FIND A BALANCE BETWEEN THE TWO, A PERFECT DECISION IS IMPOSSIBLE AC22005 5",
  "schedule-06": "OPERATING SYSTEMS USER EXPERIENCE THOSE OF US INTERESTED IN USER EXPERIENCE WANTS TO MAXIMISE USER-ORIENTED CRITERIA WE WISH TO DELIVER A GOOD EXPERIENCE TO THE USER EXAMPLES OF WHAT IS IMPORTANT LOW RESPONSE TIMES THINGS HAPPEN IMMEDIATELY WHEN MOUSE CLICKED, KEYBOARD PRESSED, ETC. EVENT DEADLINES NEED TO BE MET SO THAT THINGS ARE HAPPENING AT THE RIGHT TIME, E.G. REMINDERS, PROMPTS, SCREEN CHANGES. THE SCHEDULING ALGORITHM HAS STRONG INFLUENCE PRIORITY OF PROCESSES USER OR SYSTEM PREFERENCE ORDER IN WHICH PROCESSES ARE EXECUTED HOW MUCH CPU TIME IS GIVEN TO EACH INDIVIDUAL PROCESS AC22005 6",
  "schedule-07": "OPERATING SYSTEMS GENERALLY A SCHEDULING MECHANISM FOR THIS SHOULD BE CHEAP I.E. EFFICIENT TO IMPLEMENT FAVOUR SHORT JOBS TO IMPROVE RESPONSE TIME FAVOUR I O-BOUND JOBS TO GET GOOD I O DEVICE UTILISATION AND BETTER INTERACTIVE PERFORMANCE DETERMINE THE NATURE OF A JOB AND SCHEDULE IT ACCORDINGLY TAKE INTO ACCOUNT USER PREFERENCES AC22005 7",
  "schedule-08": "OPERATING SYSTEMS SOME SCHEDULING ALGORITHMS FCFS FIRST-COME-FIRST-SERVED OR FIFO ROUND ROBIN SHORTEST JOB FIRST SHORTEST PROCESS NEXT SHORTEST REMAINING TIME AC22005 8",
  "schedule-09": "OPERATING SYSTEMS FCFS FIFO FIRST-COME-FIRST-SERVED, FIRST-IN-FIRST-OUT ANY PROCESS BECOMING READY JOINS THE READY QUEUE. WHEN THE CURRENT RUNNING PROCESS FINISHES, THE PROCESS AT HEAD OF READY QUEUE IS SELECTED NEXT. IT IS THEN ALLOWED TO RUN TO COMPLETION. PROCESSES DISPATCH NEW CPU EXIT READY QUEUE SIMPLE QUEUING DIAGRAM WITHOUT MULTI-TASKING. AC22005 9",
  "schedule-10": "OPERATING SYSTEMS FCFS FIFO QUEUING CAN ADD ANOTHER QUEUE FOR BLOCKED PROCESS WHO NEEDS TO WAIT FOR AN EVENT. DISPATCH NEW CPU EXIT READY QUEUE BLOCKED QUEUE AC22005 10",
  "schedule-11": "OPERATING SYSTEMS FCFS FIFO FIRST-COME-FIRST-SERVED, FIRST-IN-FIRST-OUT CHARACTERISTICS. SIMPLE TO IMPLEMENT FCFS IS A NON-PRE-EMPTIVE ALGORITHM SEE LATER FAVOURS LONG PROCESSES OVER SHORT ONES, BECAUSE THE RUNNING PROCESS IS ALLOWED TO STAY RUNNING UNTIL IT COMPLETES AND EXITS FAVOURS CPU-BOUNDED PROCESSES, I.E. ONES THAT ARE CONSTRAINED BY THE POWER OF THE COMPUTER E.G. CPU AC22005 11",
  "schedule-12": "OPERATING SYSTEMS CPU-BOUND I O-BOUND A CPU-BOUNDED PROCESS IS LIMITED BY THE CPU PROCESSING POWER CPU BOUNDEDNESS OF A PROCESS DEGREE TO WHICH PROGRESS IS DEFINED BY PROCESSING POWER E.G. DATA PROCESSING, ETC. AN I O-BOUNDED PROCESS IS LIMITED BY EXTERNAL EVENTS I O, INPUT OUTPUT I O BOUNDEDNESS OF A PROCESS DEGREE TO WHICH PROGRESS IS DEFINED BY EXTERNAL EVENTS E.G. WAITING FOR A KEYSTROKE ON THE KEYBOARD I O, USER INTERFACE, USER-EXPERIENCE, ETC. AC22005 12",
  "schedule-13": "OPERATING SYSTEMS HOW TO IMPROVE FIFO ROUND ROBIN RR PROCESSES ARE DISPATCHED FIFO, BUT ARE GIVEN A FIXED TIME ON THE CPU QUANTUM TIME SLICE A TIMER INTERRUPT IS USED TO PROVIDE TIME SLICING EACH PROCESS RUNS FOR A FIXED LENGTH OF TIME, THEN IS FORCED TO LEAVE THE CPU AND RETURN TO THE END OF THE QUEUE IT MAY REQUIRE MANY VISITS TO THE CPU TO COMPLETE ITS TASK AND EXIT CPU TIME IS SHARED OUT AMONGST THE READY PROCESSES AC22005 13",
  "schedule-14": "OPERATING SYSTEMS ROUND ROBIN RR EACH PROCESS GETS 1 TIME SLOT QUANTUM , THEN EXECUTION CPU MOVES ON TO THE NEXT PROCESS. GOES ROUND CONTINUOUSLY UNTIL PROCESSES COMPLETE. AC22005 PROCESSES ARE REPRESENTED BY COLOURED CIRCLES HERE. 14",
  "schedule-15": "OPERATING SYSTEMS ROUND ROBIN QUEUING TIME-OUT DISPATCH NEW CPU EXIT READY QUEUE QUEUING DIAGRAM WHEN MULTI-TASKING WITH A ROUND-ROBIN STRATEGY PROCESS RUN FOR SOME TIME AND THEN JOIN THE QUEUE AGAIN ALMOST NO ADDED COST COMPARED TO FCFS AC22005 15",
  "schedule-16": "OPERATING SYSTEMS TIME SLICING THE INTERRUPTING CLOCK THE OS SETS THE INTERRUPTING CLOCK TO GENERATE AN INTERRUPT AT SOME SPECIFIED FUTURE TIME COMMON FOR COMPUTERS TO HAVE HARDWARE TIMERS THAT CAN GENERATE INTERRUPT REQUESTS CAN USE THESE AS A REFERENCE TIMING SOURCE THIS INTERRUPT TIME IS THE PROCESS S QUANTUM TIME SLOT OR TIME SLICE ALLOWS THE OS TO REGAIN CONTROL OF THE PROCESSOR AND THEN PRE-EMPT ANY PROCESS PROVIDES REASONABLE RESPONSE TIMES AND PREVENTS THE SYSTEM BEING HELD UP BY PROCESSES IN INFINITE LOOPS AC22005 16",
  "schedule-17": "OPERATING SYSTEMS ROUND ROBIN QUEUING WITH BLOCKED QUEUE TIME-OUT DISPATCH NEW CPU EXIT READY QUEUE AND WE CAN ADD A BLOCKED QUEUE. BLOCKED QUEUE AC22005 17",
  "schedule-18": "OPERATING SYSTEMS ROUND ROBIN QUEUING WITH TWO BLOCKED QUEUES TIME-OUT DISPATCH ADMIT CPU EXIT READY QUEUE INDEED WE CAN ADD A BLOCKED QUEUE FOR EVERY DEVICE THAT CAN CAUSE BLOCKING. I O 1 OCCURS I O 2 OCCURS AC22005 I O 1 WAIT I O 2 WAIT BLOCKED QUEUES 18",
  "schedule-19": "OPERATING SYSTEMS ROUND ROBIN RR EFFECTIVE IN TIME-SHARING ENVIRONMENTS. POPULAR ALGORITHM WHEN TIME-SHARING, MULTI-TASKING IS REQUIRED. USED, FOR EXAMPLE, IN MICROSOFT WINDOWSTM. ROUND ROBIN PENALISES I O-BOUND PROCESSES BECAUSE THEY OFTEN BLOCK QUICKLY, WAITING FOR AN I O EVENT SO THEY MAKE LESS USE OF THEIR TIME SLICE THAN CPU-BOUND ONES DO AN I O BOUND PROCESS IS ONE THAT INTERACTS WITH THE OUTSIDE WORLD AND MAY HAVE TO WAIT EVERY SO OFTEN FOR AN EXTERNAL EVENT TO HAPPEN BEFORE IT CAN PROCEED IN OTHER WORDS, IT CAN GET BLOCKED BY THE ABSENCE OF AN EXTERNAL EVENT E.G. KEY PRESS OR MOUSE ACTION RR IS A PRE-EMPTIVE ALGORITHM AC22005 19",
  "schedule-20": "OPERATING SYSTEMS WHAT IS PRE-EMPTION PRE-EMPTION IS BUTTING-IN OR INTERRUPTING THE EXECUTION OF PROGRAM CODE IF THE OS IS ABLE TO STOP THE PROCESS EXECUTING AND TAKE THE CPU AWAY FROM THAT PROCESS, THIS IS DESCRIBED AS PRE-EMPTION ... PROCESS EXECUTION IS THUS PAUSED PRE-EMPTIVE A SCHEDULING ALGORITHM IS PRE-EMPTIVE IF THE OS CAN TAKE THE CPU AWAY FROM A PROCESS. THE OS REGAINS CONTROL OF THE COMPUTER BY PRE-EMPTING THE RUNNING PROCESS AND RETURNS THAT PROCESS TO THE READY QUEUE. THE OS IS THEN IN A POSITION TO DECIDE WHAT HAPPENS NEXT. AC22005 20",
  "schedule-21": "OPERATING SYSTEMS NON-PRE-EMPTIVE OR PRE-EMPTIVE SCHEDULING PRE-EMPTIVE A SCHEDULING ALGORITHM IS PRE-EMPTIVE IF THE OP SYS CAN TAKE THE CPU AWAY FROM A PROCESS NON-PRE-EMPTIVE A SCHEDULING ALGORITHM IS NON-PREEMPTIVE IF THE OP SYS IS NOT ALLOWED TO TAKE THE CPU AWAY FROM A PROCESS PRE-EMPTIVE SCHEDULING IS USEFUL IN A SITUATION WHERE THERE IS A HIGH NUMBER OF HIGH PRIORITY PROCESSES THE OS CAN PREVENT ONE PROCESS FROM STARVING OTHER PROCESSES BY PRE-EMPTING THAT PROCESS AND RETURNING IT TO THE READY STATE. AC22005 21",
  "schedule-22": "OPERATING SYSTEMS SUMMARY SCHEDULING IS A TASK CARRIED OUT BY AN OPERATING SYSTEM TO GIVE EACH OF THE PROCESSES FAIR ACCESS TO THE CPU. THERE ARE VARIOUS TYPES OF SCHEDULING ALGORITHM THAT OSS CAN USE SOME ARE PRE-EMPTIVE. AC22005 22",
  "schedule_tut-01": "OPERATING SYSTEMS CPU SCHEDULING D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE TUTORIAL BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "schedule_tut-02": "OPERATING SYSTEMS SCHEDULING CONTINUED MORE COMPLEX ALGORITHMS TO DECIDE WHICH PROCESS GETS THE CPU NEXT WHAT WERE THE TWO BASICS SCHEDULING STRATEGIES YOU HAVE SEEN IN THE VIDEO MENTI AC22005 2",
  "schedule_tut-03": "OPERATING SYSTEMS EXAMPLE SCHEDULING FIFO A SIMPLE GANTT CHART FOR SCHEDULING BASED ON PROCESS NUMBER AND A FIFO FCFS STRATEGY I.E. PROCESSES ARE RUN IN THEIR NUMERICAL ORDER LOOKS LIKE PROCESS WAITING TIME P0 0 P1 ------- 7 P2 ------------------ 18 P3 --------------------- 21 P4 -------------------------- 26 TIME 0----5----10---15---20---25---30 AVERAGE WAITING TIME 0 7 18 21 25 5 14.2 AC22005 3",
  "schedule_tut-04": "OPERATING SYSTEMS QUEUING AND SCHEDULING SHOWS WHERE THE LONG-TERM, MEDIUM-TERM AND SHORT-TERM SCHEDULING DECISIONS ARE RELEVANT. AC22005 FROM W.STALLINGS OPERATING SYSTEMS 4",
  "schedule_tut-05": "OPERATING SYSTEMS SHORTEST-JOB-FIRST SJF SOMETIMES KNOWN AS SHORTEST PROCESS NEXT SPN . IMPLEMENTATION THE PROCESS WITH THE SHORTEST EXPECTED EXECUTION TIME IS DISPATCHED FIRST TO THE PROCESSOR. CHARACTERISTICS MUST KNOW IN ADVANCE HOW LONG A PROCESS WILL RUN FOR. NON-PRE-EMPTIVE NO NEED OF TIME INTERRUPTION SYSTEM . REDUCES AVERAGE WAITING TIME COMPARED TO FCFS POSSIBLE USER ABUSE E.G. UNDER-ESTIMATING THE RUN-TIME . LONG PROCESSES MAY GET STARVED BY SHORT ONES. AC22005 5",
  "schedule_tut-06": "OPERATING SYSTEMS A LITTLE LIGHT SCHEDULING ... THE FOLLOWING PROCESSES PN EXIST AT TIME 0, EACH WITH A TOTAL RUN-TIME REQUIREMENT OF T UNITS P0 T 7 , P1 T 11 , P2 T 3 , P3 T 5 , P4 T 2 DRAW A GANTT CHART THAT ILLUSTRATES WHEN EACH PROCESS RUNS WHEN USING THE FOLLOWING TYPES OF SCHEDULING MIRO I SJF SPN II RR. IF TIME-SLICING IS USED, ASSUME THE QUANTUM 1 TIME UNIT. ASSUME THAT NO BLOCKING EVENTS WILL OCCUR. AC22005 6",
  "schedule_tut-07": "OPERATING SYSTEMS QUIZ FOR EACH OF THESE TYPES OF SCHEDULING, CALCULATE HOW MUCH TIME EACH PROCESS SPENDS WAITING THE AVERAGE WAITING TIME OF ALL PROCESSES. WHAT IS THE AVERAGE WAITING TIME FOR RR 1. 4.2 2. 6.8 3. 13.2 4. 14.2 AC22005 WHAT IS THE AVERAGE WAITING TIME FOR SJF 1. 4.2 2. 6.8 3. 13.2 4. 14.2 7",
  "schedule_tut-08": "OPERATING SYSTEMS EXAMPLE SCHEDULING RR A SIMPLE GANTT CHART FOR SCHEDULING BASED ON PROCESS NUMBER AND A RR STRATEGY I.E. PROCESSES ARE RUN IN THEIR NUMERICAL ORDER LOOKS LIKE PROCESS WAITING TIME P0 ---- ---- --- -- -- - 16 P1 - ---- ---- --- -- -- - 17 P2 -- ---- ---- 10 P3 --- ---- ---- -- -- 15 P4 ---- ---- 8 TIME 0----5----10---15---20---25---30 AVERAGE WAITING TIME 16 17 10 15 8 5 13.2 AC22005 8",
  "schedule_tut-09": "OPERATING SYSTEMS EXAMPLE SCHEDULING SJF A SIMPLE GANTT CHART FOR SCHEDULING BASED ON AN SJF SPN STRATEGY LOOKS LIKE PROCESS WAITING TIME P0 ---------- 10 P1 ----------------- 17 P2 -- 2 P3 ----- 5 P4 0 TIME 0----5----10---15---20---25---30 AVERAGE WAITING TIME 10 17 2 5 0 5 6.8 AC22005 9",
  "schedule_tut-10": "OPERATING SYSTEMS SHORTEST REMAINING TIME SRT PRE-EMPTIVE COUNTERPART OF SPN SJF. IMPLEMENTATION PROCESS WITH THE SMALLEST ESTIMATED RUN-TIME TO COMPLETION IS RUN NEXT. A RUNNING PROCESS MAY BE PRE-EMPTED BY A NEW PROCESS WITH A SHORTER ESTIMATED RUN-TIME. CHARACTERISTICS NO ADDITIONAL TIME INTERRUPTS ARE GENERATED. STILL REQUIRES ESTIMATES OF THE FUTURE RUN-TIME. ELAPSED TIMES MUST BE RECORDED BUT PROVIDE BETTER ESTIMATES. HIGHER OVERHEAD THAN SJF SPN. AC22005 10",
  "schedule_tut-11": "OPERATING SYSTEMS PROCESS ARRIVAL TIME PROCESSES ARE NOT NECESSARILY ADMITTED TO THE READY QUEUE AT THE SAME TIME. SOME ARRIVE IN THE QUEUE LATER THAN OTHERS. ARRIVAL TIME INFLUENCES THE RESULTS OF SCHEDULING ALGORITHMS. SO IF PROCESSES PN ARRIVE AT TIMES A, EACH WITH A TOTAL RUN-TIME REQUIREMENT OF T UNITS P0 T 7, A 17 , P1 T 11, A 0 , P2 T 3, A 9 , P3 T 5, A 11 , P4 T 2, A 3 AC22005 DRAW THE CORRESPONDING GANTT CHART FOR SRT MIRO 11",
  "schedule_tut-12": "OPERATING SYSTEMS EXAMPLE ARRIVAL TIMES FIFO A SIMPLE GANTT CHART FOR SCHEDULING BASED ON PROCESS NUMBER AND A FCFS FIFO SCHEDULING LOOKS LIKE PROCESS WAITING TIME P0 ---- 4 P1 0 P2 ---- 4 P3 ----- 5 P4 -------- 8 TIME 0----5----10---15---20---25---30 MEANS PN ARRIVAL AVERAGE WAITING TIME MENTI 4 0 4 5 8 5 4.2 AC22005 12",
  "schedule_tut-13": "OPERATING SYSTEMS EXAMPLE ARRIVAL TIMES SRT A SIMPLE GANTT CHART FOR SCHEDULING BASED ON PROCESS NUMBER AND A SRT SCHEDULING LOOKS LIKE MIRO PROCESS WAITING TIME P0 ---- 4 P1 -- --- 5 P2 0 P3 ----- 5 P4 0 TIME 0----5----10---15---20---25---30 MEANS PN ARRIVAL AVERAGE WAITING TIME MENTI 4 5 0 5 0 5 2.8 AC22005 13",
  "schedule_tut-14": "OPERATING SYSTEMS CONCLUSION TODAY WE HAVE SEEN HOW TO REPRESENT SCHEDULING WITH A GANTT CHART THE AVERAGE WAITING TIME AS A PERFORMANCE METRIC OF SCHEDULING ALGORITHMS TWO NEW SCHEDULING STRATEGIES SJF AND SRT AC22005 14",
  "schedule_tut-15": "OPERATING SYSTEMS ADDENDA ADDITIONAL OPTIONAL MATERIAL AC22005 15",
  "schedule_tut-16": "OPERATING SYSTEMS VIRTUAL ROUND ROBIN VRR A MODIFICATION TO THE RR ALGORITHM TO REMOVE THE BIAS TOWARDS CPU-BOUND PROCESSES. IMPLEMENTATION TWO READY QUEUES, ONE CALLED AUXILIARY FOR STORING I O PROCESSES ONCE THEY ARE RELEASED FROM THEIR WAIT I.E. BECOME UNBLOCKED AND LEAVE THE BLOCKED STATE . AUX QUEUE HAS PRIORITY OVER READY QUEUE. I O PROCESSES FROM AUX ONLY RUN FOR THEIR REMAINING TIME, NOT FOR A FULL TIME SLICE. CHARACTERISTICS PERFORMANCE STUDIES INDICATE THAT THIS IS FAIRER THAN RR. AC22005 16",
  "schedule_tut-17": "OPERATING SYSTEMS REF STALLINGS OPERATING SYSTEMS , ED. 7 AC22005 17",
  "security1-01": "SECURITY OF INFORMATION HAS THIS CHANGED OVER THE YEARS A PERSPECTIVE",
  "security1-02": "ONE PERSPECTIVE ON SECURITY OF INFORMATION TECHNOLOGY HAS MADE IT VERY EASY TO COLLECT PROCESS STORE DISTRIBUTE LOSE OR MISPLACE, MISLAY VERY LARGE QUANTITIES OF PERSONAL INFORMATION SERIOUS ISSUES FOR THOSE ASSEMBLING, STORING AND PROCESSING PERSONAL INFORMATION.",
  "security1-03": "STORING PERSONAL INFORMATION 1950 PAPER PUNCHED CARDS OR PAPER TAPE FILING CABINETS LARGE BUILDINGS TODAY COMPACT DISCS, DVDS FLASH MEMORY USB STICKS , MEMORY CARDS HARD DISC DRIVES LAPTOP COMPUTERS AND MOBILE DEVICES TRANSMISSION THROUGH NETWORKS INCLUDING INTERNET",
  "security1-04": "COPYING A PAPER DOCUMENT 1950 COPY-TYPIST RE-TYPES DOCUMENT ONTO PAPER USING CARBON PAPER TO PRODUCE A FEW EXTRA COPIES MIMEOGRAPHY TO PRODUCE E.G. A FEW TENS OF COPIES ALTHOUGH THESE WERE NOT VERY DURABLE THEY FADED PHOTOGRAPHY TODAY PHOTOCOPIERS CAN PRODUCE THOUSANDS OF COPIES LASER PRINTERS CAN PRINT THOUSANDS OF COPIES ELECTRONIC COPIES E.G. PDF CAN BE DISTRIBUTED TO A VIRTUALLY LIMITLESS EXTENT E.G. ON THE WEB",
  "security1-05": "TRANSPORTING DOCUMENTS PAPER DOCUMENT STORAGE PRINTED PAGES CONSIDER DATA FOR 25 MILLION PEOPLE ASSUME 1 SHEET OF PAPER 1 FOLDER PER PERSON 1 A4 PAPER SHEET 5 GRAMS, 1 FOLDER 40 GRAMS TOTAL WEIGHT OF 1125 TONNES METRIC TONS REQUIRES 165 10-TONNE TRUCKS TO TRANSPORT DIGITAL STORAGE TWO DATA DISCS CDS SENT VIA POSTAL MAIL LOST IN NOV 2007 BY A UK GOVERNMENT DEPARTMENT",
  "security1-06": "TRANSPORTING INFORMATION 1950 IT WAS DIFFICULT AND EXPENSIVE TO TRANSPORT PAPER FILES A SIGNIFICANT LOGISTICAL EFFORT TO RE-LOCATE A GOVERNMENT DEPARTMENT OWNING SUCH PAPER FILES TODAY IT IS VERY EASY AND INEXPENSIVE TO COPY, TRANSPORT AND DISTRIBUTE THE EQUIVALENT ELECTRONIC FILES LEADING TO COMPLACENCY AND CARELESSNESS IN THEIR STORAGE AND MANAGEMENT A SIGNIFICANT CHALLENGE TO KEEP FILES SAFE IN ONE PLACE",
  "security1-07": "VULNERABLE INFORMATION SECURITY IS OF PARAMOUNT IMPORTANCE INFORMATION SECURITY BACK-UP OF STORED INFORMATION BUT EFFECTIVE SECURITY IS A VERY TALL ORDER SECURITY METHODS ARE NOT PERFECT CONTINUED THREAT FROM MALICIOUS ELEMENTS CYBER-CRIMINALS BECOME EVER-MORE SOPHISTICATED NETWORKS CONNECT EVERYTHING TOGETHER SYSTEMIC PROBLEMS AND HUMAN FAILINGS",
  "security1-08": "SECURITY SECURITY WILL CONTINUE TO GROW IN IMPORTANCE DISABLED AND OLDER PEOPLE ARE GOING TO NEED TO RELY INCREASINGLY ON TECHNOLOGY NEW DEVELOPMENTS IN ASSISTIVE TECHNOLOGY OFTEN CONNECTED AND NETWORK-BASED SECURITY NEEDS TO IMPROVE DECISIONS ON WHAT INFORMATION NEEDS TO BE GATHERED AND WHAT IS NOT NEEDED DO NOT GATHER INFORMATION THAT IS NOT REQUIRED CONNECTED VERSUS NON-CONNECTED SYSTEMS LIMIT THE USE OF PORTABLE STORAGE E.G. STICK, DISC .",
  "security1-09": "PROFESSIONAL ISSUES A BRIEF VIEW",
  "security1-10": "YOU WILL BE AN IT PROFESSIONAL YOU NEED TO TAKE A PROFESSIONAL APPROACH TO DEVELOPING, MAINTAINING AND USING INFORMATION SYSTEMS THE COMPUTER IS A CORE COMPONENT OF THE MODERN INFORMATION SYSTEM O.S. SECURITY IS HIGHLY IMPORTANT",
  "security1-11": "DATA INTEGRITY AND PRIVACY INTEGRITY OF PERSONAL DATA IN HEALTH INFORMATICS SYSTEMS, FOR EXAMPLE SAFETY OF THE INDIVIDUAL DEPENDS ON DATA INTEGRITY AND RELIABLE IT SYSTEMS RIGHT TO PRIVACY OF THE INDIVIDUAL SYSTEMS SHOULD PROTECT USER S PRIVACY DATA PROTECTION ACT AND GDPR",
  "security1-12": "PROFESSIONAL RESPONSIBILITY FINANCIAL SECURITY OF THE INDIVIDUAL SALARY, SAVINGS, LIFE INSURANCE, PENSION ALL NOW HEAVILY DEPENDANT ON IT SYSTEMS YOUR RESPONSIBILITY TO PROTECT THEIR INTEGRITY AGAINST FRAUD MALICIOUS INTENT OF ANY KIND SAFETY ISSUES AKIN TO BRIDGE AND ROAD SAFETY PUBLIC SAFETY DEPENDS ON HIGH RELIABILITY",
  "security1-13": "PROFESSIONAL APPROACH COMPUTER SYSTEMS ARE VULNERABLE YOU MUST WORK TO PROTECT THEM PRO-ACTIVE PURSUIT OF PERFECTION",
  "security1-14": "END OF SLIDE SEQUENCE",
  "security2-01": "OS AND SECURITY AC22005",
  "security2-02": "SUMMARY OF TOPIC SECURITY THREATS DESIGN PRINCIPLES FOR SECURITY MEASURES TYPES OF PROTECTION USER-ORIENTED CONTROL OF ACCESS DATA-ORIENTED CONTROL OF ACCESS",
  "security2-03": "COMPUTER SECURITY SECURITY IS THE COLLECTIVE NAME GIVEN TO THE TOOLS, RESOURCES AND ADMINISTRATIVE PROCEDURES THAT ARE DESIGNED TO PROTECT COMPUTING DATA AND SERVICES. SECURITY HAS BECOME THE BIGGEST COLLECTIVE HEADACHE OF INFORMATION SYSTEMS.",
  "security2-04": "SCOPE OF SYSTEM SECURITY REF STALLINGS OPERATING SYSTEMS , ED. 6, FIG. 14.2",
  "security2-05": "SECURITY THREATS REF STALLINGS OPERATING SYSTEMS ED.5, FIG. 16.2",
  "security2-06": "GENERIC TYPES OF SECURITY THREAT 1 INTERRUPTION SYSTEM ASSET BECOMES UNAVAILABLE E.G. CUTTING OF EXAMPLES CONNECTION, DELETING A FILE INTERCEPTION UNAUTHORIZED ACCESS TO SYSTEM ASSET EXAMPLES E.G. A HACKER COPYING FILES, SOMEONE WATCHING YOUR NETWORK ACTIVITY",
  "security2-07": "GENERIC TYPES OF SECURITY THREAT 2 MODIFICATION UNAUTHORIZED MODIFICATION TO A SYSTEM ASSET E.G. VIRUS CHANGING A PROGRAM, A EXAMPLES DATABASE ALTERED FABRICATION UNAUTHORIZED FAKING OF AN OBJECT IN THE SYSTEM E.G. ADDING RECORDS TO A FILE EXAMPLES",
  "security2-08": "VIRUSES - AN EXAMPLE OF THE MODIFICATION THREAT A VIRUS IS A SMALL PROGRAM THAT CAN ATTACH ITSELF TO AN EXISTING PROGRAM KEY FEATURE - WHEN THE INFECTED PROGRAM IS RUN, THE VIRUS CODE IS ALSO RUN USUALLY AT THE BEGINNING OR THE END WHEN THE VIRUS CODE IS RUN, IT CAN LOOK AROUND FOR OTHER PROGRAMS TO ATTACH A REPLICA OF ITSELF TO IF VIRUS CODE RUNS FAST ENOUGH, USER WON T NOTICE ANYTHING IS UNUSUAL - THE ORIGINAL PROGRAM WILL APPEAR TO RUN AS NORMAL",
  "security2-09": "VIRUSES SOME VIRUSES ARE EASY TO DETECT, SINCE THE HOST PROGRAM INCREASES IN SIZE DUE TO THE ADDITION OF THE VIRUS CODE STEALTH VIRUSES ATTEMPT TO COVER THEMSELVES UP TO AVOID DETECTION. FOR EXAMPLE, ONE STANDARD TRICK IS TO COMPRESS THE ORIGINAL PROGRAM SO THAT THE INFECTED PROGRAM INCLUDING VIRUS IS STILL THE SAME SIZE. THIS IS SHOWN ON NEXT SLIDE...",
  "security2-10": "0 VIRUS THAT USES COMPRESSION HOST PROGRAM VIRUS COMPRESSES THE HOST PROGRAM, THEN ATTACHES ITSELF VIRUS CODE COMPRESSED HOST PROGRAM",
  "security2-11": "1 REF STALLINGS OPERATING SYSTEMS , ED.6, FIGURE 14.4",
  "security2-12": "2 WHAT THE OS CAN DO ABOUT SECURITY",
  "security2-13": "3 DESIGN PRINCIPLES FOR SECURITY LEAST PRIVILEGE SMALL, UNIFORM SECURITY ACCEPTABILITY OF THE SECURITY MEASURES COMPLETE MEDIATION OPEN DESIGN",
  "security2-14": "4 LEAST PRIVILEGE SMALL UNIFORM SECURITY LEAST PRIVILEGE PROCESSES OPERATE USING THE SMALLEST NO. OF PRIVILEGES POSSIBLE DEFAULT IS NO ACCESS ALLOWED WHAT COULD IT MEANS FOR PROCESSES FILES PRIVILEGES GAINED BY EXPLICIT PERMISSION FILES ACCESSIBLE ONLY TO USERS NEEDING THEM SMALL, UNIFORM SECURITY SMALL AND UNIFORM IMPLIES EASY TO VERIFY THEIR CORRECTNESS PART OF DESIGN, RATHER THAN AD-HOC",
  "security2-15": "5 ACCEPTABILITY COMPLETE MEDIATION ACCEPTABILITY OF SECURITY MEASURES TAKEN SHOULDN T GET IN THE WAY OF THE USER S WORK IF SECURITY MECHANISMS ARE DIFFICULT TO USE, THEY MIGHT BE IGNORED OR WRONGLY FOLLOWED COMPLETE MEDIATION EVERY ACCESS CHECKED AGAINST ACCESS RIGHTS",
  "security2-16": "6 OPEN DESIGN THE EFFECTIVENESS OF THE SECURITY MECHANISMS SHOULD NOT DEPEND UPON SECRECY OF THE DESIGN OF THE MECHANISMS THEMSELVES PEOPLE WILL EVENTUALLY DISCOVER THE MECHANISM ANYWAY WHY IS IT DESIRABLE THAT SECURITY MECHANISMS ARE OPEN MECHANISMS CAN BE REVIEWED BY SEVERAL EXPERTS IF THEY ARE NOT SECRET DESIRABLE",
  "security2-17": "7 TYPES OF ACCESS PROTECTION USER-ORIENTED CONTROL OF ACCESS MAKE SURE USER IS WHO THEY SAYS CHECK ACCESS RIGHT OF THAT USER DATA-ORIENTED CONTROL OF ACCESS CONTROL WHOEVER ACCESS THE DATA",
  "security2-18": "8 USER-ORIENTED ACCESS CONTROL REQUIRE AUTHENTICATION OF USERS THE MOST COMMON METHOD IS THE LOGIN DISADVANTAGES FORGOTTEN PASSWORDS BAD SIMPLE PASSWORDS CAN BE CRACKED OTHER CONTROL METHODS INCLUDE KEYS, SWIPE CARD, BANK CARD BIOMETRICS, E.G.AUTHENTICATION RETINAL SCAN, FINGERPRINT. ANY ALTERNATIVE METHODS YOU KNOW TWO FACTOR AUTHENTICATION",
  "security2-19": "9 DATA-ORIENTED ACCESS CONTROL DEFINE AN OBJECT TO BE ANYTHING TO WHICH ACCESS IS BEING CONTROLLED E.G., FILES, PROGRAMS E.G., PORTIONS OF FILES, SEGMENTS OF CODE WITH DATA-ORIENTED ACCESS CONTROL WE ARE TRYING TO CONTROL WHICH PROCESSES CAN DO WHICH OPERATIONS TO WHICH FILES AND PROGRAMS",
  "security2-20": "0 EXAMPLE MICROSOFT WINDOWS EACH PROCESS HAS AN ACCESS TOKEN. EACH OBJECT HAS A SECURITY DESCRIPTOR. WHEN A PROCESS TRIES TO PERFORM AN OPERATION ON AN OBJECT FILE OR PROGRAM ETC. , WINDOWS USES THE PROCESS S ACCESS TOKEN TO CHECK THE SECURITY DESCRIPTOR TO ENSURE THAT THIS OPERATION IS ALLOWED.",
  "security2-21": "1 ACCESS TOKEN - WINDOWS EACH PROCESS S ACCESS TOKEN STORES THE FOLLOWING SECURITY ID SID - A UNIQUE NUMBER WHICH IDENTIFIES THE USER UNIQUELY ACROSS ALL MACHINES ON NETWORK. GROUP SIDS - A LIST OF THE GROUPS TO WHICH THE USER BELONGS. ACCESS CAN BE DEFINED ON THE BASIS OF GROUP AND INDIVIDUAL SIDS. INFORMATION ON PRIVILEGES, OWNER.",
  "security2-22": "2 SECURITY DESCRIPTOR - WINDOWS EACH OBJECT S E.G. FILE OR PROGRAM SECURITY DESCRIPTOR CONTAINS OWNER THE SID OR GROUP SID OF THE OWNER OF THIS OBJECT . FLAGS INDICATING WHAT IS ALL PRESENT IN THE SECURITY DESCRIPTOR, E.G. DACL, SACL DISCRETIONARY ACCESS CONTROL LIST DACL DETERMINES WHICH USERS AND GROUPS CAN ACCESS THE OBJECT SYSTEM ACCESS CONTROL LIST SACL SPECIFIES WHAT KINDS OF OPERATIONS ON THE OBJECT SHOULD GENERATE AUDIT MESSAGES",
  "security2-23": "3 W.STALLINGS, OPERATING SYSTEMS , ED. 6, FIGURE 16.12.",
  "security2-24": "4 HOW ARE THESE USED WHEN A PROCESS TRIES TO PERFORM AN OPERATION ON AN OBJECT FILE OR PROGRAM ETC. , WINDOWS DOES THE FOLLOWING GETS THIS PROCESS S SID AND GROUP SID FROM ITS ACCESS TOKEN LOOKS DOWN THE DISCRETIONARY ACCESS CONTROL LIST IN THE OBJECT S SECURITY DESCRIPTOR TO TRY TO FIND A MATCHING SID IN THE LIST WHEN FOUND, THE ACCESS MASK IS CONSULTED TO SEE IF THE REQUESTED OPERATION IS PERMITTED.",
  "security2-25": "5 FIREWALLS MALWARE BARRIERS BETWEEN YOU AND THE INTERNET IT S A GRIZZLY WORLD OUT THERE",
  "security2-26": "6 BASIC PC SECURITY FIREWALL AND MALWARE PROTECTION IS A MUST FOR ANY SYSTEM INCLUDING YOURS . SOME OF THIS MAY BE PROVIDED BY YOUR LOCAL NETWORK E.G. A FIREWALL PROTECTING YOUR COMPANY NETWORK . SOME WILL HAVE TO BE DONE ON YOUR COMPUTER E.G. SOFTWARE FIREWALL . OS MUST PROVIDE INTERFACE TO THE KERNEL FOR SUCH SOFTWARE CAN ALSO BE PART OF THE OS ITSELF WINDOWS AND LINUX",
  "security2-27": "7 MALWARE PROTECTION YOU ALSO NEED MALWARE VIRUS, SPYWARE, TROJAN, ETC. PROTECTION OFF-LINE SCAN ABILITY TO RUN SYSTEM SCANS TO DETECT AND DELETE OR QUARANTINE MALWARE THAT HAS GOT ONTO THE SYSTEM. ON-ACCESS SCAN TO PREVENT MALWARE GETTING INTO THE SYSTEM IN THE FIRST PLACE. COMMERCIAL VENDORS SUCH AS MCAFEE, NORTON SYMANTEC , KASPERSKY AND MANY CITE A FEW SOFTWARE PROVIDING THAT KIND OF PROTECTION MORE. ALSO WINDOWS DEFENDER.",
  "security2-28": "8 INTEGRATED PACKAGES SEVERAL VENDORS SUPPLY PACKAGES INTEGRATING MANY SECURITY FEATURES MALWARE PROTECTION ON-ACCESS SCAN FIREWALL INCOMING AND OUTGOING PROGRAM PROCESS CONTROL WHICH PROGRAMS ARE ALLOWED TO ACCESS OR SERVE THE INTERNET WHICH PROGRAMS ARE ALLOWED TO INTERACT WITH OTHER PROGRAMS SPAM CONTROL, ANTI-PHISHING STRATEGY PARENTAL CONTROL, PRIVACY COOKIE CONTROL.",
  "security2-29": "9 GET PROTECTED THE PREVIOUSLY MENTIONED VENDORS ALL SELL PRODUCTS THAT PROVIDE SOME FORM OF INTEGRATED SECURITY PROTECTION. UNLESS YOUR ORGANISATION PROVIDES YOUR PROTECTION, YOU MUST EQUIP YOURSELF HOME COMPUTERS ARE VERY VULNERABLE. UPDATES YOUR SYSTEM REGULARLY AND THESE SOFTWARE ESPECIALLY SIGNATURE DATABASE",
  "security2-30": "0 GNU LINUX HAS BEEN DESIGNED WITH SECURITY IN MIND SINCE THE BEGINNING ACL, HAS MANY ADVANCED SECURITY FEATURES INTEGRATED IN THE SYSTEM BUT THEY MIGHT REQUIRE CONFIGURATION DEPENDING ON THE DISTRIBUTION USED IS ALSO TARGETED OCCASIONALLY BY MALWARES",
  "security2-31": "1 GNU LINUX FIREWALL BUILT INSIDE THE KERNEL NETFILTER MODULE COMMANDS TO CONFIGURE IT IPTABLES IPV4 AND IP6TABLES IPV6 GUI AVAILABLE FIRESTARTER GNOME , UFW UBUNTU ,",
  "security2-32": "2 OTHER SECURITY FEATURES CHROOT JAILING PROCESSES LIMITS THE PART OF THE FILESYSTEM THAT A PROCESS CAN SEE AND ACCESS SECURITY MODULES OR OPTIONS IN THE KERNEL GRSEC, SELINUX NSA , SMACK HARDENING PROGRAMS AND LIBRARIES COMPILED WITH SOME SECURITY FEATURES OF GCC STACK PROTECTION,",
  "security2-33": "3 CONCLUSION SECURITY IS A TASK ON THE SHOULDER OF ANY USER OR DEVELOPER OF COMPUTER SYSTEMS AND THREATS ARE NUMEROUS OS AND 3RD PARTIES PROVIDE TOOLS TO ASSIST WITH IT DEALING WITH PERMISSIONS FROM THE DATA AND USER POINT OF VIEW PROTECTING THE OS ITSELF FROM EXTERNAL THREATS",
  "security2-34": "4 RECOMMENDED READING OPERATING SYSTEMS BY WILLIAM STALLINGS PRENTICE HALL INTERNATIONAL EDITIONS SECURITY, P 634 ED.6 , P 659 ED.7 . WINDOWS SECURITY, PP.697-701 ED.6 , PP.687-692 ED.7 . MALICIOUS SOFTWARE, PP.647-663 ED.6 , PP.639-655 ED.7 . MALWARE DEFENSE, PP.677-687 ED.7 .",
  "semaphores-01": "OPERATING SYSTEMS CONCURRENCY SEMAPHORES D. JONES - CENTRAL QUEENSLAND UNIVERSITY ADDITIONAL MATERIAL BY J.L. ARNOTT - UNIVERSITY OF DUNDEE ADDITIONAL MATERIAL AND PRESENTED BY L. MAGERAND - UNIVERSITY OF DUNDEE AC22005 1",
  "semaphores-02": "OPERATING SYSTEMS HIGHER LEVEL APPROACH SEMAPHORES IN A HIGHER-LEVEL CONTEXT, THERE IS A HIGHLEVEL ABSTRACT IMPLEMENTATION OF THESE FACILITIES, CALLED A SEMAPHORE . A SEMAPHORE ALLOWS TWO OR MORE PROCESSES TO COMMUNICATE AND SYNCHRONIZE USING SIGNALS AROUND CRITICAL SECTIONS OF CODE. AC22005 2",
  "semaphores-03": "OPERATING SYSTEMS SEMAPHORES SIGNAL WAIT A PROCESS CAN STOP ITS EXECUTION AT A PARTICULAR POINT UNTIL IT RECEIVES A SIGNAL BY CALLING A SPECIAL FUNCTION OR PRIMITIVE WAIT S A PROCESS CAN SEND A SIGNAL TO OTHER PROCESSES USING THE PRIMITIVE SIGNAL S HOW THE OS USE THIS TO ACHIEVE MUTEX WAIT BLOCKS THE PROCESS OS SEND IT TO THE BLOCKED STATE UNTIL ANOTHER PROCESS SEND THE APPROPRIATE SIGNAL. AC22005 3",
  "semaphores-04": "OPERATING SYSTEMS SAMPLE USE OF A SEMAPHORE REPEAT DO SOMETHING WAIT SEM1 WAIT EXECUTED ON SEM1 DO SOMETHING CRITICAL SIGNAL SEM1 SIGNAL EXECUTED ON SEM1 DO SOMETHING ELSE FOREVER AC22005 4",
  "semaphores-05": "OPERATING SYSTEMS INTEGER COUNT PROCESS QUEUE A SEMAPHORE IS A RECORD CONTAINING AN INTEGER COUNT AND A QUEUE STALLINGS CH.5 . COUNT CAN BE INITIALISED TO ANY NON-NEGATIVE INTEGER VALUE OFTEN THIS WILL BE 1, I.E. THERE WILL BE 1 AVAILABLE INSTANCE OF THE RESOURCE . QUEUE CONTAINS A LIST OF WAITING PROCESSES IF THERE ARE ANY PROCESSES WAITING . QUEUE WILL BE EMPTY TO START WITH. AC22005 5",
  "semaphores-06": "OPERATING SYSTEMS SEMAPHORE LOGIC WAIT DECREMENTS THE SEMAPHORE COUNT AND IF COUNT IS NOW 0, THE PROCESS IS BLOCKED AND ADDED TO SEMAPHORE QUEUE. IF COUNT 0, THE PROCESS IS NOT BLOCKED. SIGNAL INCREMENTS THE SEMAPHORE COUNT AND IF COUNT 0, ONE WAITING PROCESS IS REMOVED FROM SEMAPHORE QUEUE AND PLACED ON READY LIST. AC22005 6",
  "semaphores-07": "OPERATING SYSTEMS BINARY SEMAPHORES BINARY SEMAPHORES CAN ALSO BE USED THEY TAKE THE VALUE 0 OR 1. WAIT CHANGES SEMAPHORE TO 0 IF IT 1, BUT DOES NOT BLOCK THE PROCESS. WAIT BLOCKS THE PROCESS IF SEMAPHORE 0, AND PUTS THE PROCESS ONTO THE SEMAPHORE QUEUE. SIGNAL SETS SEMAPHORE 1 IF QUEUE IS EMPTY, ELSE TAKES 1 PROCESS OFF QUEUE LETS IT RUN. WHAT DOES THIS LOOKS LIKE ONE OR TWO WORDS AC22005 7",
  "semaphores-08": "OPERATING SYSTEMS ADVANTAGES OF SEMAPHORES SIMPLE AND EFFICIENT RELATIVELY INTUITIVE FLEXIBLE FOR MULTIPLE USE QUICK AND EASY TO IMPLEMENT. AC22005 8",
  "semaphores-09": "OPERATING SYSTEMS DISADVANTAGES OF SEMAPHORES EASY TO MAKE MISTAKES. PROGRAMMER IS RESPONSIBLE FOR ENSURING CORRECT USAGE. DIFFICULT TO PROVE PROGRAMS ARE CORRECT. PROCESSES FREQUENTLY HAVE TO CO-OPERATE IN THEIR USE OF SEMAPHORES. THIS BREAKS THE ISOLATION MODULARISATION OF PROCESSES. AC22005 9",
  "semaphores-10": "OPERATING SYSTEMS TEST- -SET INSIDE SEMAPHORE THE CODE FOR WAIT AND SIGNAL IS ITSELF CRITICAL CODE, AND MUST BE MADE ATOMIC INDIVISIBLE NEED ATOMIC TEST- -SET INSTRUCTIONS INSIDE WAIT AND SIGNAL TO ENSURE MUTUAL EXCLUSION WHEN THEY THEMSELVES ARE BEING EXECUTED THIS SHOULD BE DEALT WITH FOR YOU BY THE LOWLEVEL CODE INSIDE THE SEMAPHORE PRIMITIVES AND THUS THE LIBRARIES PROVIDING THEM . AC22005 10",
  "semaphores-11": "OPERATING SYSTEMS REMEMBER THE BANK ACCOUNT CASH MACHINE IN GLASGOW READS YOUR ACCOUNT TOTAL FROM YOUR BANK INTO LOCAL VARIABLE TOTAL1... ... AND ADDS 100 TO TOTAL1. CASH MACHINE IN DUNDEE READS YOUR ACCOUNT TOTAL FROM YOUR BANK INTO LOCAL VARIABLE TOTAL2 ... ... AND SUBTRACTS 50 FROM TOTAL2. CASH MACHINE IN GLASGOW WRITES TOTAL1 INTO YOUR BANK ACCOUNT TOTAL. CASH MACHINE IN DUNDEE WRITES TOTAL2 INTO YOUR BANK ACCOUNT TOTAL SLIGHTLY AFTER. YOU LOSE 100 DUE TO AWHAT RACE IS THE CONDITION. NAME OF THIS AC22005 11",
  "semaphores-12": "OPERATING SYSTEMS SOLVE THE BANK ACCOUNT PROBLEM EACH CASH MACHINE IS SUCH THAT WAIT YOUR BANK ACCOUNT IT READS YOUR BANK ACCOUNT TOTAL INTO LOCAL VARIABLE TOTAL IT CHANGES TOTAL ACCORDING TO YOUR OPERATION IT WRITES TOTAL INTO YOUR BANK ACCOUNT TOTAL SIGNAL YOUR BANK ACCOUNT THERE IS NO RACE CONDITION ANYMORE. WHAT IS THE RED PART WHAT ARE THE GREEN PARTS AC22005 12",
  "semaphores-13": "OPERATING SYSTEMS A QUESTION OF HIGH FINANCE WHAT TYPE THE SEMAPHORE YOUR BANK ACCOUNT SHOULD HOW SHOULD IT BE INITIALIZED A BINARY SEMAPHORE INITIALIZED TO 1 AT ACCOUNT CREATION. IS IT POSSIBLE TO SAY HOW MANY PROCESSES THIS SEMAPHORE SHOULD BE ABLE TO STORE IN ITS QUEUE NOT REALLY, DEPENDS HOW LIKELY IT IS THAT MULTIPLE OPERATIONS WOULD BE DONE AT THE SAME TIME. IS THERE AN EASY WAY FOR THE BANK TO FREEZE THE ACCOUNT WHEN THE ACCOUNT HOLDER DIES CREATE A WAIT WITH NO CORRESPONDING SIGNAL. AC22005 13",
  "semaphores-14": "OPERATING SYSTEMS PRODUCER CONSUMER PROBLEM ONE OR MORE PRODUCERS ARE GENERATING DATA AND PLACING THEM INTO A BUFFER CONCURRENTLY ONE CONSUMER IS TAKING DATA OUT OF THE BUFFER ONLY ONE AGENT PRODUCER OR CONSUMER MAY ACCESS THE BUFFER AT ONE TIME ASSUME A BOUNDED BUFFER BUFFER OF FINITE SIZE , E.G. CIRCULAR FIFO. USE SEMAPHORES TO CONTROL ACCESS TO BUFFER AC22005 14",
  "semaphores-15": "OPERATING SYSTEMS BOUNDED BUFFER BUFFER B IS AN ARRAY 0 .. SIZE-1 OF ITEMS IN IS INPUT POINTER, AN INTEGER INITIALISED TO 0 OUT IS OUTPUT POINTER, AN INTEGER INITIALISED TO 0 WORKING AS A FIFO QUEUE, ADDING AN ITEM INCREASE IN AND REMOVING ONE INCREASE OUT. WHEN OUT IN, THE BUFFER IS EMPTY AND NOTHING CAN BE TAKEN. WHAT TYPE OF SEMAPHORE WILL BE USED TO PROTECT THIS SHARED RESOURCE WE WANT MUTEX 1. 2. 3. BINARY, INITIALISED TO 1 AND AN EMPTY QUEUE GENERAL, INITIALISED TO THE NUMBER OF POSSIBLE PRODUCERS GENERAL, INITIALISED TO THE MAXIMUM NUMBER OF ITEMS IN THE BUFFER AC22005 15",
  "semaphores-16": "OPERATING SYSTEMS BUFFER SEMAPHORES S IS A BINARY SEMAPHORE, INITIALISED TO 1 WHAT CAN WE SAY ABOUT THE CONSUMER PROCESS WHEN IT RE STARTS 1. 2. 3. IT MUST START BY CONSUMING A ITEM IN THE BUFFER PREVIOUSLY DEPOSITED BY A PRODUCER IT MUST START BY WAITING FOR THE FIRST ITEM TO BE DEPOSITED IN THE BUFFER BY A PRODUCER IT DEPENDS ON HOW AND WHEN ITEMS ARE ADDED TO THE BUFFER BY THE PRODUCER S CANNOT KNOW FOR SURE CREATED AT THE N IS A SEMAPHORE, INITIALISED TO 0 F IS A SEMAPHORE, INITIALISED TO SIZE AC22005 SAME TIME AS THE BUFFER 16",
  "semaphores-17": "OPERATING SYSTEMS BUFFER PROCEDURES THE BUFFER FUNCTIONS AS A FIFO STORE WHEN POINTER OUT POINTER IN THE BUFFER IS EMPTY. PROCEDURE APPEND WILL APPEND AN ITEM I TO THE BUFFER, AND INCREMENT POINTER IN. PROCEDURE TAKE WILL REMOVE ONE ITEM FROM THE BUFFER, AND INCREMENT POINTER OUT. AC22005 17",
  "semaphores-18": "OPERATING SYSTEMS PRODUCERS PROCESSES RUNNING POTENTIALLY CONCURRENTLY WITH CONSUMER REPEAT I PRODUCE GETS AN ITEM I FROM SOMEWHERE. WAIT F DECREMENTS SPACE AVAILABLE ON BUFFER. WAIT S ALLOWS ONLY 1 PROCESS INTO THE BUFFER. APPEND I PLACES ITEM I ONTO BUFFER. SIGNAL S LETS ANOTHER PROCESS INTO THE BUFFER. SIGNAL N INCREMENT ITEM COUNT SEMAPHORE . FOREVER AC22005 18",
  "semaphores-19": "OPERATING SYSTEMS CONSUMER PROCESS RUNNING EVENTUALLY CONCURRENTLY WITH PRODUCER S REPEAT WAIT N DECREMENT ITEM COUNT SEMAPHORE . WAIT S ALLOWS ONLY 1 PROCESS INTO THE BUFFER. I TAKE REMOVES ITEM I FROM BUFFER. SIGNAL S LETS ANOTHER PROCESS INTO THE BUFFER. SIGNAL F RELEASES 1 SPACE ON THE BUFFER. CONSUME I USES ITEM I FOR SOMETHING PRINTING . FOREVER AC22005 19",
  "semaphores-20": "OPERATING SYSTEMS MONITORS I THE MAJOR PROBLEM WITH SEMAPHORES IS THAT WAIT AND SIGNAL HAVE TO BE EXPLICITLY PLACED AROUND THE CRITICAL CODE IN THE CALLING PROGRAM. IT WOULD BE FAR SAFER IF THE ENFORCEMENT OF MUTUAL EXCLUSION COULD BE AUTOMATICALLY ATTACHED TO THE VARIOUS PIECES OF CRITICAL CODE THEMSELVES. SO GATHER TOGETHER ALL CRITICAL SECTIONS PUT THEM IN A PROTECTIVE ENVIRONMENT CALLED A MONITOR. SEE STALLINGS ED. 7, P. 246-252. AC22005 20",
  "semaphores-21": "OPERATING SYSTEMS MONITORS II A MONITOR IS A SOFTWARE MODULE THAT CONSISTS OF ONE OR MORE PROCEDURES, AN INITIALIZATION SECTION AND HIDDEN LOCAL DATA. OUTSIDE WORLD PROCESSES CAN ONLY SEE THE PROCEDURES. LOCAL DATA VARIABLES CAN ONLY BE MANIPULATED WITHIN THE PROCEDURES. ENTRY INTO MONITOR IS THROUGH A PROCEDURE CALL WHICH ENSURES ONLY THE MAXIMUM NUMBER OF PROCESSES ARE INSIDE AT ANY TIME. AC22005 21",
  "semaphores-22": "OPERATING SYSTEMS MESSAGE PASSING STALLINGS, ED.7 PP.253-259. IN BOTH SEMAPHORES AND MONITORS, PROCESSES INTERACT BY SIGNALLING. ALL PROCESSES HAVE TO KNOW WHAT THE IMPLICIT MESSAGE IS BEHIND EACH SIGNAL. FAR GREATER FLEXIBILITY CAN BE ACHIEVED IF ONE PROCESS CAN ACTUALLY PASS AN EXPLICIT MESSAGE TO ONE OR MORE OTHER PROCESSES. AC22005 22",
  "semaphores-23": "OPERATING SYSTEMS SIMPLE MESSAGE PRIMITIVES THE MINIMUM REQUIREMENT FOR PROCESSES TO PASS MESSAGES TO EACH OTHER IS A PAIR OF INSTRUCTIONS SEND DESTINATION, MESSAGE RECEIVE SOURCE, MESSAGE MPI MESSAGE PASSING INTERFACE IS A STANDARD MESSAGE PASSING LANGUAGE. HAS MANY DIFFERENT COMMANDS. OPENMPI IS AN OPEN SOURCE IMPLEMENTATION AC22005 23",
  "semaphores-24": "OPERATING SYSTEMS CONCLUSION SEMAPHORES ARE MORE GENERAL MECHANISM THAN MUTEX AND ALLOWS TO DEAL WITH MORE COMPLEX SITUATION MONITORS CAN SIMPLIFY DEVELOPMENT BY PROVIDING AN AUTOMATIC WAY TO PROTECT SHARED RESOURCES MESSAGE PASSING ALLOW PROCESS TO COMMUNICATE WHAT THEY ARE DOING AC22005 24"
}